apply plugin: 'java'
apply plugin: 'eclipse'

repositories {
  mavenCentral()
}

sourceSets {
  main {
    java {
      srcDir 'src'
      exclude 'org/aikodi/java/eclipse/**'
    }
  }
  test {
    java {
      srcDir 'src'
      exclude 'org/aikodi/java/eclipse/**'
    }
  }
}

test {
  scanForTestClasses false
  include '**/AllTests.class'
  outputs.upToDateWhen { false }
}

configurations {
  deployerJars
}

dependencies {
   deployerJars 'org.apache.maven.wagon:wagon-ssh:2.2'
}

//uploadArchives {
//    repositories.mavenDeployer {
//        configuration = configurations.deployerJars
//        repository(url: "scp://webssh.ugent.be/users/m/mcvdoore/WWW/repository/") {
//            authentication(userName: "mcvdoore")
//        }
//        pom.version = '1.2.21'
//        pom.groupId = 'markovandooren'
//        pom.artifactId = 'jnome'
//    }
//}
List shared = [
     'org.ow2.asm:asm-debug-all:5.0.4',
     'com.lexicalscope.jewelcli:jewelcli:0.8.5',
     'net.sf.jgrapht:jgrapht:+',
     'org.antlr:antlr:3.2',
     'org.antlr:antlr4:4.5.3',
     'org.apache.logging.log4j:log4j-api:2.6',
     'org.apache.logging.log4j:log4j-core:2.6',
]

dependencies {
   implementation project(':chameleon')
   implementation group: 'junit', name: 'junit', version: '4.+'
   //compile group: 'markovandooren', name: 'chameleon', version: '1.2.21'
   implementation shared
}


task testGroupTwo(type: Test) {
   include '**/AllTests.class'
}
task copyRuntimeLibs(type: Copy) {
    into "lib"
    from configurations.runtimeOnly
  }

configurations {
  local
}

dependencies {
  //local project(':rejuse')
  //local project(':chameleon')
  //local shared
}
task makeZip(type: Zip) {
    archiveFileName = 'jnome.jar'
    //delete new File(archiveFileName)
    destinationDirectory = new File('.')
    duplicatesStrategy = 'exclude'
    from (configurations.runtimeOnly) {
       into '.'
    }
    from (configurations.archives.allArtifacts.getFiles()) {
      into '.'
    }
}
task antlr4(type: JavaExec) {
  mainClass = 'org.antlr.v4.Tool'
  classpath = sourceSets.main.runtimeClasspath
  args '-visitor', '-package','org.aikodi.java8.parser','src/org/aikodi/java8/parser/Java8.g4'
}
