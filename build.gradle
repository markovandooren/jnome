apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'
//apply plugin: 'org.akhikhl.wuff.eclipse-ide-bundle'

//dependencies {
//  compile "${eclipseMavenGroup}:org.eclipse.core.commands:+"
//}


repositories {
  mavenCentral()
  maven {
    url 'http://users.ugent.be/~mcvdoore/repository'
  }
}

sourceSets {
  main {
    java {
      srcDir 'src'
      exclude 'be/kuleuven/cs/distrinet/jnome/eclipse/**'
      //exclude 'be/kuleuven/cs/distrinet/jnome/tool/dependency/**'
      //exclude 'be/kuleuven/cs/distrinet/jnome/tool/design/**'
      //exclude 'be/kuleuven/cs/distrinet/jnome/tool/syntax/**'
    }
  }
  test {
    java {
      srcDir 'src'
      exclude 'be/kuleuven/cs/distrinet/jnome/eclipse/**'
      //exclude 'be/kuleuven/cs/distrinet/jnome/tool/dependency/**'
      //exclude 'be/kuleuven/cs/distrinet/jnome/tool/design/**'
      //exclude 'be/kuleuven/cs/distrinet/jnome/tool/syntax/**'
    }
  }
}

test {
  scanForTestClasses false
  include '**/AllTests.class'
  outputs.upToDateWhen { false }
  jvmArgs '-Xloggc:garbage.log', '-XX:+PrintGCDetails', '-XX:+PrintGCDateStamps'
}

configurations {
  deployerJars
}

dependencies {
   deployerJars 'org.apache.maven.wagon:wagon-ssh:2.2'
}

uploadArchives {
    repositories.mavenDeployer {
        configuration = configurations.deployerJars
        repository(url: "scp://webssh.ugent.be/users/m/mcvdoore/WWW/repository/") {
            authentication(userName: "mcvdoore")
        }
        pom.version = '1.2.20'
        pom.groupId = 'markovandooren'
        pom.artifactId = 'jnome'
    }
}
List shared = [
     'org.ow2.asm:asm:5.0.3',
     'com.lexicalscope.jewelcli:jewelcli:0.8.5',
     'net.sf.jgrapht:jgrapht:+',
     'org.antlr:antlr:3.2',
     'org.apache.logging.log4j:log4j-api:2.6',
     'org.apache.logging.log4j:log4j-core:2.6',
]

dependencies {
   compile group: 'markovandooren', name: 'chameleon', version: '1.2.20'
   compile shared
}


task testGroupTwo(type: Test) {
   include '**/AllTests.class'
}
task copyRuntimeLibs(type: Copy) {
    into "lib"
    from configurations.runtime
  }

configurations {
  local
}

dependencies {
  //local project(':rejuse')
  //local project(':chameleon')
  //local shared
}
task makeZip(type: Zip) {
    archiveName = 'jnome.jar'
    delete new File(archiveName)
    destinationDir = new File('.')
    duplicatesStrategy = 'exclude'
    from (configurations.runtime) {
       into '.'
    }
    from (configurations.archives.allArtifacts.getFiles()) {
      into '.'
    }
}

