// $ANTLR 3.3 Nov 30, 2010 12:50:56 JavaP.g 2016-06-06 22:43:51

package be.kuleuven.cs.distrinet.jnome.input.parser;

import org.aikodi.chameleon.workspace.View;

import org.aikodi.chameleon.exception.ModelException;
import org.aikodi.chameleon.exception.ChameleonProgrammerException;

import org.aikodi.chameleon.core.document.Document;

import org.aikodi.chameleon.oo.member.DeclarationWithParametersHeader;
import org.aikodi.chameleon.oo.member.SimpleNameDeclarationWithParametersHeader;
import org.aikodi.chameleon.core.declaration.SimpleNameSignature;
import org.aikodi.chameleon.core.declaration.TargetDeclaration;
import org.aikodi.chameleon.core.declaration.DeclarationContainer;
import org.aikodi.chameleon.oo.type.*;
import be.kuleuven.cs.distrinet.jnome.core.type.*;

import org.aikodi.chameleon.core.element.Element;

import org.aikodi.chameleon.oo.expression.*;
import org.aikodi.chameleon.core.reference.*;

import org.aikodi.chameleon.core.language.Language;

import org.aikodi.chameleon.oo.member.Member;

import org.aikodi.chameleon.oo.method.*;

import org.aikodi.chameleon.oo.method.exception.*;

import org.aikodi.chameleon.core.modifier.Modifier;

import org.aikodi.chameleon.core.namespace.Namespace;
import org.aikodi.chameleon.core.namespace.RootNamespace;
import org.aikodi.chameleon.core.namespace.NamespaceReference;

import org.aikodi.chameleon.core.namespacedeclaration.NamespaceDeclaration;
import org.aikodi.chameleon.core.namespacedeclaration.Import;
import org.aikodi.chameleon.oo.namespacedeclaration.TypeImport;
import org.aikodi.chameleon.core.namespacedeclaration.DemandImport;

import org.aikodi.chameleon.core.reference.CrossReference;

import org.aikodi.chameleon.oo.statement.Block;
import org.aikodi.chameleon.oo.statement.Statement;

import org.aikodi.chameleon.oo.variable.VariableDeclaration;
import org.aikodi.chameleon.oo.variable.VariableDeclarator;

import org.aikodi.chameleon.oo.modifier.AnnotationModifier;

import org.aikodi.chameleon.oo.type.ClassBody;
import org.aikodi.chameleon.oo.type.RegularType;
import org.aikodi.chameleon.oo.type.Type;
import org.aikodi.chameleon.oo.type.ClassWithBody;
import org.aikodi.chameleon.oo.type.TypeReference;
import org.aikodi.chameleon.oo.type.TypeElement;

import org.aikodi.chameleon.oo.type.generics.TypeParameter;
import org.aikodi.chameleon.oo.type.generics.FormalTypeParameter;
import org.aikodi.chameleon.oo.type.generics.TypeArgument;
import org.aikodi.chameleon.oo.type.generics.EqualityTypeArgument;
import org.aikodi.chameleon.oo.type.generics.TypeConstraint;
import org.aikodi.chameleon.oo.type.generics.ExtendsConstraint;
import org.aikodi.chameleon.oo.type.generics.ExtendsWildcard;
import org.aikodi.chameleon.oo.type.generics.SuperWildcard;

import org.aikodi.chameleon.oo.type.inheritance.SubtypeRelation;

import org.aikodi.chameleon.oo.variable.*;

import org.aikodi.chameleon.input.InputProcessor;
import org.aikodi.chameleon.input.TextPosition;

import org.aikodi.chameleon.support.expression.RegularLiteral;
import org.aikodi.chameleon.support.expression.NullLiteral;
import org.aikodi.chameleon.support.expression.AssignmentExpression;
import org.aikodi.chameleon.support.expression.ConditionalExpression;
import org.aikodi.chameleon.support.expression.ConditionalAndExpression;
import org.aikodi.chameleon.support.expression.ConditionalOrExpression;
import org.aikodi.chameleon.support.expression.InstanceofExpression;
import org.aikodi.chameleon.support.expression.ThisLiteral;
import org.aikodi.chameleon.support.expression.FilledArrayIndex;
import org.aikodi.chameleon.support.expression.EmptyArrayIndex;
import org.aikodi.chameleon.support.expression.ArrayIndex;
import org.aikodi.chameleon.support.expression.ClassCastExpression;
import org.aikodi.chameleon.support.expression.SuperTarget;

import org.aikodi.chameleon.support.member.simplename.method.NormalMethod;

import org.aikodi.chameleon.support.member.simplename.variable.MemberVariableDeclarator;
import org.aikodi.chameleon.support.member.simplename.operator.infix.InfixOperatorInvocation;
import org.aikodi.chameleon.support.member.simplename.operator.prefix.PrefixOperatorInvocation;
import org.aikodi.chameleon.support.member.simplename.operator.postfix.PostfixOperatorInvocation;
import org.aikodi.chameleon.support.member.simplename.method.RegularMethodInvocation;

import org.aikodi.chameleon.support.input.*;

import org.aikodi.chameleon.support.modifier.Abstract;
import org.aikodi.chameleon.support.modifier.Final;
import org.aikodi.chameleon.support.modifier.Private;
import org.aikodi.chameleon.support.modifier.Protected;
import org.aikodi.chameleon.support.modifier.Public;
import org.aikodi.chameleon.support.modifier.Static;
import org.aikodi.chameleon.support.modifier.Native;
import org.aikodi.chameleon.support.modifier.Enum;
import org.aikodi.chameleon.support.modifier.Interface;

import org.aikodi.chameleon.support.statement.StatementExpression;
import org.aikodi.chameleon.support.statement.LocalClassStatement;
import org.aikodi.chameleon.support.statement.AssertStatement;
import org.aikodi.chameleon.support.statement.IfThenElseStatement;
import org.aikodi.chameleon.support.statement.ForStatement;
import org.aikodi.chameleon.support.statement.ForControl;
import org.aikodi.chameleon.support.statement.ForInit;
import org.aikodi.chameleon.support.statement.SimpleForControl;
import org.aikodi.chameleon.support.statement.EnhancedForControl;
import org.aikodi.chameleon.support.statement.StatementExprList;
import org.aikodi.chameleon.support.statement.TryStatement;
import org.aikodi.chameleon.support.statement.CatchClause;
import org.aikodi.chameleon.support.statement.FinallyClause;
import org.aikodi.chameleon.support.statement.DoStatement;
import org.aikodi.chameleon.support.statement.WhileStatement;
import org.aikodi.chameleon.support.statement.SwitchStatement;
import org.aikodi.chameleon.support.statement.SwitchCase;
import org.aikodi.chameleon.support.statement.SwitchLabel;
import org.aikodi.chameleon.support.statement.CaseLabel;
import org.aikodi.chameleon.support.statement.DefaultLabel;
import org.aikodi.chameleon.support.statement.EnumLabel;
import org.aikodi.chameleon.support.statement.ReturnStatement;
import org.aikodi.chameleon.support.statement.ThrowStatement;
import org.aikodi.chameleon.support.statement.BreakStatement;
import org.aikodi.chameleon.support.statement.ContinueStatement;
import org.aikodi.chameleon.support.statement.SynchronizedStatement;
import org.aikodi.chameleon.support.statement.EmptyStatement;
import org.aikodi.chameleon.support.statement.LabeledStatement;

import org.aikodi.chameleon.support.type.EmptyTypeElement;
import org.aikodi.chameleon.support.type.StaticInitializer;

import org.aikodi.chameleon.support.variable.LocalVariableDeclarator;

import org.aikodi.chameleon.util.Util;

import org.aikodi.chameleon.oo.plugin.ObjectOrientedFactory;

import be.kuleuven.cs.distrinet.jnome.core.expression.invocation.*;

import be.kuleuven.cs.distrinet.jnome.core.statement.*;

import be.kuleuven.cs.distrinet.jnome.core.expression.*;
import be.kuleuven.cs.distrinet.jnome.core.expression.operator.*;

import be.kuleuven.cs.distrinet.jnome.core.imports.SingleStaticImport;
import be.kuleuven.cs.distrinet.jnome.core.imports.StaticDemandImport;
import be.kuleuven.cs.distrinet.jnome.core.imports.JavaDemandImport;

import be.kuleuven.cs.distrinet.jnome.core.language.Java7;

import be.kuleuven.cs.distrinet.jnome.core.modifier.*;

import be.kuleuven.cs.distrinet.jnome.core.type.*;

import org.aikodi.chameleon.core.reference.*;

import be.kuleuven.cs.distrinet.jnome.core.enumeration.EnumConstant;

import be.kuleuven.cs.distrinet.jnome.core.variable.JavaVariableDeclaration;
import be.kuleuven.cs.distrinet.jnome.core.variable.MultiFormalParameter;

import be.kuleuven.cs.distrinet.jnome.core.expression.*;
import be.kuleuven.cs.distrinet.jnome.input.*;

import java.util.List;
import java.util.ArrayList;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

/** A Java 1.5 grammar for ANTLR v3 derived from the spec
 *
 *  This is a very close representation of the spec; the changes
 *  are comestic (remove left recursion) and also fixes (the spec
 *  isn't exactly perfect).  I have run this on the 1.4.2 source
 *  and some nasty looking enums from 1.5, but have not really
 *  tested for 1.5 compatibility.
 *
 *  I built this with: java -Xmx100M org.antlr.Tool java.g
 *  and got two errors that are ok (for now):
 *  java.g:691:9: Decision can match input such as
 *    "'0'..'9'{'E', 'e'}{'+', '-'}'0'..'9'{'D', 'F', 'd', 'f'}"
 *    using multiple alternatives: 3, 4
 *  As a result, alternative(s) 4 were disabled for that input
 *  java.g:734:35: Decision can match input such as "{'$', 'A'..'Z',
 *    '_', 'a'..'z', '\u00C0'..'\u00D6', '\u00D8'..'\u00F6',
 *    '\u00F8'..'\u1FFF', '\u3040'..'\u318F', '\u3300'..'\u337F',
 *    '\u3400'..'\u3D2D', '\u4E00'..'\u9FFF', '\uF900'..'\uFAFF'}"
 *    using multiple alternatives: 1, 2
 *  As a result, alternative(s) 2 were disabled for that input
 *
 *  You can turn enum on/off as a keyword :)
 *
 *  Version 1.0 -- initial release July 5, 2006 (requires 3.0b2 or higher)
 *
 *  Primary author: Terence Parr, July 2006
 *
 *  Version 1.0.1 -- corrections by Koen Vanderkimpen & Marko van Dooren,
 *      October 25, 2006;
 *      fixed normalInterfaceDeclaration: now uses typeParameters instead
 *          of typeParameter (according to JLS, 3rd edition)
 *      fixed castExpression: no longer allows expression next to type
 *          (according to semantics in JLS, in contrast with syntax in JLS)
 *
 *  Version 1.0.2 -- Terence Parr, Nov 27, 2006
 *      java spec I built this from had some bizarre for-loop control.
 *          Looked weird and so I looked elsewhere...Yep, it's messed up.
 *          simplified.
 *
 *  Version 1.0.3 -- Chris Hogue, Feb 26, 2007
 *      Factored out an annotationName rule and used it in the annotation rule.
 *          Not sure why, but typeName wasn't recognizing references to inner
 *          annotations (e.g. @InterfaceName.InnerAnnotation())
 *      Factored out the elementValue section of an annotation reference.  Created
 *          elementValuePair and elementValuePairs rules, then used them in the
 *          annotation rule.  Allows it to recognize annotation references with
 *          multiple, comma separated attributes.
 *      Updated elementValueArrayInitializer so that it allows multiple elements.
 *          (It was only allowing 0 or 1 element).
 *      Updated localVariableDeclaration to allow annotations.  Interestingly the JLS
 *          doesn't appear to indicate this is legal, but it does work as of at least
 *          JDK 1.5.0_06.
 *      Moved the identifierRule portion of annotationTypeElementRest to annotationMethodRest.
 *          Because annotationConstantRest already references variableDeclarator which
 *          has the identifierRule portion in it, the parser would fail on constants in
 *          annotation definitions because it expected two identifiers.
 *      Added optional trailing ';' to the alternatives in annotationTypeElementRest.
 *          Wouldn't handle an inner interface that has a trailing ';'.
 *      Swapped the expression and type rule reference order in castExpression to
 *          make it check for genericized casts first.  It was failing to recognize a
 *          statement like  "Class<Byte> TYPE = (Class<Byte>)...;" because it was seeing
 *          'Class<Byte' in the cast expression as a less than expression, then failing
 *          on the '>'.
 *      Changed createdName to use typeArguments instead of nonWildcardTypeArguments.
 *          Again, JLS doesn't seem to allow this, but java.lang.Class has an example of
 *          of this construct.
 *      Changed the 'this' alternative in primary to allow 'identifierSuffix' rather than
 *          just 'arguments'.  The case it couldn't handle was a call to an explicit
 *          generic method invocation (e.g. this.<E>doSomething()).  Using identifierSuffix
 *          may be overly aggressive--perhaps should create a more constrained thisSuffix rule?
 *
 *  Version 1.0.4 -- Hiroaki Nakamura, May 3, 2007
 *
 *  Fixed formalParameterDecls, localVariableDeclaration, forInit,
 *  and forVarControl to use variableModifier* not 'final'? (annotation)?
 *
 *  Version 1.0.5 -- Terence, June 21, 2007
 *  --a[i].foo didn't work. Fixed unaryExpression
 *
 *  Version 1.0.6 -- John Ridgway, March 17, 2008
 *      Made "assert" a switchable keyword like "enum".
 *      Fixed compilationUnit to disallow "annotation importDeclaration ...".
 *      Changed "identifierRule ('.' identifierRule)*" to "qualifiedName" in more
 *          places.
 *      Changed modifier* and/or variableModifier* to classOrInterfaceModifiers,
 *          modifiers or variableModifiers, as appropriate.
 *      Renamed "bound" to "typeBound" to better match language in the JLS.
 *      Added "memberDeclaration" which rewrites to methodDeclaration or
 *      fieldDeclaration and pulled type into memberDeclaration.  So we parse
 *          type and then move on to decide whether we're dealing with a field
 *          or a method.
 *      Modified "constructorDeclaration" to use "constructorBody" instead of
 *          "methodBody".  constructorBody starts with explicitConstructorInvocation,
 *          then goes on to blockStatement*.  Pulling explicitConstructorInvocation
 *          out of expressions allowed me to simplify "primary".
 *      Changed variableDeclarator to simplify it.
 *      Changed type to use classOrInterfaceType, thus simplifying it; of course
 *          I then had to add classOrInterfaceType, but it is used in several
 *          places.
 *      Fixed annotations, old version allowed "@X(y,z)", which is illegal.
 *      Added optional comma to end of "elementValueArrayInitializer"; as per JLS.
 *      Changed annotationTypeElementRest to use normalClassDeclaration and
 *          normalInterfaceDeclaration rather than classDeclaration and
 *          interfaceDeclaration, thus getting rid of a couple of grammar ambiguities.
 *      Split localVariableDeclaration into localVariableDeclarationStatement
 *          (includes the terminating semi-colon) and localVariableDeclaration.
 *          This allowed me to use localVariableDeclaration in "forInit" clauses,
 *           simplifying them.
 *      Changed switchBlockStatementGroup to use multiple labels.  This adds an
 *          ambiguity, but if one uses appropriately greedy parsing it yields the
 *           parse that is closest to the meaning of the switch statement.
 *      Renamed "forVarControl" to "enhancedForControl" -- JLS language.
 *      Added semantic predicates to test for shift operations rather than other
 *          things.  Thus, for instance, the string "< <" will never be treated
 *          as a left-shift operator.
 *      In "creator" we rule out "nonWildcardTypeArguments" on arrayCreation,
 *          which are illegal.
 *      Moved "nonWildcardTypeArguments into innerCreator.
 *      Removed 'super' superSuffix from explicitGenericInvocation, since that
 *          is only used in explicitConstructorInvocation at the beginning of a
 *           constructorBody.  (This is part of the simplification of expressions
 *           mentioned earlier.)
 *      Simplified primary (got rid of those things that are only used in
 *          explicitConstructorInvocation).
 *      Lexer -- removed "Exponent?" from FloatingPointLiteral choice 4, since it
 *          led to an ambiguity.
 *
 *      This grammar successfully parses every .java file in the JDK 1.5 source
 *          tree (excluding those whose file names include '-', which are not
 *          valid Java compilation units).
 *
 *  Known remaining problems:
 *      "Letter" and "JavaIDDigit" are wrong.  The actual specification of
 *      "Letter" should be "a character for which the method
 *      Character.isJavaidentifierRuleStart(int) returns true."  A "Java
 *      letter-or-digit is a character for which the method
 *      Character.isJavaidentifierRulePart(int) returns true."
 */
public class Java_JavaP extends ChameleonANTLR3Parser {
    public static final int EOF=-1;
    public static final int T__47=47;
    public static final int T__48=48;
    public static final int T__49=49;
    public static final int T__50=50;
    public static final int T__51=51;
    public static final int T__52=52;
    public static final int T__53=53;
    public static final int T__54=54;
    public static final int T__55=55;
    public static final int T__56=56;
    public static final int T__57=57;
    public static final int T__58=58;
    public static final int T__59=59;
    public static final int T__60=60;
    public static final int T__61=61;
    public static final int T__62=62;
    public static final int T__63=63;
    public static final int T__64=64;
    public static final int T__65=65;
    public static final int T__66=66;
    public static final int T__67=67;
    public static final int T__68=68;
    public static final int T__69=69;
    public static final int T__70=70;
    public static final int T__71=71;
    public static final int T__72=72;
    public static final int T__73=73;
    public static final int T__74=74;
    public static final int T__75=75;
    public static final int T__76=76;
    public static final int T__77=77;
    public static final int T__78=78;
    public static final int T__79=79;
    public static final int T__80=80;
    public static final int T__81=81;
    public static final int T__82=82;
    public static final int T__83=83;
    public static final int T__84=84;
    public static final int T__85=85;
    public static final int T__86=86;
    public static final int T__87=87;
    public static final int T__88=88;
    public static final int T__89=89;
    public static final int T__90=90;
    public static final int T__91=91;
    public static final int T__92=92;
    public static final int T__93=93;
    public static final int T__94=94;
    public static final int T__95=95;
    public static final int T__96=96;
    public static final int T__97=97;
    public static final int T__98=98;
    public static final int T__99=99;
    public static final int T__100=100;
    public static final int T__101=101;
    public static final int T__102=102;
    public static final int T__103=103;
    public static final int T__104=104;
    public static final int T__105=105;
    public static final int T__106=106;
    public static final int T__107=107;
    public static final int T__108=108;
    public static final int T__109=109;
    public static final int T__110=110;
    public static final int T__111=111;
    public static final int T__112=112;
    public static final int T__113=113;
    public static final int T__114=114;
    public static final int T__115=115;
    public static final int T__116=116;
    public static final int T__117=117;
    public static final int T__118=118;
    public static final int T__119=119;
    public static final int T__120=120;
    public static final int T__121=121;
    public static final int T__122=122;
    public static final int T__123=123;
    public static final int T__124=124;
    public static final int T__125=125;
    public static final int T__126=126;
    public static final int T__127=127;
    public static final int T__128=128;
    public static final int T__129=129;
    public static final int T__130=130;
    public static final int T__131=131;
    public static final int T__132=132;
    public static final int T__133=133;
    public static final int T__134=134;
    public static final int T__135=135;
    public static final int DecimalIntegerLiteral=4;
    public static final int HexIntegerLiteral=5;
    public static final int OctalIntegerLiteral=6;
    public static final int BinaryIntegerLiteral=7;
    public static final int IntegerLiteral=8;
    public static final int DecimalNumeral=9;
    public static final int IntegerTypeSuffix=10;
    public static final int NonZeroDigit=11;
    public static final int Digits=12;
    public static final int Digit=13;
    public static final int OctalNumeral=14;
    public static final int OctalDigits=15;
    public static final int OctalDigit=16;
    public static final int HexNumeral=17;
    public static final int HexDigits=18;
    public static final int HexDigit=19;
    public static final int BinaryNumeral=20;
    public static final int BinaryDigits=21;
    public static final int BinaryDigit=22;
    public static final int DecimalFloatingPointLiteral=23;
    public static final int HexadecimalFloatingPointLiteral=24;
    public static final int FloatingPointLiteral=25;
    public static final int ExponentPart=26;
    public static final int FloatTypeSuffix=27;
    public static final int ExponentIndicator=28;
    public static final int SignedInteger=29;
    public static final int Sign=30;
    public static final int HexSignificand=31;
    public static final int BinaryExponent=32;
    public static final int BinaryExponentIndicator=33;
    public static final int EscapeSequence=34;
    public static final int CharacterLiteral=35;
    public static final int StringLiteral=36;
    public static final int UnicodeEscape=37;
    public static final int OctalEscape=38;
    public static final int ENUM=39;
    public static final int ASSERT=40;
    public static final int Letter=41;
    public static final int JavaIDDigit=42;
    public static final int Identifier=43;
    public static final int WS=44;
    public static final int COMMENT=45;
    public static final int LINE_COMMENT=46;

    // delegates
    // delegators
    public JavaParser gJava;
    public JavaParser gParent;

    protected static class MethodScope_scope {
        Method method;
        Token start;
    }
    protected Stack MethodScope_stack = new Stack();
    protected static class TargetScope_scope {
        CrossReferenceTarget target;
        Token start;
    }
    protected Stack TargetScope_stack = new Stack();


        public Java_JavaP(TokenStream input, JavaParser gJava) {
            this(input, new RecognizerSharedState(), gJava);
        }
        public Java_JavaP(TokenStream input, RecognizerSharedState state, JavaParser gJava) {
            super(input, state);
            this.gJava = gJava;
             
            gParent = gJava;
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return JavaParser.tokenNames; }
    public String getGrammarFileName() { return "JavaP.g"; }



      public MethodInvocation invocation(String name, CrossReferenceTarget target) {
        return expressionFactory().createInvocation(name, target);
      }

      public InfixOperatorInvocation createInfixOperatorInvocation(String name,CrossReferenceTarget target) {
        return expressionFactory().createInfixOperatorInvocation(name,target);
      }

      public PrefixOperatorInvocation createPrefixOperatorInvocation(String name,CrossReferenceTarget target) {
        return expressionFactory().createPrefixOperatorInvocation(name,target);
      }

      public PostfixOperatorInvocation createPostfixOperatorInvocation(String name,CrossReferenceTarget target) {
        return expressionFactory().createPostfixOperatorInvocation(name,target);
      }

      private JavaExpressionFactory _expressionFactory = new JavaExpressionFactory();

      public JavaExpressionFactory expressionFactory() {
        return _expressionFactory;
      }

      public void setExpressionFactory(JavaExpressionFactory expressionFactory) {
        _expressionFactory = expressionFactory;
      }

      private Java7Factory _javaFactory = new Java7Factory();

      public Java7Factory factory() {
        return _javaFactory;
      }

      public void setFactory(Java7Factory factory) {
        _javaFactory = factory;
      }

      public CrossReferenceTarget cloneTargetOfTarget(NamedTarget target) {
        CrossReferenceTarget result = null;
        if(target != null) {
          CrossReferenceTarget targetOfTarget = target.getTarget();
          if(targetOfTarget != null) {
            result = Util.clone(targetOfTarget);
          }
        }
        return result;
      }

      public RegularType createType(String name) {
         return factory().createRegularType(name);
      }

      public RegularType createEnum(String name) {
         return factory().createEnumType(name);
      }

      public NormalMethod createNormalMethod(MethodHeader header) {
         return factory().createNormalMethod(header);
      }

      public CrossReferenceTarget cloneTarget(CrossReferenceTarget target) {
        CrossReferenceTarget result = null;
        if(target != null) {
            result = Util.clone(target);
        }
        return result;
      }

      public static class ClassCreatorRest {
        public ClassCreatorRest(List<Expression> args) {
          _args = args; // NO ENCAPSULATION, BUT IT IS JUST THE PARSER.
        }

        public List<Expression> arguments() {
          return _args;
        }

        private List<Expression> _args;

        public void setBody(ClassBody body) {
          _body = body;
        }

        public ClassBody body() {
          return _body;
        }

        private ClassBody _body;
      }


      public static class StupidVariableDeclaratorId {
           public StupidVariableDeclaratorId(String name, int dimension, CommonToken nameToken) {
             _name = name;
             _dimension = dimension;
             _token = nameToken;
           }
           private final String _name;
           private final int _dimension;

           public CommonToken nameToken() {
             return _token;
           }

           private CommonToken _token;

           public String name() {
             return _name;
           }

           public int dimension() {
             return _dimension;
           }
      }


      public void processType(NamespaceDeclaration np, Type type){
        if(np == null) {throw new IllegalArgumentException("namespace part given to processType is null.");}
        if(type == null) {return;}  //throw new IllegalArgumentException("type given to processType is null.");}
        np.add(type);
        // inherit from java.lang.Object if there is no explicit extends relation
        //String fqn = type.getFullyQualifiedName();
        //if(fqn != null) {
        //  if(type.nonMemberInheritanceRelations().isEmpty() && (! fqn.equals("java.lang.Object"))){
        //    type.addInheritanceRelation(new SubtypeRelation(createTypeReference(expressionFactory().createNamedTarget("java.lang"),"Object")));
        //  }
        //}

      }

      public JavaTypeReference myToArray(JavaTypeReference ref, StupidVariableDeclaratorId id) {
        int dim = id.dimension();
        if(dim > 0) {
          return new ArrayTypeReference(ref,dim);
        } else {
          return ref;
        }
      }

      public JavaTypeReference typeRef(String qn) {
        return java().createTypeReference(qn);
      }

      public CrossReferenceTarget createTypeReferenceTarget(String qn) {
      return java().createTypeReferenceTarget(qn);
      }

      public JavaTypeReference createTypeReference(CrossReference<? extends TargetDeclaration> target, String name) {
        return java().createTypeReference(target,name);
      }

      public JavaTypeReference createTypeReference(NamedTarget target) {
        return java().createTypeReference(target);
      }

      public NamespaceDeclaration createNamespaceDeclaration(String ns) {
        return java().plugin(ObjectOrientedFactory.class).createNamespaceDeclaration(ns);
      }

      public NamespaceDeclaration createNamespaceDeclaration() {
        return java().plugin(ObjectOrientedFactory.class).createRootNamespaceDeclaration();
      }


      public Java7 java() {
        return (Java7)language();
      }


    public static class identifierRule_return extends ParserRuleReturnScope {
        public String element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "identifierRule"
    // JavaP.g:372:1: identifierRule returns [String element] : id= Identifier ;
    public final Java_JavaP.identifierRule_return identifierRule() throws RecognitionException {
        Java_JavaP.identifierRule_return retval = new Java_JavaP.identifierRule_return();
        retval.start = input.LT(1);
        int identifierRule_StartIndex = input.index();
        Object root_0 = null;

        Token id=null;

        Object id_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 1) ) { return retval; }
            // JavaP.g:373:5: (id= Identifier )
            // JavaP.g:373:7: id= Identifier
            {
            root_0 = (Object)adaptor.nil();

            id=(Token)match(input,Identifier,FOLLOW_Identifier_in_identifierRule96); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            id_tree = (Object)adaptor.create(id);
            adaptor.addChild(root_0, id_tree);
            }
            if ( state.backtracking==0 ) {
              retval.element = (id!=null?id.getText():null);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 1, identifierRule_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "identifierRule"

    public static class compilationUnit_return extends ParserRuleReturnScope {
        public Document element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "compilationUnit"
    // JavaP.g:376:1: compilationUnit returns [Document element] : ( annotations (np= packageDeclaration (imp= importDeclaration )* (typech= typeDeclaration )* | cd= classOrInterfaceDeclaration (typech= typeDeclaration )* ) | (np= packageDeclaration )? (imp= importDeclaration )* (typech= typeDeclaration )* );
    public final Java_JavaP.compilationUnit_return compilationUnit() throws RecognitionException {
        Java_JavaP.compilationUnit_return retval = new Java_JavaP.compilationUnit_return();
        retval.start = input.LT(1);
        int compilationUnit_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.packageDeclaration_return np = null;

        Java_JavaP.importDeclaration_return imp = null;

        Java_JavaP.typeDeclaration_return typech = null;

        Java_JavaP.classOrInterfaceDeclaration_return cd = null;

        Java_JavaP.annotations_return annotations1 = null;




        NamespaceDeclaration npp = null;
        retval.element = getDocument();

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 2) ) { return retval; }
            // JavaP.g:381:5: ( annotations (np= packageDeclaration (imp= importDeclaration )* (typech= typeDeclaration )* | cd= classOrInterfaceDeclaration (typech= typeDeclaration )* ) | (np= packageDeclaration )? (imp= importDeclaration )* (typech= typeDeclaration )* )
            int alt8=2;
            alt8 = dfa8.predict(input);
            switch (alt8) {
                case 1 :
                    // JavaP.g:381:10: annotations (np= packageDeclaration (imp= importDeclaration )* (typech= typeDeclaration )* | cd= classOrInterfaceDeclaration (typech= typeDeclaration )* )
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_annotations_in_compilationUnit126);
                    annotations1=annotations();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotations1.getTree());
                    // JavaP.g:382:9: (np= packageDeclaration (imp= importDeclaration )* (typech= typeDeclaration )* | cd= classOrInterfaceDeclaration (typech= typeDeclaration )* )
                    int alt4=2;
                    int LA4_0 = input.LA(1);

                    if ( (LA4_0==47) ) {
                        alt4=1;
                    }
                    else if ( (LA4_0==ENUM||LA4_0==50||(LA4_0>=53 && LA4_0<=59)||LA4_0==68||LA4_0==97) ) {
                        alt4=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 4, 0, input);

                        throw nvae;
                    }
                    switch (alt4) {
                        case 1 :
                            // JavaP.g:382:13: np= packageDeclaration (imp= importDeclaration )* (typech= typeDeclaration )*
                            {
                            pushFollow(FOLLOW_packageDeclaration_in_compilationUnit142);
                            np=packageDeclaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, np.getTree());
                            if ( state.backtracking==0 ) {
                              npp=np.element;
                                               retval.element.add(npp);
                                              
                            }
                            // JavaP.g:386:13: (imp= importDeclaration )*
                            loop1:
                            do {
                                int alt1=2;
                                int LA1_0 = input.LA(1);

                                if ( (LA1_0==49) ) {
                                    alt1=1;
                                }


                                switch (alt1) {
                            	case 1 :
                            	    // JavaP.g:386:14: imp= importDeclaration
                            	    {
                            	    pushFollow(FOLLOW_importDeclaration_in_compilationUnit177);
                            	    imp=importDeclaration();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, imp.getTree());
                            	    if ( state.backtracking==0 ) {
                            	      npp.addImport(imp.element);
                            	    }

                            	    }
                            	    break;

                            	default :
                            	    break loop1;
                                }
                            } while (true);

                            // JavaP.g:387:13: (typech= typeDeclaration )*
                            loop2:
                            do {
                                int alt2=2;
                                int LA2_0 = input.LA(1);

                                if ( (LA2_0==ENUM||LA2_0==48||LA2_0==50||(LA2_0>=53 && LA2_0<=59)||LA2_0==68||LA2_0==97) ) {
                                    alt2=1;
                                }


                                switch (alt2) {
                            	case 1 :
                            	    // JavaP.g:387:14: typech= typeDeclaration
                            	    {
                            	    pushFollow(FOLLOW_typeDeclaration_in_compilationUnit197);
                            	    typech=typeDeclaration();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, typech.getTree());
                            	    if ( state.backtracking==0 ) {
                            	      processType(npp,typech.element);
                            	                      
                            	    }

                            	    }
                            	    break;

                            	default :
                            	    break loop2;
                                }
                            } while (true);


                            }
                            break;
                        case 2 :
                            // JavaP.g:391:13: cd= classOrInterfaceDeclaration (typech= typeDeclaration )*
                            {
                            pushFollow(FOLLOW_classOrInterfaceDeclaration_in_compilationUnit246);
                            cd=classOrInterfaceDeclaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, cd.getTree());
                            if ( state.backtracking==0 ) {
                              npp = createNamespaceDeclaration();
                                              retval.element.add(npp);
                                              processType(npp,cd.element);
                                             
                            }
                            // JavaP.g:396:13: (typech= typeDeclaration )*
                            loop3:
                            do {
                                int alt3=2;
                                int LA3_0 = input.LA(1);

                                if ( (LA3_0==ENUM||LA3_0==48||LA3_0==50||(LA3_0>=53 && LA3_0<=59)||LA3_0==68||LA3_0==97) ) {
                                    alt3=1;
                                }


                                switch (alt3) {
                            	case 1 :
                            	    // JavaP.g:396:14: typech= typeDeclaration
                            	    {
                            	    pushFollow(FOLLOW_typeDeclaration_in_compilationUnit280);
                            	    typech=typeDeclaration();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, typech.getTree());
                            	    if ( state.backtracking==0 ) {
                            	      processType(npp,typech.element);
                            	                     
                            	    }

                            	    }
                            	    break;

                            	default :
                            	    break loop3;
                                }
                            } while (true);


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // JavaP.g:401:9: (np= packageDeclaration )? (imp= importDeclaration )* (typech= typeDeclaration )*
                    {
                    root_0 = (Object)adaptor.nil();

                    // JavaP.g:401:9: (np= packageDeclaration )?
                    int alt5=2;
                    int LA5_0 = input.LA(1);

                    if ( (LA5_0==47) ) {
                        alt5=1;
                    }
                    switch (alt5) {
                        case 1 :
                            // JavaP.g:401:10: np= packageDeclaration
                            {
                            pushFollow(FOLLOW_packageDeclaration_in_compilationUnit335);
                            np=packageDeclaration();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, np.getTree());
                            if ( state.backtracking==0 ) {

                                            npp=np.element;
                                          
                            }

                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {

                               if(npp == null) {
                                 npp = createNamespaceDeclaration();
                               }
                               retval.element.add(npp);
                              
                    }
                    // JavaP.g:412:9: (imp= importDeclaration )*
                    loop6:
                    do {
                        int alt6=2;
                        int LA6_0 = input.LA(1);

                        if ( (LA6_0==49) ) {
                            alt6=1;
                        }


                        switch (alt6) {
                    	case 1 :
                    	    // JavaP.g:412:10: imp= importDeclaration
                    	    {
                    	    pushFollow(FOLLOW_importDeclaration_in_compilationUnit384);
                    	    imp=importDeclaration();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, imp.getTree());
                    	    if ( state.backtracking==0 ) {
                    	      npp.addImport(imp.element);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop6;
                        }
                    } while (true);

                    // JavaP.g:413:9: (typech= typeDeclaration )*
                    loop7:
                    do {
                        int alt7=2;
                        int LA7_0 = input.LA(1);

                        if ( (LA7_0==ENUM||LA7_0==48||LA7_0==50||(LA7_0>=53 && LA7_0<=59)||LA7_0==68||LA7_0==97) ) {
                            alt7=1;
                        }


                        switch (alt7) {
                    	case 1 :
                    	    // JavaP.g:413:10: typech= typeDeclaration
                    	    {
                    	    pushFollow(FOLLOW_typeDeclaration_in_compilationUnit402);
                    	    typech=typeDeclaration();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, typech.getTree());
                    	    if ( state.backtracking==0 ) {
                    	      processType(npp,typech.element);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop7;
                        }
                    } while (true);


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 2, compilationUnit_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "compilationUnit"

    public static class packageDeclaration_return extends ParserRuleReturnScope {
        public NamespaceDeclaration element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "packageDeclaration"
    // JavaP.g:416:1: packageDeclaration returns [NamespaceDeclaration element] : pkgkw= 'package' qn= qualifiedName ';' ;
    public final Java_JavaP.packageDeclaration_return packageDeclaration() throws RecognitionException {
        Java_JavaP.packageDeclaration_return retval = new Java_JavaP.packageDeclaration_return();
        retval.start = input.LT(1);
        int packageDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token pkgkw=null;
        Token char_literal2=null;
        Java_JavaP.qualifiedName_return qn = null;


        Object pkgkw_tree=null;
        Object char_literal2_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 3) ) { return retval; }
            // JavaP.g:417:5: (pkgkw= 'package' qn= qualifiedName ';' )
            // JavaP.g:417:9: pkgkw= 'package' qn= qualifiedName ';'
            {
            root_0 = (Object)adaptor.nil();

            pkgkw=(Token)match(input,47,FOLLOW_47_in_packageDeclaration432); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            pkgkw_tree = (Object)adaptor.create(pkgkw);
            adaptor.addChild(root_0, pkgkw_tree);
            }
            pushFollow(FOLLOW_qualifiedName_in_packageDeclaration436);
            qn=qualifiedName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, qn.getTree());
            char_literal2=(Token)match(input,48,FOLLOW_48_in_packageDeclaration438); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal2_tree = (Object)adaptor.create(char_literal2);
            adaptor.addChild(root_0, char_literal2_tree);
            }
            if ( state.backtracking==0 ) {

                         retval.element = createNamespaceDeclaration((qn!=null?input.toString(qn.start,qn.stop):null));
                         setKeyword(retval.element,pkgkw);
                      
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 3, packageDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "packageDeclaration"

    public static class importDeclaration_return extends ParserRuleReturnScope {
        public Import element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "importDeclaration"
    // JavaP.g:424:1: importDeclaration returns [Import element] : im= 'import' (st= 'static' )? qn= qualifiedName ( '.' '*' )? ';' ;
    public final Java_JavaP.importDeclaration_return importDeclaration() throws RecognitionException {
        Java_JavaP.importDeclaration_return retval = new Java_JavaP.importDeclaration_return();
        retval.start = input.LT(1);
        int importDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token im=null;
        Token st=null;
        Token char_literal3=null;
        Token char_literal4=null;
        Token char_literal5=null;
        Java_JavaP.qualifiedName_return qn = null;


        Object im_tree=null;
        Object st_tree=null;
        Object char_literal3_tree=null;
        Object char_literal4_tree=null;
        Object char_literal5_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 4) ) { return retval; }
            // JavaP.g:425:5: (im= 'import' (st= 'static' )? qn= qualifiedName ( '.' '*' )? ';' )
            // JavaP.g:425:9: im= 'import' (st= 'static' )? qn= qualifiedName ( '.' '*' )? ';'
            {
            root_0 = (Object)adaptor.nil();

            im=(Token)match(input,49,FOLLOW_49_in_importDeclaration474); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            im_tree = (Object)adaptor.create(im);
            adaptor.addChild(root_0, im_tree);
            }
            // JavaP.g:425:23: (st= 'static' )?
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==50) ) {
                alt9=1;
            }
            switch (alt9) {
                case 1 :
                    // JavaP.g:0:0: st= 'static'
                    {
                    st=(Token)match(input,50,FOLLOW_50_in_importDeclaration478); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    st_tree = (Object)adaptor.create(st);
                    adaptor.addChild(root_0, st_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_qualifiedName_in_importDeclaration483);
            qn=qualifiedName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, qn.getTree());
            if ( state.backtracking==0 ) {
              if(st == null) {
                         retval.element = new TypeImport(typeRef((qn!=null?input.toString(qn.start,qn.stop):null)));
                         setKeyword(retval.element,im);
                       } else {
                         retval.element = new SingleStaticImport(typeRef(Util.getAllButLastPart((qn!=null?input.toString(qn.start,qn.stop):null))),Util.getLastPart((qn!=null?input.toString(qn.start,qn.stop):null)));
                         setKeyword(retval.element,im);
                       }
                      
            }
            // JavaP.g:434:10: ( '.' '*' )?
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==51) ) {
                alt10=1;
            }
            switch (alt10) {
                case 1 :
                    // JavaP.g:434:11: '.' '*'
                    {
                    char_literal3=(Token)match(input,51,FOLLOW_51_in_importDeclaration505); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal3_tree = (Object)adaptor.create(char_literal3);
                    adaptor.addChild(root_0, char_literal3_tree);
                    }
                    char_literal4=(Token)match(input,52,FOLLOW_52_in_importDeclaration507); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal4_tree = (Object)adaptor.create(char_literal4);
                    adaptor.addChild(root_0, char_literal4_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element.removeAllMetadata();
                                   if(st == null) {
                                     retval.element = new JavaDemandImport(new NameReference((qn!=null?input.toString(qn.start,qn.stop):null),DeclarationContainer.class));
                                     setKeyword(retval.element,im);
                                   } else {
                                     retval.element = new StaticDemandImport(new NameReference((qn!=null?input.toString(qn.start,qn.stop):null),DeclarationContainer.class));
                                     setKeyword(retval.element,im);
                                   }
                                  
                    }

                    }
                    break;

            }

            char_literal5=(Token)match(input,48,FOLLOW_48_in_importDeclaration535); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal5_tree = (Object)adaptor.create(char_literal5);
            adaptor.addChild(root_0, char_literal5_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 4, importDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "importDeclaration"

    public static class typeDeclaration_return extends ParserRuleReturnScope {
        public Type element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeDeclaration"
    // JavaP.g:448:1: typeDeclaration returns [Type element] : (cd= classOrInterfaceDeclaration | ';' );
    public final Java_JavaP.typeDeclaration_return typeDeclaration() throws RecognitionException {
        Java_JavaP.typeDeclaration_return retval = new Java_JavaP.typeDeclaration_return();
        retval.start = input.LT(1);
        int typeDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal6=null;
        Java_JavaP.classOrInterfaceDeclaration_return cd = null;


        Object char_literal6_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 5) ) { return retval; }
            // JavaP.g:449:5: (cd= classOrInterfaceDeclaration | ';' )
            int alt11=2;
            int LA11_0 = input.LA(1);

            if ( (LA11_0==ENUM||LA11_0==50||(LA11_0>=53 && LA11_0<=59)||LA11_0==68||LA11_0==97) ) {
                alt11=1;
            }
            else if ( (LA11_0==48) ) {
                alt11=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 11, 0, input);

                throw nvae;
            }
            switch (alt11) {
                case 1 :
                    // JavaP.g:449:9: cd= classOrInterfaceDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_classOrInterfaceDeclaration_in_typeDeclaration561);
                    cd=classOrInterfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = cd.element;
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:450:9: ';'
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal6=(Token)match(input,48,FOLLOW_48_in_typeDeclaration573); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal6_tree = (Object)adaptor.create(char_literal6);
                    adaptor.addChild(root_0, char_literal6_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 5, typeDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeDeclaration"

    public static class classOrInterfaceDeclaration_return extends ParserRuleReturnScope {
        public Type element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classOrInterfaceDeclaration"
    // JavaP.g:456:1: classOrInterfaceDeclaration returns [Type element] : mods= classOrInterfaceModifiers (cd= classDeclaration | id= interfaceDeclaration ) ;
    public final Java_JavaP.classOrInterfaceDeclaration_return classOrInterfaceDeclaration() throws RecognitionException {
        Java_JavaP.classOrInterfaceDeclaration_return retval = new Java_JavaP.classOrInterfaceDeclaration_return();
        retval.start = input.LT(1);
        int classOrInterfaceDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.classOrInterfaceModifiers_return mods = null;

        Java_JavaP.classDeclaration_return cd = null;

        Java_JavaP.interfaceDeclaration_return id = null;



        Token start = null;
              Token end = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 6) ) { return retval; }
            // JavaP.g:463:5: (mods= classOrInterfaceModifiers (cd= classDeclaration | id= interfaceDeclaration ) )
            // JavaP.g:463:9: mods= classOrInterfaceModifiers (cd= classDeclaration | id= interfaceDeclaration )
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_classOrInterfaceModifiers_in_classOrInterfaceDeclaration609);
            mods=classOrInterfaceModifiers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mods.getTree());
            if ( state.backtracking==0 ) {
              if(mods != null) {start=mods.start;}
            }
            // JavaP.g:465:10: (cd= classDeclaration | id= interfaceDeclaration )
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( (LA12_0==ENUM||LA12_0==59) ) {
                alt12=1;
            }
            else if ( (LA12_0==68||LA12_0==97) ) {
                alt12=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 12, 0, input);

                throw nvae;
            }
            switch (alt12) {
                case 1 :
                    // JavaP.g:465:11: cd= classDeclaration
                    {
                    pushFollow(FOLLOW_classDeclaration_in_classOrInterfaceDeclaration641);
                    cd=classDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element=cd.element; end = cd.stop; if(mods == null) {start=cd.start;}
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:467:13: id= interfaceDeclaration
                    {
                    pushFollow(FOLLOW_interfaceDeclaration_in_classOrInterfaceDeclaration675);
                    id=interfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, id.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element=id.element; end=id.stop; if(mods == null) {start=id.start;}
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              if(retval.element != null) {
                         for(Modifier mod:mods.element) {
                           retval.element.addModifier(mod);
                         }
                       }
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                check_null(retval.element);
                setLocation(retval.element, start, end);

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 6, classOrInterfaceDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classOrInterfaceDeclaration"

    public static class classOrInterfaceModifiers_return extends ParserRuleReturnScope {
        public List<Modifier> element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classOrInterfaceModifiers"
    // JavaP.g:476:1: classOrInterfaceModifiers returns [List<Modifier> element] : (mod= classOrInterfaceModifier )* ;
    public final Java_JavaP.classOrInterfaceModifiers_return classOrInterfaceModifiers() throws RecognitionException {
        Java_JavaP.classOrInterfaceModifiers_return retval = new Java_JavaP.classOrInterfaceModifiers_return();
        retval.start = input.LT(1);
        int classOrInterfaceModifiers_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.classOrInterfaceModifier_return mod = null;



        retval.element = new ArrayList<Modifier>();
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 7) ) { return retval; }
            // JavaP.g:478:5: ( (mod= classOrInterfaceModifier )* )
            // JavaP.g:478:9: (mod= classOrInterfaceModifier )*
            {
            root_0 = (Object)adaptor.nil();

            // JavaP.g:478:9: (mod= classOrInterfaceModifier )*
            loop13:
            do {
                int alt13=2;
                int LA13_0 = input.LA(1);

                if ( (LA13_0==97) ) {
                    int LA13_2 = input.LA(2);

                    if ( (LA13_2==Identifier) ) {
                        alt13=1;
                    }


                }
                else if ( (LA13_0==50||(LA13_0>=53 && LA13_0<=58)) ) {
                    alt13=1;
                }


                switch (alt13) {
            	case 1 :
            	    // JavaP.g:478:10: mod= classOrInterfaceModifier
            	    {
            	    pushFollow(FOLLOW_classOrInterfaceModifier_in_classOrInterfaceModifiers735);
            	    mod=classOrInterfaceModifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mod.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.element.add(mod.element);
            	    }

            	    }
            	    break;

            	default :
            	    break loop13;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 7, classOrInterfaceModifiers_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classOrInterfaceModifiers"

    public static class classOrInterfaceModifier_return extends ParserRuleReturnScope {
        public Modifier element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classOrInterfaceModifier"
    // JavaP.g:481:1: classOrInterfaceModifier returns [Modifier element] : (a= annotation | 'public' | 'protected' | 'private' | 'abstract' | 'static' | 'final' | 'strictfp' );
    public final Java_JavaP.classOrInterfaceModifier_return classOrInterfaceModifier() throws RecognitionException {
        Java_JavaP.classOrInterfaceModifier_return retval = new Java_JavaP.classOrInterfaceModifier_return();
        retval.start = input.LT(1);
        int classOrInterfaceModifier_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal7=null;
        Token string_literal8=null;
        Token string_literal9=null;
        Token string_literal10=null;
        Token string_literal11=null;
        Token string_literal12=null;
        Token string_literal13=null;
        Java_JavaP.annotation_return a = null;


        Object string_literal7_tree=null;
        Object string_literal8_tree=null;
        Object string_literal9_tree=null;
        Object string_literal10_tree=null;
        Object string_literal11_tree=null;
        Object string_literal12_tree=null;
        Object string_literal13_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 8) ) { return retval; }
            // JavaP.g:483:5: (a= annotation | 'public' | 'protected' | 'private' | 'abstract' | 'static' | 'final' | 'strictfp' )
            int alt14=8;
            switch ( input.LA(1) ) {
            case 97:
                {
                alt14=1;
                }
                break;
            case 53:
                {
                alt14=2;
                }
                break;
            case 54:
                {
                alt14=3;
                }
                break;
            case 55:
                {
                alt14=4;
                }
                break;
            case 56:
                {
                alt14=5;
                }
                break;
            case 50:
                {
                alt14=6;
                }
                break;
            case 57:
                {
                alt14=7;
                }
                break;
            case 58:
                {
                alt14=8;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 14, 0, input);

                throw nvae;
            }

            switch (alt14) {
                case 1 :
                    // JavaP.g:483:9: a= annotation
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_annotation_in_classOrInterfaceModifier767);
                    a=annotation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = a.element;
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:484:9: 'public'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal7=(Token)match(input,53,FOLLOW_53_in_classOrInterfaceModifier781); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal7_tree = (Object)adaptor.create(string_literal7);
                    adaptor.addChild(root_0, string_literal7_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new Public();
                    }

                    }
                    break;
                case 3 :
                    // JavaP.g:485:9: 'protected'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal8=(Token)match(input,54,FOLLOW_54_in_classOrInterfaceModifier797); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal8_tree = (Object)adaptor.create(string_literal8);
                    adaptor.addChild(root_0, string_literal8_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new Protected();
                    }

                    }
                    break;
                case 4 :
                    // JavaP.g:486:9: 'private'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal9=(Token)match(input,55,FOLLOW_55_in_classOrInterfaceModifier810); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal9_tree = (Object)adaptor.create(string_literal9);
                    adaptor.addChild(root_0, string_literal9_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new Private();
                    }

                    }
                    break;
                case 5 :
                    // JavaP.g:487:9: 'abstract'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal10=(Token)match(input,56,FOLLOW_56_in_classOrInterfaceModifier825); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal10_tree = (Object)adaptor.create(string_literal10);
                    adaptor.addChild(root_0, string_literal10_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new Abstract();
                    }

                    }
                    break;
                case 6 :
                    // JavaP.g:488:9: 'static'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal11=(Token)match(input,50,FOLLOW_50_in_classOrInterfaceModifier839); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal11_tree = (Object)adaptor.create(string_literal11);
                    adaptor.addChild(root_0, string_literal11_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new Static();
                    }

                    }
                    break;
                case 7 :
                    // JavaP.g:489:9: 'final'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal12=(Token)match(input,57,FOLLOW_57_in_classOrInterfaceModifier855); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal12_tree = (Object)adaptor.create(string_literal12);
                    adaptor.addChild(root_0, string_literal12_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new Final();
                    }

                    }
                    break;
                case 8 :
                    // JavaP.g:490:9: 'strictfp'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal13=(Token)match(input,58,FOLLOW_58_in_classOrInterfaceModifier872); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal13_tree = (Object)adaptor.create(string_literal13);
                    adaptor.addChild(root_0, string_literal13_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new StrictFP();
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              setLocation(retval.element, (CommonToken)retval.start, (CommonToken)retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 8, classOrInterfaceModifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classOrInterfaceModifier"

    public static class modifiers_return extends ParserRuleReturnScope {
        public List<Modifier> element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "modifiers"
    // JavaP.g:493:1: modifiers returns [List<Modifier> element] : (mod= modifier )* ;
    public final Java_JavaP.modifiers_return modifiers() throws RecognitionException {
        Java_JavaP.modifiers_return retval = new Java_JavaP.modifiers_return();
        retval.start = input.LT(1);
        int modifiers_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.modifier_return mod = null;



        retval.element = new ArrayList<Modifier>();
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 9) ) { return retval; }
            // JavaP.g:495:5: ( (mod= modifier )* )
            // JavaP.g:495:9: (mod= modifier )*
            {
            root_0 = (Object)adaptor.nil();

            // JavaP.g:495:9: (mod= modifier )*
            loop15:
            do {
                int alt15=2;
                int LA15_0 = input.LA(1);

                if ( (LA15_0==97) ) {
                    int LA15_2 = input.LA(2);

                    if ( (LA15_2==Identifier) ) {
                        alt15=1;
                    }


                }
                else if ( (LA15_0==50||(LA15_0>=53 && LA15_0<=58)||(LA15_0>=74 && LA15_0<=78)) ) {
                    alt15=1;
                }


                switch (alt15) {
            	case 1 :
            	    // JavaP.g:495:10: mod= modifier
            	    {
            	    pushFollow(FOLLOW_modifier_in_modifiers907);
            	    mod=modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mod.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.element.add(mod.element);
            	    }

            	    }
            	    break;

            	default :
            	    break loop15;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 9, modifiers_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "modifiers"

    public static class classDeclaration_return extends ParserRuleReturnScope {
        public Type element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classDeclaration"
    // JavaP.g:498:1: classDeclaration returns [Type element] : (cd= normalClassDeclaration | ed= enumDeclaration );
    public final Java_JavaP.classDeclaration_return classDeclaration() throws RecognitionException {
        Java_JavaP.classDeclaration_return retval = new Java_JavaP.classDeclaration_return();
        retval.start = input.LT(1);
        int classDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.normalClassDeclaration_return cd = null;

        Java_JavaP.enumDeclaration_return ed = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 10) ) { return retval; }
            // JavaP.g:500:5: (cd= normalClassDeclaration | ed= enumDeclaration )
            int alt16=2;
            int LA16_0 = input.LA(1);

            if ( (LA16_0==59) ) {
                alt16=1;
            }
            else if ( (LA16_0==ENUM) ) {
                alt16=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 16, 0, input);

                throw nvae;
            }
            switch (alt16) {
                case 1 :
                    // JavaP.g:500:9: cd= normalClassDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_normalClassDeclaration_in_classDeclaration939);
                    cd=normalClassDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd.getTree());
                    if ( state.backtracking==0 ) {
                       retval.element = cd.element;
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:501:9: ed= enumDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_enumDeclaration_in_classDeclaration953);
                    ed=enumDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ed.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = ed.element;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              check_null(retval.element);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 10, classDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classDeclaration"

    public static class normalClassDeclaration_return extends ParserRuleReturnScope {
        public RegularType element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "normalClassDeclaration"
    // JavaP.g:504:1: normalClassDeclaration returns [RegularType element] : clkw= 'class' t= nameAndParams (extkw= 'extends' sc= type )? (impkw= 'implements' trefs= typeList )? body= classBody ;
    public final Java_JavaP.normalClassDeclaration_return normalClassDeclaration() throws RecognitionException {
        Java_JavaP.normalClassDeclaration_return retval = new Java_JavaP.normalClassDeclaration_return();
        retval.start = input.LT(1);
        int normalClassDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token clkw=null;
        Token extkw=null;
        Token impkw=null;
        Java_JavaP.nameAndParams_return t = null;

        Java_JavaP.type_return sc = null;

        Java_JavaP.typeList_return trefs = null;

        Java_JavaP.classBody_return body = null;


        Object clkw_tree=null;
        Object extkw_tree=null;
        Object impkw_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 11) ) { return retval; }
            // JavaP.g:505:5: (clkw= 'class' t= nameAndParams (extkw= 'extends' sc= type )? (impkw= 'implements' trefs= typeList )? body= classBody )
            // JavaP.g:505:9: clkw= 'class' t= nameAndParams (extkw= 'extends' sc= type )? (impkw= 'implements' trefs= typeList )? body= classBody
            {
            root_0 = (Object)adaptor.nil();

            clkw=(Token)match(input,59,FOLLOW_59_in_normalClassDeclaration980); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            clkw_tree = (Object)adaptor.create(clkw);
            adaptor.addChild(root_0, clkw_tree);
            }
            pushFollow(FOLLOW_nameAndParams_in_normalClassDeclaration984);
            t=nameAndParams();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, t.getTree());
            if ( state.backtracking==0 ) {
              retval.element=t.element;
            }
            // JavaP.g:506:9: (extkw= 'extends' sc= type )?
            int alt17=2;
            int LA17_0 = input.LA(1);

            if ( (LA17_0==60) ) {
                alt17=1;
            }
            switch (alt17) {
                case 1 :
                    // JavaP.g:506:10: extkw= 'extends' sc= type
                    {
                    extkw=(Token)match(input,60,FOLLOW_60_in_normalClassDeclaration999); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    extkw_tree = (Object)adaptor.create(extkw);
                    adaptor.addChild(root_0, extkw_tree);
                    }
                    pushFollow(FOLLOW_type_in_normalClassDeclaration1003);
                    sc=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sc.getTree());
                    if ( state.backtracking==0 ) {
                      SubtypeRelation extRelation = new SubtypeRelation(sc.element);
                                   retval.element.addInheritanceRelation(extRelation);
                                   setKeyword(extRelation,extkw);
                                  
                    }

                    }
                    break;

            }

            // JavaP.g:511:9: (impkw= 'implements' trefs= typeList )?
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==61) ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    // JavaP.g:511:10: impkw= 'implements' trefs= typeList
                    {
                    impkw=(Token)match(input,61,FOLLOW_61_in_normalClassDeclaration1032); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    impkw_tree = (Object)adaptor.create(impkw);
                    adaptor.addChild(root_0, impkw_tree);
                    }
                    pushFollow(FOLLOW_typeList_in_normalClassDeclaration1036);
                    trefs=typeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, trefs.getTree());
                    if ( state.backtracking==0 ) {
                      for(TypeReference ref: trefs.element) {
                                      SubtypeRelation rel = new SubtypeRelation(ref);
                                      retval.element.addInheritanceRelation(rel);
                                      rel.addModifier(new Implements());
                                      setKeyword(rel, impkw);
                                   }
                                  
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_classBody_in_normalClassDeclaration1065);
            body=classBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, body.getTree());
            if ( state.backtracking==0 ) {

                            if(body.element != null) {
                              retval.element.body().addAll(body.element.elements());
                            }
                           
            }
            if ( state.backtracking==0 ) {

                       setKeyword(retval.element,clkw);
                       // FIXME: the implements keyword should not be attached to the class, but there is only one.
                       setKeyword(retval.element,impkw);
                      
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 11, normalClassDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "normalClassDeclaration"

    public static class nameAndParams_return extends ParserRuleReturnScope {
        public RegularType element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nameAndParams"
    // JavaP.g:531:1: nameAndParams returns [RegularType element] : tt= createClassHereBecauseANTLRisAnnoying (params= typeParameters )? ;
    public final Java_JavaP.nameAndParams_return nameAndParams() throws RecognitionException {
        Java_JavaP.nameAndParams_return retval = new Java_JavaP.nameAndParams_return();
        retval.start = input.LT(1);
        int nameAndParams_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.createClassHereBecauseANTLRisAnnoying_return tt = null;

        Java_JavaP.typeParameters_return params = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 12) ) { return retval; }
            // JavaP.g:532:3: (tt= createClassHereBecauseANTLRisAnnoying (params= typeParameters )? )
            // JavaP.g:533:5: tt= createClassHereBecauseANTLRisAnnoying (params= typeParameters )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_createClassHereBecauseANTLRisAnnoying_in_nameAndParams1102);
            tt=createClassHereBecauseANTLRisAnnoying();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, tt.getTree());
            if ( state.backtracking==0 ) {
              retval.element=tt.element;
            }
            // JavaP.g:533:75: (params= typeParameters )?
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==62) ) {
                alt19=1;
            }
            switch (alt19) {
                case 1 :
                    // JavaP.g:533:76: params= typeParameters
                    {
                    pushFollow(FOLLOW_typeParameters_in_nameAndParams1109);
                    params=typeParameters();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, params.getTree());
                    if ( state.backtracking==0 ) {
                      for(FormalTypeParameter par: params.element){retval.element.addParameter(TypeParameter.class,par);}
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 12, nameAndParams_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nameAndParams"

    public static class createClassHereBecauseANTLRisAnnoying_return extends ParserRuleReturnScope {
        public RegularType element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createClassHereBecauseANTLRisAnnoying"
    // JavaP.g:536:1: createClassHereBecauseANTLRisAnnoying returns [RegularType element] : name= identifierRule ;
    public final Java_JavaP.createClassHereBecauseANTLRisAnnoying_return createClassHereBecauseANTLRisAnnoying() throws RecognitionException {
        Java_JavaP.createClassHereBecauseANTLRisAnnoying_return retval = new Java_JavaP.createClassHereBecauseANTLRisAnnoying_return();
        retval.start = input.LT(1);
        int createClassHereBecauseANTLRisAnnoying_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.identifierRule_return name = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 13) ) { return retval; }
            // JavaP.g:537:4: (name= identifierRule )
            // JavaP.g:537:7: name= identifierRule
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_identifierRule_in_createClassHereBecauseANTLRisAnnoying1133);
            name=identifierRule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name.getTree());
            if ( state.backtracking==0 ) {
              retval.element = createType((name!=null?input.toString(name.start,name.stop):null)); setName(retval.element,name.start);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 13, createClassHereBecauseANTLRisAnnoying_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "createClassHereBecauseANTLRisAnnoying"

    public static class typeParameters_return extends ParserRuleReturnScope {
        public List<FormalTypeParameter> element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeParameters"
    // JavaP.g:540:1: typeParameters returns [List<FormalTypeParameter> element] : '<' par= typeParameter ( ',' par= typeParameter )* '>' ;
    public final Java_JavaP.typeParameters_return typeParameters() throws RecognitionException {
        Java_JavaP.typeParameters_return retval = new Java_JavaP.typeParameters_return();
        retval.start = input.LT(1);
        int typeParameters_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal14=null;
        Token char_literal15=null;
        Token char_literal16=null;
        Java_JavaP.typeParameter_return par = null;


        Object char_literal14_tree=null;
        Object char_literal15_tree=null;
        Object char_literal16_tree=null;

        retval.element = new ArrayList<FormalTypeParameter>();
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 14) ) { return retval; }
            // JavaP.g:542:5: ( '<' par= typeParameter ( ',' par= typeParameter )* '>' )
            // JavaP.g:542:9: '<' par= typeParameter ( ',' par= typeParameter )* '>'
            {
            root_0 = (Object)adaptor.nil();

            char_literal14=(Token)match(input,62,FOLLOW_62_in_typeParameters1161); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal14_tree = (Object)adaptor.create(char_literal14);
            adaptor.addChild(root_0, char_literal14_tree);
            }
            pushFollow(FOLLOW_typeParameter_in_typeParameters1165);
            par=typeParameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, par.getTree());
            if ( state.backtracking==0 ) {
              retval.element.add(par.element);
            }
            // JavaP.g:542:65: ( ',' par= typeParameter )*
            loop20:
            do {
                int alt20=2;
                int LA20_0 = input.LA(1);

                if ( (LA20_0==63) ) {
                    alt20=1;
                }


                switch (alt20) {
            	case 1 :
            	    // JavaP.g:542:66: ',' par= typeParameter
            	    {
            	    char_literal15=(Token)match(input,63,FOLLOW_63_in_typeParameters1169); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal15_tree = (Object)adaptor.create(char_literal15);
            	    adaptor.addChild(root_0, char_literal15_tree);
            	    }
            	    pushFollow(FOLLOW_typeParameter_in_typeParameters1173);
            	    par=typeParameter();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, par.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.element.add(par.element);
            	    }

            	    }
            	    break;

            	default :
            	    break loop20;
                }
            } while (true);

            char_literal16=(Token)match(input,64,FOLLOW_64_in_typeParameters1178); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal16_tree = (Object)adaptor.create(char_literal16);
            adaptor.addChild(root_0, char_literal16_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 14, typeParameters_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeParameters"

    public static class typeParameter_return extends ParserRuleReturnScope {
        public FormalTypeParameter element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeParameter"
    // JavaP.g:545:1: typeParameter returns [FormalTypeParameter element] : name= identifierRule (extkw= 'extends' bound= typeBound )? ;
    public final Java_JavaP.typeParameter_return typeParameter() throws RecognitionException {
        Java_JavaP.typeParameter_return retval = new Java_JavaP.typeParameter_return();
        retval.start = input.LT(1);
        int typeParameter_StartIndex = input.index();
        Object root_0 = null;

        Token extkw=null;
        Java_JavaP.identifierRule_return name = null;

        Java_JavaP.typeBound_return bound = null;


        Object extkw_tree=null;


        Token stop = null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 15) ) { return retval; }
            // JavaP.g:549:5: (name= identifierRule (extkw= 'extends' bound= typeBound )? )
            // JavaP.g:549:9: name= identifierRule (extkw= 'extends' bound= typeBound )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_identifierRule_in_typeParameter1207);
            name=identifierRule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name.getTree());
            if ( state.backtracking==0 ) {
              retval.element = new FormalTypeParameter((name!=null?input.toString(name.start,name.stop):null)); stop=name.start;
            }
            // JavaP.g:549:101: (extkw= 'extends' bound= typeBound )?
            int alt21=2;
            int LA21_0 = input.LA(1);

            if ( (LA21_0==60) ) {
                alt21=1;
            }
            switch (alt21) {
                case 1 :
                    // JavaP.g:549:102: extkw= 'extends' bound= typeBound
                    {
                    extkw=(Token)match(input,60,FOLLOW_60_in_typeParameter1213); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    extkw_tree = (Object)adaptor.create(extkw);
                    adaptor.addChild(root_0, extkw_tree);
                    }
                    pushFollow(FOLLOW_typeBound_in_typeParameter1217);
                    bound=typeBound();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bound.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element.addConstraint(bound.element); stop=bound.stop;
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              setKeyword(retval.element,extkw);
                       setLocation(retval.element, name.start, stop);
                       setName(retval.element,name.start);
                      
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 15, typeParameter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeParameter"

    public static class typeBound_return extends ParserRuleReturnScope {
        public ExtendsConstraint element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeBound"
    // JavaP.g:556:1: typeBound returns [ExtendsConstraint element] : tp= type ( '&' tpp= type )* ;
    public final Java_JavaP.typeBound_return typeBound() throws RecognitionException {
        Java_JavaP.typeBound_return retval = new Java_JavaP.typeBound_return();
        retval.start = input.LT(1);
        int typeBound_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal17=null;
        Java_JavaP.type_return tp = null;

        Java_JavaP.type_return tpp = null;


        Object char_literal17_tree=null;

        retval.element = new ExtendsConstraint();
        JavaIntersectionTypeReference ref = null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 16) ) { return retval; }
            // JavaP.g:560:5: (tp= type ( '&' tpp= type )* )
            // JavaP.g:560:9: tp= type ( '&' tpp= type )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_type_in_typeBound1259);
            tp=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, tp.getTree());
            if ( state.backtracking==0 ) {
              retval.element.setTypeReference(tp.element);
            }
            // JavaP.g:562:10: ( '&' tpp= type )*
            loop22:
            do {
                int alt22=2;
                int LA22_0 = input.LA(1);

                if ( (LA22_0==65) ) {
                    alt22=1;
                }


                switch (alt22) {
            	case 1 :
            	    // JavaP.g:562:11: '&' tpp= type
            	    {
            	    char_literal17=(Token)match(input,65,FOLLOW_65_in_typeBound1282); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal17_tree = (Object)adaptor.create(char_literal17);
            	    adaptor.addChild(root_0, char_literal17_tree);
            	    }
            	    pushFollow(FOLLOW_type_in_typeBound1286);
            	    tpp=type();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, tpp.getTree());
            	    if ( state.backtracking==0 ) {

            	                 if(ref == null) {
            	                   ref = new JavaIntersectionTypeReference();
            	                   ref.add(retval.element.typeReference());
            	                   retval.element.setTypeReference(ref);
            	                 }
            	                 ref.add(tpp.element);
            	                
            	    }

            	    }
            	    break;

            	default :
            	    break loop22;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 16, typeBound_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeBound"

    protected static class enumDeclaration_scope {
        Type enumType;
    }
    protected Stack enumDeclaration_stack = new Stack();

    public static class enumDeclaration_return extends ParserRuleReturnScope {
        public RegularType element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumDeclaration"
    // JavaP.g:574:1: enumDeclaration returns [RegularType element] : ENUM name= identifierRule ( 'implements' trefs= typeList )? body= enumBody ;
    public final Java_JavaP.enumDeclaration_return enumDeclaration() throws RecognitionException {
        enumDeclaration_stack.push(new enumDeclaration_scope());
        Java_JavaP.enumDeclaration_return retval = new Java_JavaP.enumDeclaration_return();
        retval.start = input.LT(1);
        int enumDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token ENUM18=null;
        Token string_literal19=null;
        Java_JavaP.identifierRule_return name = null;

        Java_JavaP.typeList_return trefs = null;

        Java_JavaP.enumBody_return body = null;


        Object ENUM18_tree=null;
        Object string_literal19_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 17) ) { return retval; }
            // JavaP.g:578:5: ( ENUM name= identifierRule ( 'implements' trefs= typeList )? body= enumBody )
            // JavaP.g:578:9: ENUM name= identifierRule ( 'implements' trefs= typeList )? body= enumBody
            {
            root_0 = (Object)adaptor.nil();

            ENUM18=(Token)match(input,ENUM,FOLLOW_ENUM_in_enumDeclaration1336); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ENUM18_tree = (Object)adaptor.create(ENUM18);
            adaptor.addChild(root_0, ENUM18_tree);
            }
            pushFollow(FOLLOW_identifierRule_in_enumDeclaration1340);
            name=identifierRule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name.getTree());
            if ( state.backtracking==0 ) {
              retval.element = createEnum((name!=null?input.toString(name.start,name.stop):null));
                                            retval.element.addModifier(new Enum());
                                            ((enumDeclaration_scope)enumDeclaration_stack.peek()).enumType =retval.element;
                                            setName(retval.element,name.start);
            }
            // JavaP.g:582:19: ( 'implements' trefs= typeList )?
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==61) ) {
                alt23=1;
            }
            switch (alt23) {
                case 1 :
                    // JavaP.g:582:20: 'implements' trefs= typeList
                    {
                    string_literal19=(Token)match(input,61,FOLLOW_61_in_enumDeclaration1363); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal19_tree = (Object)adaptor.create(string_literal19);
                    adaptor.addChild(root_0, string_literal19_tree);
                    }
                    pushFollow(FOLLOW_typeList_in_enumDeclaration1367);
                    trefs=typeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, trefs.getTree());
                    if ( state.backtracking==0 ) {
                      for(TypeReference ref: trefs.element)
                                                     {
                                                      SubtypeRelation rel = new SubtypeRelation(ref);
                                                      retval.element.addInheritanceRelation(rel);
                                                      rel.addModifier(new Implements());
                                                      }
                                                
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_enumBody_in_enumDeclaration1439);
            body=enumBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, body.getTree());
            if ( state.backtracking==0 ) {
              retval.element.setBody(body.element);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 17, enumDeclaration_StartIndex); }
            enumDeclaration_stack.pop();
        }
        return retval;
    }
    // $ANTLR end "enumDeclaration"

    public static class enumBody_return extends ParserRuleReturnScope {
        public ClassBody element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumBody"
    // JavaP.g:595:1: enumBody returns [ClassBody element] : '{' (csts= enumConstants )? ( ',' )? (decls= enumBodyDeclarations )? '}' ;
    public final Java_JavaP.enumBody_return enumBody() throws RecognitionException {
        Java_JavaP.enumBody_return retval = new Java_JavaP.enumBody_return();
        retval.start = input.LT(1);
        int enumBody_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal20=null;
        Token char_literal21=null;
        Token char_literal22=null;
        Java_JavaP.enumConstants_return csts = null;

        Java_JavaP.enumBodyDeclarations_return decls = null;


        Object char_literal20_tree=null;
        Object char_literal21_tree=null;
        Object char_literal22_tree=null;

        retval.element = new ClassBody();
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 18) ) { return retval; }
            // JavaP.g:597:5: ( '{' (csts= enumConstants )? ( ',' )? (decls= enumBodyDeclarations )? '}' )
            // JavaP.g:597:9: '{' (csts= enumConstants )? ( ',' )? (decls= enumBodyDeclarations )? '}'
            {
            root_0 = (Object)adaptor.nil();

            char_literal20=(Token)match(input,66,FOLLOW_66_in_enumBody1469); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal20_tree = (Object)adaptor.create(char_literal20);
            adaptor.addChild(root_0, char_literal20_tree);
            }
            // JavaP.g:597:13: (csts= enumConstants )?
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==Identifier||LA24_0==97) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    // JavaP.g:597:14: csts= enumConstants
                    {
                    pushFollow(FOLLOW_enumConstants_in_enumBody1474);
                    csts=enumConstants();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, csts.getTree());
                    if ( state.backtracking==0 ) {

                                   for(EnumConstant el: csts.element) {
                                      retval.element.add(el);
                                   }
                                  
                    }

                    }
                    break;

            }

            // JavaP.g:602:17: ( ',' )?
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==63) ) {
                alt25=1;
            }
            switch (alt25) {
                case 1 :
                    // JavaP.g:0:0: ','
                    {
                    char_literal21=(Token)match(input,63,FOLLOW_63_in_enumBody1492); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal21_tree = (Object)adaptor.create(char_literal21);
                    adaptor.addChild(root_0, char_literal21_tree);
                    }

                    }
                    break;

            }

            // JavaP.g:602:22: (decls= enumBodyDeclarations )?
            int alt26=2;
            int LA26_0 = input.LA(1);

            if ( (LA26_0==48) ) {
                alt26=1;
            }
            switch (alt26) {
                case 1 :
                    // JavaP.g:602:23: decls= enumBodyDeclarations
                    {
                    pushFollow(FOLLOW_enumBodyDeclarations_in_enumBody1498);
                    decls=enumBodyDeclarations();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, decls.getTree());
                    if ( state.backtracking==0 ) {
                      for(TypeElement el: decls.element){retval.element.add(el);}
                    }

                    }
                    break;

            }

            char_literal22=(Token)match(input,67,FOLLOW_67_in_enumBody1504); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal22_tree = (Object)adaptor.create(char_literal22);
            adaptor.addChild(root_0, char_literal22_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 18, enumBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumBody"

    public static class enumConstants_return extends ParserRuleReturnScope {
        public List<EnumConstant> element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumConstants"
    // JavaP.g:605:1: enumConstants returns [List<EnumConstant> element] : ct= enumConstant ( ',' cst= enumConstant )* ;
    public final Java_JavaP.enumConstants_return enumConstants() throws RecognitionException {
        Java_JavaP.enumConstants_return retval = new Java_JavaP.enumConstants_return();
        retval.start = input.LT(1);
        int enumConstants_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal23=null;
        Java_JavaP.enumConstant_return ct = null;

        Java_JavaP.enumConstant_return cst = null;


        Object char_literal23_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 19) ) { return retval; }
            // JavaP.g:606:5: (ct= enumConstant ( ',' cst= enumConstant )* )
            // JavaP.g:606:9: ct= enumConstant ( ',' cst= enumConstant )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_enumConstant_in_enumConstants1529);
            ct=enumConstant();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ct.getTree());
            if ( state.backtracking==0 ) {
              retval.element = new ArrayList<EnumConstant>(); retval.element.add(ct.element);
            }
            // JavaP.g:606:107: ( ',' cst= enumConstant )*
            loop27:
            do {
                int alt27=2;
                int LA27_0 = input.LA(1);

                if ( (LA27_0==63) ) {
                    int LA27_1 = input.LA(2);

                    if ( (LA27_1==Identifier||LA27_1==97) ) {
                        alt27=1;
                    }


                }


                switch (alt27) {
            	case 1 :
            	    // JavaP.g:606:108: ',' cst= enumConstant
            	    {
            	    char_literal23=(Token)match(input,63,FOLLOW_63_in_enumConstants1534); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal23_tree = (Object)adaptor.create(char_literal23);
            	    adaptor.addChild(root_0, char_literal23_tree);
            	    }
            	    pushFollow(FOLLOW_enumConstant_in_enumConstants1538);
            	    cst=enumConstant();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cst.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.element.add(cst.element);
            	    }

            	    }
            	    break;

            	default :
            	    break loop27;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 19, enumConstants_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumConstants"

    public static class enumConstant_return extends ParserRuleReturnScope {
        public EnumConstant element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumConstant"
    // JavaP.g:609:1: enumConstant returns [EnumConstant element] : ( annotations )? name= identifierRule (args= arguments )? (body= classBody )? ;
    public final Java_JavaP.enumConstant_return enumConstant() throws RecognitionException {
        Java_JavaP.enumConstant_return retval = new Java_JavaP.enumConstant_return();
        retval.start = input.LT(1);
        int enumConstant_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.identifierRule_return name = null;

        Java_JavaP.arguments_return args = null;

        Java_JavaP.classBody_return body = null;

        Java_JavaP.annotations_return annotations24 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 20) ) { return retval; }
            // JavaP.g:610:5: ( ( annotations )? name= identifierRule (args= arguments )? (body= classBody )? )
            // JavaP.g:610:9: ( annotations )? name= identifierRule (args= arguments )? (body= classBody )?
            {
            root_0 = (Object)adaptor.nil();

            // JavaP.g:610:9: ( annotations )?
            int alt28=2;
            int LA28_0 = input.LA(1);

            if ( (LA28_0==97) ) {
                alt28=1;
            }
            switch (alt28) {
                case 1 :
                    // JavaP.g:0:0: annotations
                    {
                    pushFollow(FOLLOW_annotations_in_enumConstant1564);
                    annotations24=annotations();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotations24.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_identifierRule_in_enumConstant1569);
            name=identifierRule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name.getTree());
            if ( state.backtracking==0 ) {
              retval.element = new EnumConstant((name!=null?input.toString(name.start,name.stop):null));
            }
            // JavaP.g:610:91: (args= arguments )?
            int alt29=2;
            int LA29_0 = input.LA(1);

            if ( (LA29_0==90) ) {
                alt29=1;
            }
            switch (alt29) {
                case 1 :
                    // JavaP.g:610:92: args= arguments
                    {
                    pushFollow(FOLLOW_arguments_in_enumConstant1576);
                    args=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, args.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element.addAllParameters(args.element);
                    }

                    }
                    break;

            }

            // JavaP.g:610:158: (body= classBody )?
            int alt30=2;
            int LA30_0 = input.LA(1);

            if ( (LA30_0==66) ) {
                alt30=1;
            }
            switch (alt30) {
                case 1 :
                    // JavaP.g:610:159: body= classBody
                    {
                    pushFollow(FOLLOW_classBody_in_enumConstant1585);
                    body=classBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, body.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element.setBody(body.element);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 20, enumConstant_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumConstant"

    public static class enumBodyDeclarations_return extends ParserRuleReturnScope {
        public List<TypeElement> element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumBodyDeclarations"
    // JavaP.g:613:1: enumBodyDeclarations returns [List<TypeElement> element] : ';' (decl= classBodyDeclaration )* ;
    public final Java_JavaP.enumBodyDeclarations_return enumBodyDeclarations() throws RecognitionException {
        Java_JavaP.enumBodyDeclarations_return retval = new Java_JavaP.enumBodyDeclarations_return();
        retval.start = input.LT(1);
        int enumBodyDeclarations_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal25=null;
        Java_JavaP.classBodyDeclaration_return decl = null;


        Object char_literal25_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 21) ) { return retval; }
            // JavaP.g:614:5: ( ';' (decl= classBodyDeclaration )* )
            // JavaP.g:614:9: ';' (decl= classBodyDeclaration )*
            {
            root_0 = (Object)adaptor.nil();

            char_literal25=(Token)match(input,48,FOLLOW_48_in_enumBodyDeclarations1612); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal25_tree = (Object)adaptor.create(char_literal25);
            adaptor.addChild(root_0, char_literal25_tree);
            }
            if ( state.backtracking==0 ) {
              retval.element= new ArrayList<TypeElement>();
            }
            // JavaP.g:614:61: (decl= classBodyDeclaration )*
            loop31:
            do {
                int alt31=2;
                int LA31_0 = input.LA(1);

                if ( (LA31_0==ENUM||LA31_0==Identifier||LA31_0==48||LA31_0==50||(LA31_0>=53 && LA31_0<=59)||LA31_0==62||LA31_0==66||(LA31_0>=68 && LA31_0<=69)||(LA31_0>=74 && LA31_0<=78)||(LA31_0>=80 && LA31_0<=87)||LA31_0==97) ) {
                    alt31=1;
                }


                switch (alt31) {
            	case 1 :
            	    // JavaP.g:614:62: decl= classBodyDeclaration
            	    {
            	    pushFollow(FOLLOW_classBodyDeclaration_in_enumBodyDeclarations1619);
            	    decl=classBodyDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, decl.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.element.add(decl.element);
            	    }

            	    }
            	    break;

            	default :
            	    break loop31;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 21, enumBodyDeclarations_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumBodyDeclarations"

    public static class interfaceDeclaration_return extends ParserRuleReturnScope {
        public Type element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceDeclaration"
    // JavaP.g:617:1: interfaceDeclaration returns [Type element] : (id= normalInterfaceDeclaration | ad= annotationTypeDeclaration );
    public final Java_JavaP.interfaceDeclaration_return interfaceDeclaration() throws RecognitionException {
        Java_JavaP.interfaceDeclaration_return retval = new Java_JavaP.interfaceDeclaration_return();
        retval.start = input.LT(1);
        int interfaceDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.normalInterfaceDeclaration_return id = null;

        Java_JavaP.annotationTypeDeclaration_return ad = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 22) ) { return retval; }
            // JavaP.g:619:5: (id= normalInterfaceDeclaration | ad= annotationTypeDeclaration )
            int alt32=2;
            int LA32_0 = input.LA(1);

            if ( (LA32_0==68) ) {
                alt32=1;
            }
            else if ( (LA32_0==97) ) {
                alt32=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 32, 0, input);

                throw nvae;
            }
            switch (alt32) {
                case 1 :
                    // JavaP.g:619:9: id= normalInterfaceDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_normalInterfaceDeclaration_in_interfaceDeclaration1652);
                    id=normalInterfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, id.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = id.element;
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:620:9: ad= annotationTypeDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_annotationTypeDeclaration_in_interfaceDeclaration1666);
                    ad=annotationTypeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ad.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = ad.element;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              check_null(retval.element);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 22, interfaceDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceDeclaration"

    public static class normalInterfaceDeclaration_return extends ParserRuleReturnScope {
        public RegularType element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "normalInterfaceDeclaration"
    // JavaP.g:623:1: normalInterfaceDeclaration returns [RegularType element] : ifkw= 'interface' name= identifierRule (params= typeParameters )? (extkw= 'extends' trefs= typeList )? body= classBody ;
    public final Java_JavaP.normalInterfaceDeclaration_return normalInterfaceDeclaration() throws RecognitionException {
        Java_JavaP.normalInterfaceDeclaration_return retval = new Java_JavaP.normalInterfaceDeclaration_return();
        retval.start = input.LT(1);
        int normalInterfaceDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token ifkw=null;
        Token extkw=null;
        Java_JavaP.identifierRule_return name = null;

        Java_JavaP.typeParameters_return params = null;

        Java_JavaP.typeList_return trefs = null;

        Java_JavaP.classBody_return body = null;


        Object ifkw_tree=null;
        Object extkw_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 23) ) { return retval; }
            // JavaP.g:624:5: (ifkw= 'interface' name= identifierRule (params= typeParameters )? (extkw= 'extends' trefs= typeList )? body= classBody )
            // JavaP.g:624:9: ifkw= 'interface' name= identifierRule (params= typeParameters )? (extkw= 'extends' trefs= typeList )? body= classBody
            {
            root_0 = (Object)adaptor.nil();

            ifkw=(Token)match(input,68,FOLLOW_68_in_normalInterfaceDeclaration1693); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ifkw_tree = (Object)adaptor.create(ifkw);
            adaptor.addChild(root_0, ifkw_tree);
            }
            pushFollow(FOLLOW_identifierRule_in_normalInterfaceDeclaration1697);
            name=identifierRule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name.getTree());
            if ( state.backtracking==0 ) {
              retval.element = createType((name!=null?input.toString(name.start,name.stop):null));
                                                        retval.element.addModifier(new Interface());
                                                        setName(retval.element,name.start);
            }
            // JavaP.g:627:10: (params= typeParameters )?
            int alt33=2;
            int LA33_0 = input.LA(1);

            if ( (LA33_0==62) ) {
                alt33=1;
            }
            switch (alt33) {
                case 1 :
                    // JavaP.g:627:11: params= typeParameters
                    {
                    pushFollow(FOLLOW_typeParameters_in_normalInterfaceDeclaration1713);
                    params=typeParameters();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, params.getTree());
                    if ( state.backtracking==0 ) {
                      for(TypeParameter par: params.element){retval.element.addParameter(TypeParameter.class,par);}
                    }

                    }
                    break;

            }

            // JavaP.g:628:10: (extkw= 'extends' trefs= typeList )?
            int alt34=2;
            int LA34_0 = input.LA(1);

            if ( (LA34_0==60) ) {
                alt34=1;
            }
            switch (alt34) {
                case 1 :
                    // JavaP.g:628:11: extkw= 'extends' trefs= typeList
                    {
                    extkw=(Token)match(input,60,FOLLOW_60_in_normalInterfaceDeclaration1730); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    extkw_tree = (Object)adaptor.create(extkw);
                    adaptor.addChild(root_0, extkw_tree);
                    }
                    pushFollow(FOLLOW_typeList_in_normalInterfaceDeclaration1734);
                    trefs=typeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, trefs.getTree());
                    if ( state.backtracking==0 ) {

                                   for(TypeReference ref: trefs.element){
                                    retval.element.addInheritanceRelation(new SubtypeRelation(ref));
                                   }
                                 
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_classBody_in_normalInterfaceDeclaration1772);
            body=classBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, body.getTree());
            if ( state.backtracking==0 ) {
              retval.element.setBody(body.element);
            }
            if ( state.backtracking==0 ) {

                        setKeyword(retval.element,extkw);
                        setKeyword(retval.element,ifkw);
                       
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 23, normalInterfaceDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "normalInterfaceDeclaration"

    public static class typeList_return extends ParserRuleReturnScope {
        public List<TypeReference> element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeList"
    // JavaP.g:642:1: typeList returns [List<TypeReference> element] : tp= type ( ',' tpp= type )* ;
    public final Java_JavaP.typeList_return typeList() throws RecognitionException {
        Java_JavaP.typeList_return retval = new Java_JavaP.typeList_return();
        retval.start = input.LT(1);
        int typeList_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal26=null;
        Java_JavaP.type_return tp = null;

        Java_JavaP.type_return tpp = null;


        Object char_literal26_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 24) ) { return retval; }
            // JavaP.g:643:5: (tp= type ( ',' tpp= type )* )
            // JavaP.g:643:9: tp= type ( ',' tpp= type )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_type_in_typeList1810);
            tp=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, tp.getTree());
            if ( state.backtracking==0 ) {
              retval.element = new ArrayList<TypeReference>(); retval.element.add(tp.element);
            }
            // JavaP.g:643:99: ( ',' tpp= type )*
            loop35:
            do {
                int alt35=2;
                int LA35_0 = input.LA(1);

                if ( (LA35_0==63) ) {
                    alt35=1;
                }


                switch (alt35) {
            	case 1 :
            	    // JavaP.g:643:100: ',' tpp= type
            	    {
            	    char_literal26=(Token)match(input,63,FOLLOW_63_in_typeList1814); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal26_tree = (Object)adaptor.create(char_literal26);
            	    adaptor.addChild(root_0, char_literal26_tree);
            	    }
            	    pushFollow(FOLLOW_type_in_typeList1818);
            	    tpp=type();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, tpp.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.element.add(tpp.element);
            	    }

            	    }
            	    break;

            	default :
            	    break loop35;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 24, typeList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeList"

    public static class classBody_return extends ParserRuleReturnScope {
        public ClassBody element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classBody"
    // JavaP.g:646:1: classBody returns [ClassBody element] : '{' (decl= classBodyDeclaration )* '}' ;
    public final Java_JavaP.classBody_return classBody() throws RecognitionException {
        Java_JavaP.classBody_return retval = new Java_JavaP.classBody_return();
        retval.start = input.LT(1);
        int classBody_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal27=null;
        Token char_literal28=null;
        Java_JavaP.classBodyDeclaration_return decl = null;


        Object char_literal27_tree=null;
        Object char_literal28_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 25) ) { return retval; }
            // JavaP.g:647:5: ( '{' (decl= classBodyDeclaration )* '}' )
            // JavaP.g:647:9: '{' (decl= classBodyDeclaration )* '}'
            {
            root_0 = (Object)adaptor.nil();

            char_literal27=(Token)match(input,66,FOLLOW_66_in_classBody1845); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal27_tree = (Object)adaptor.create(char_literal27);
            adaptor.addChild(root_0, char_literal27_tree);
            }
            if ( state.backtracking==0 ) {
              retval.element = new ClassBody();
            }
            // JavaP.g:647:49: (decl= classBodyDeclaration )*
            loop36:
            do {
                int alt36=2;
                int LA36_0 = input.LA(1);

                if ( (LA36_0==ENUM||LA36_0==Identifier||LA36_0==48||LA36_0==50||(LA36_0>=53 && LA36_0<=59)||LA36_0==62||LA36_0==66||(LA36_0>=68 && LA36_0<=69)||(LA36_0>=74 && LA36_0<=78)||(LA36_0>=80 && LA36_0<=87)||LA36_0==97) ) {
                    alt36=1;
                }


                switch (alt36) {
            	case 1 :
            	    // JavaP.g:647:50: decl= classBodyDeclaration
            	    {
            	    pushFollow(FOLLOW_classBodyDeclaration_in_classBody1852);
            	    decl=classBodyDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, decl.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.element.add(decl.element);
            	    }

            	    }
            	    break;

            	default :
            	    break loop36;
                }
            } while (true);

            char_literal28=(Token)match(input,67,FOLLOW_67_in_classBody1858); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal28_tree = (Object)adaptor.create(char_literal28);
            adaptor.addChild(root_0, char_literal28_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 25, classBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classBody"

    public static class interfaceBody_return extends ParserRuleReturnScope {
        public ClassBody element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceBody"
    // JavaP.g:650:1: interfaceBody returns [ClassBody element] : '{' (decl= interfaceBodyDeclaration )* '}' ;
    public final Java_JavaP.interfaceBody_return interfaceBody() throws RecognitionException {
        Java_JavaP.interfaceBody_return retval = new Java_JavaP.interfaceBody_return();
        retval.start = input.LT(1);
        int interfaceBody_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal29=null;
        Token char_literal30=null;
        Java_JavaP.interfaceBodyDeclaration_return decl = null;


        Object char_literal29_tree=null;
        Object char_literal30_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 26) ) { return retval; }
            // JavaP.g:651:5: ( '{' (decl= interfaceBodyDeclaration )* '}' )
            // JavaP.g:651:9: '{' (decl= interfaceBodyDeclaration )* '}'
            {
            root_0 = (Object)adaptor.nil();

            char_literal29=(Token)match(input,66,FOLLOW_66_in_interfaceBody1881); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal29_tree = (Object)adaptor.create(char_literal29);
            adaptor.addChild(root_0, char_literal29_tree);
            }
            if ( state.backtracking==0 ) {
              retval.element = new ClassBody();
            }
            // JavaP.g:652:13: (decl= interfaceBodyDeclaration )*
            loop37:
            do {
                int alt37=2;
                int LA37_0 = input.LA(1);

                if ( (LA37_0==ENUM||LA37_0==Identifier||LA37_0==48||LA37_0==50||(LA37_0>=53 && LA37_0<=59)||LA37_0==62||(LA37_0>=68 && LA37_0<=69)||(LA37_0>=74 && LA37_0<=78)||(LA37_0>=80 && LA37_0<=87)||LA37_0==97) ) {
                    alt37=1;
                }


                switch (alt37) {
            	case 1 :
            	    // JavaP.g:652:14: decl= interfaceBodyDeclaration
            	    {
            	    pushFollow(FOLLOW_interfaceBodyDeclaration_in_interfaceBody1900);
            	    decl=interfaceBodyDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, decl.getTree());
            	    if ( state.backtracking==0 ) {
            	      if(decl != null && decl.element != null) {retval.element.add(decl.element);}
            	    }

            	    }
            	    break;

            	default :
            	    break loop37;
                }
            } while (true);

            char_literal30=(Token)match(input,67,FOLLOW_67_in_interfaceBody1946); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal30_tree = (Object)adaptor.create(char_literal30);
            adaptor.addChild(root_0, char_literal30_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 26, interfaceBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceBody"

    public static class classBodyDeclaration_return extends ParserRuleReturnScope {
        public TypeElement element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classBodyDeclaration"
    // JavaP.g:658:1: classBodyDeclaration returns [TypeElement element] : (sckw= ';' | (stkw= 'static' )? bl= block | mods= modifiers decl= memberDecl );
    public final Java_JavaP.classBodyDeclaration_return classBodyDeclaration() throws RecognitionException {
        Java_JavaP.classBodyDeclaration_return retval = new Java_JavaP.classBodyDeclaration_return();
        retval.start = input.LT(1);
        int classBodyDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token sckw=null;
        Token stkw=null;
        Java_JavaP.block_return bl = null;

        Java_JavaP.modifiers_return mods = null;

        Java_JavaP.memberDecl_return decl = null;


        Object sckw_tree=null;
        Object stkw_tree=null;


          Token start=null;
          Token stop=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 27) ) { return retval; }
            // JavaP.g:664:5: (sckw= ';' | (stkw= 'static' )? bl= block | mods= modifiers decl= memberDecl )
            int alt39=3;
            switch ( input.LA(1) ) {
            case 48:
                {
                alt39=1;
                }
                break;
            case 50:
                {
                int LA39_2 = input.LA(2);

                if ( (LA39_2==66) ) {
                    alt39=2;
                }
                else if ( (LA39_2==ENUM||LA39_2==Identifier||LA39_2==50||(LA39_2>=53 && LA39_2<=59)||LA39_2==62||(LA39_2>=68 && LA39_2<=69)||(LA39_2>=74 && LA39_2<=78)||(LA39_2>=80 && LA39_2<=87)||LA39_2==97) ) {
                    alt39=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 39, 2, input);

                    throw nvae;
                }
                }
                break;
            case 66:
                {
                alt39=2;
                }
                break;
            case ENUM:
            case Identifier:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
            case 58:
            case 59:
            case 62:
            case 68:
            case 69:
            case 74:
            case 75:
            case 76:
            case 77:
            case 78:
            case 80:
            case 81:
            case 82:
            case 83:
            case 84:
            case 85:
            case 86:
            case 87:
            case 97:
                {
                alt39=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 39, 0, input);

                throw nvae;
            }

            switch (alt39) {
                case 1 :
                    // JavaP.g:664:9: sckw= ';'
                    {
                    root_0 = (Object)adaptor.nil();

                    sckw=(Token)match(input,48,FOLLOW_48_in_classBodyDeclaration1979); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    sckw_tree = (Object)adaptor.create(sckw);
                    adaptor.addChild(root_0, sckw_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new EmptyTypeElement(); start=sckw; stop=sckw;
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:665:9: (stkw= 'static' )? bl= block
                    {
                    root_0 = (Object)adaptor.nil();

                    // JavaP.g:665:13: (stkw= 'static' )?
                    int alt38=2;
                    int LA38_0 = input.LA(1);

                    if ( (LA38_0==50) ) {
                        alt38=1;
                    }
                    switch (alt38) {
                        case 1 :
                            // JavaP.g:0:0: stkw= 'static'
                            {
                            stkw=(Token)match(input,50,FOLLOW_50_in_classBodyDeclaration1993); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            stkw_tree = (Object)adaptor.create(stkw);
                            adaptor.addChild(root_0, stkw_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_block_in_classBodyDeclaration1998);
                    bl=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bl.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = new StaticInitializer(bl.element); start=stkw;stop=bl.stop;
                    }

                    }
                    break;
                case 3 :
                    // JavaP.g:666:9: mods= modifiers decl= memberDecl
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_modifiers_in_classBodyDeclaration2012);
                    mods=modifiers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mods.getTree());
                    pushFollow(FOLLOW_memberDecl_in_classBodyDeclaration2016);
                    decl=memberDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, decl.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = decl.element;
                              if(retval.element != null) {
                                retval.element.addModifiers(mods.element); start=mods.start; stop=decl.stop;
                              }
                             
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              setLocation(retval.element, (CommonToken)start, (CommonToken)stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 27, classBodyDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classBodyDeclaration"

    public static class memberDecl_return extends ParserRuleReturnScope {
        public TypeElement element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "memberDecl"
    // JavaP.g:674:1: memberDecl returns [TypeElement element] : (gen= genericMethodOrConstructorDecl | mem= memberDeclaration | vmd= voidMethodDeclaration | cs= constructorDeclaration | id= interfaceDeclaration | cd= classDeclaration );
    public final Java_JavaP.memberDecl_return memberDecl() throws RecognitionException {
        Java_JavaP.memberDecl_return retval = new Java_JavaP.memberDecl_return();
        retval.start = input.LT(1);
        int memberDecl_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.genericMethodOrConstructorDecl_return gen = null;

        Java_JavaP.memberDeclaration_return mem = null;

        Java_JavaP.voidMethodDeclaration_return vmd = null;

        Java_JavaP.constructorDeclaration_return cs = null;

        Java_JavaP.interfaceDeclaration_return id = null;

        Java_JavaP.classDeclaration_return cd = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 28) ) { return retval; }
            // JavaP.g:675:5: (gen= genericMethodOrConstructorDecl | mem= memberDeclaration | vmd= voidMethodDeclaration | cs= constructorDeclaration | id= interfaceDeclaration | cd= classDeclaration )
            int alt40=6;
            switch ( input.LA(1) ) {
            case 62:
                {
                alt40=1;
                }
                break;
            case Identifier:
                {
                int LA40_2 = input.LA(2);

                if ( (LA40_2==Identifier||LA40_2==51||LA40_2==62||LA40_2==65||LA40_2==70) ) {
                    alt40=2;
                }
                else if ( (LA40_2==90) ) {
                    alt40=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 40, 2, input);

                    throw nvae;
                }
                }
                break;
            case 80:
            case 81:
            case 82:
            case 83:
            case 84:
            case 85:
            case 86:
            case 87:
                {
                alt40=2;
                }
                break;
            case 69:
                {
                alt40=3;
                }
                break;
            case 68:
            case 97:
                {
                alt40=5;
                }
                break;
            case ENUM:
            case 59:
                {
                alt40=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 40, 0, input);

                throw nvae;
            }

            switch (alt40) {
                case 1 :
                    // JavaP.g:675:9: gen= genericMethodOrConstructorDecl
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_genericMethodOrConstructorDecl_in_memberDecl2050);
                    gen=genericMethodOrConstructorDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, gen.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = gen.element;
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:676:9: mem= memberDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_memberDeclaration_in_memberDecl2064);
                    mem=memberDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mem.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = mem.element;
                    }

                    }
                    break;
                case 3 :
                    // JavaP.g:677:9: vmd= voidMethodDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_voidMethodDeclaration_in_memberDecl2078);
                    vmd=voidMethodDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vmd.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = vmd.element;
                    }

                    }
                    break;
                case 4 :
                    // JavaP.g:678:9: cs= constructorDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_constructorDeclaration_in_memberDecl2092);
                    cs=constructorDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cs.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = cs.element;
                    }

                    }
                    break;
                case 5 :
                    // JavaP.g:679:9: id= interfaceDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_interfaceDeclaration_in_memberDecl2106);
                    id=interfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, id.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element=id.element;
                    }

                    }
                    break;
                case 6 :
                    // JavaP.g:680:9: cd= classDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_classDeclaration_in_memberDecl2120);
                    cd=classDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element=cd.element; 
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 28, memberDecl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "memberDecl"

    public static class voidMethodDeclaration_return extends ParserRuleReturnScope {
        public Method element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "voidMethodDeclaration"
    // JavaP.g:683:1: voidMethodDeclaration returns [Method element] : vt= voidType methodname= identifierRule voidMethodDeclaratorRest ;
    public final Java_JavaP.voidMethodDeclaration_return voidMethodDeclaration() throws RecognitionException {
        MethodScope_stack.push(new MethodScope_scope());

        Java_JavaP.voidMethodDeclaration_return retval = new Java_JavaP.voidMethodDeclaration_return();
        retval.start = input.LT(1);
        int voidMethodDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.voidType_return vt = null;

        Java_JavaP.identifierRule_return methodname = null;

        Java_JavaP.voidMethodDeclaratorRest_return voidMethodDeclaratorRest31 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 29) ) { return retval; }
            // JavaP.g:686:6: (vt= voidType methodname= identifierRule voidMethodDeclaratorRest )
            // JavaP.g:686:8: vt= voidType methodname= identifierRule voidMethodDeclaratorRest
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_voidType_in_voidMethodDeclaration2155);
            vt=voidType();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, vt.getTree());
            pushFollow(FOLLOW_identifierRule_in_voidMethodDeclaration2159);
            methodname=identifierRule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, methodname.getTree());
            if ( state.backtracking==0 ) {
              retval.element = createNormalMethod(new SimpleNameMethodHeader((methodname!=null?input.toString(methodname.start,methodname.stop):null), vt.element));
                  	  ((MethodScope_scope)MethodScope_stack.peek()).method = retval.element;
                  	  setName(retval.element,methodname.start);
                  	  
            }
            pushFollow(FOLLOW_voidMethodDeclaratorRest_in_voidMethodDeclaration2169);
            voidMethodDeclaratorRest31=voidMethodDeclaratorRest();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, voidMethodDeclaratorRest31.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              setName(retval.element, methodname.start);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 29, voidMethodDeclaration_StartIndex); }
            MethodScope_stack.pop();

        }
        return retval;
    }
    // $ANTLR end "voidMethodDeclaration"

    public static class voidType_return extends ParserRuleReturnScope {
        public JavaTypeReference element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "voidType"
    // JavaP.g:693:1: voidType returns [JavaTypeReference element] : 'void' ;
    public final Java_JavaP.voidType_return voidType() throws RecognitionException {
        Java_JavaP.voidType_return retval = new Java_JavaP.voidType_return();
        retval.start = input.LT(1);
        int voidType_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal32=null;

        Object string_literal32_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 30) ) { return retval; }
            // JavaP.g:695:7: ( 'void' )
            // JavaP.g:695:10: 'void'
            {
            root_0 = (Object)adaptor.nil();

            string_literal32=(Token)match(input,69,FOLLOW_69_in_voidType2198); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal32_tree = (Object)adaptor.create(string_literal32);
            adaptor.addChild(root_0, string_literal32_tree);
            }
            if ( state.backtracking==0 ) {
              retval.element=typeRef("void");
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              setLocation(retval.element, (CommonToken)retval.start, (CommonToken)retval.stop, "__PRIMITIVE");
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 30, voidType_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "voidType"

    public static class constructorDeclaration_return extends ParserRuleReturnScope {
        public Method element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constructorDeclaration"
    // JavaP.g:698:1: constructorDeclaration returns [Method element] : consname= identifierRule constructorDeclaratorRest ;
    public final Java_JavaP.constructorDeclaration_return constructorDeclaration() throws RecognitionException {
        MethodScope_stack.push(new MethodScope_scope());

        Java_JavaP.constructorDeclaration_return retval = new Java_JavaP.constructorDeclaration_return();
        retval.start = input.LT(1);
        int constructorDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.identifierRule_return consname = null;

        Java_JavaP.constructorDeclaratorRest_return constructorDeclaratorRest33 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 31) ) { return retval; }
            // JavaP.g:700:9: (consname= identifierRule constructorDeclaratorRest )
            // JavaP.g:700:11: consname= identifierRule constructorDeclaratorRest
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_identifierRule_in_constructorDeclaration2234);
            consname=identifierRule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, consname.getTree());
            if ( state.backtracking==0 ) {

                           retval.element = createNormalMethod(new SimpleNameMethodHeader((consname!=null?input.toString(consname.start,consname.stop):null), typeRef((consname!=null?input.toString(consname.start,consname.stop):null))));
                           retval.element.addModifier(new JavaConstructor());
                           ((MethodScope_scope)MethodScope_stack.peek()).method = retval.element;
                           setName(retval.element, consname.start);
                          
            }
            pushFollow(FOLLOW_constructorDeclaratorRest_in_constructorDeclaration2263);
            constructorDeclaratorRest33=constructorDeclaratorRest();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, constructorDeclaratorRest33.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 31, constructorDeclaration_StartIndex); }
            MethodScope_stack.pop();

        }
        return retval;
    }
    // $ANTLR end "constructorDeclaration"

    public static class memberDeclaration_return extends ParserRuleReturnScope {
        public TypeElement element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "memberDeclaration"
    // JavaP.g:710:1: memberDeclaration returns [TypeElement element] : (method= methodDeclaration | field= fieldDeclaration );
    public final Java_JavaP.memberDeclaration_return memberDeclaration() throws RecognitionException {
        Java_JavaP.memberDeclaration_return retval = new Java_JavaP.memberDeclaration_return();
        retval.start = input.LT(1);
        int memberDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.methodDeclaration_return method = null;

        Java_JavaP.fieldDeclaration_return field = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 32) ) { return retval; }
            // JavaP.g:711:5: (method= methodDeclaration | field= fieldDeclaration )
            int alt41=2;
            alt41 = dfa41.predict(input);
            switch (alt41) {
                case 1 :
                    // JavaP.g:711:9: method= methodDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_methodDeclaration_in_memberDeclaration2285);
                    method=methodDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, method.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element=method.element;
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:712:9: field= fieldDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_fieldDeclaration_in_memberDeclaration2299);
                    field=fieldDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, field.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element=field.element;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 32, memberDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "memberDeclaration"

    public static class genericMethodOrConstructorDecl_return extends ParserRuleReturnScope {
        public Method element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "genericMethodOrConstructorDecl"
    // JavaP.g:715:1: genericMethodOrConstructorDecl returns [Method element] : params= typeParameters rest= genericMethodOrConstructorRest ;
    public final Java_JavaP.genericMethodOrConstructorDecl_return genericMethodOrConstructorDecl() throws RecognitionException {
        Java_JavaP.genericMethodOrConstructorDecl_return retval = new Java_JavaP.genericMethodOrConstructorDecl_return();
        retval.start = input.LT(1);
        int genericMethodOrConstructorDecl_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.typeParameters_return params = null;

        Java_JavaP.genericMethodOrConstructorRest_return rest = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 33) ) { return retval; }
            // JavaP.g:716:5: (params= typeParameters rest= genericMethodOrConstructorRest )
            // JavaP.g:716:9: params= typeParameters rest= genericMethodOrConstructorRest
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_typeParameters_in_genericMethodOrConstructorDecl2326);
            params=typeParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, params.getTree());
            pushFollow(FOLLOW_genericMethodOrConstructorRest_in_genericMethodOrConstructorDecl2330);
            rest=genericMethodOrConstructorRest();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rest.getTree());
            if ( state.backtracking==0 ) {
              retval.element = rest.element; retval.element.header().addAllTypeParameters(params.element);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 33, genericMethodOrConstructorDecl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "genericMethodOrConstructorDecl"

    public static class genericMethodOrConstructorRest_return extends ParserRuleReturnScope {
        public Method element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "genericMethodOrConstructorRest"
    // JavaP.g:719:1: genericMethodOrConstructorRest returns [Method element] : ( (t= type | 'void' ) name= identifierRule methodDeclaratorRest | name= identifierRule constructorDeclaratorRest );
    public final Java_JavaP.genericMethodOrConstructorRest_return genericMethodOrConstructorRest() throws RecognitionException {
        MethodScope_stack.push(new MethodScope_scope());

        Java_JavaP.genericMethodOrConstructorRest_return retval = new Java_JavaP.genericMethodOrConstructorRest_return();
        retval.start = input.LT(1);
        int genericMethodOrConstructorRest_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal34=null;
        Java_JavaP.type_return t = null;

        Java_JavaP.identifierRule_return name = null;

        Java_JavaP.methodDeclaratorRest_return methodDeclaratorRest35 = null;

        Java_JavaP.constructorDeclaratorRest_return constructorDeclaratorRest36 = null;


        Object string_literal34_tree=null;

        TypeReference tref = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 34) ) { return retval; }
            // JavaP.g:723:5: ( (t= type | 'void' ) name= identifierRule methodDeclaratorRest | name= identifierRule constructorDeclaratorRest )
            int alt43=2;
            int LA43_0 = input.LA(1);

            if ( (LA43_0==Identifier) ) {
                int LA43_1 = input.LA(2);

                if ( (LA43_1==Identifier||LA43_1==51||LA43_1==62||LA43_1==65||LA43_1==70) ) {
                    alt43=1;
                }
                else if ( (LA43_1==90) ) {
                    alt43=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 43, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA43_0==69||(LA43_0>=80 && LA43_0<=87)) ) {
                alt43=1;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 43, 0, input);

                throw nvae;
            }
            switch (alt43) {
                case 1 :
                    // JavaP.g:723:9: (t= type | 'void' ) name= identifierRule methodDeclaratorRest
                    {
                    root_0 = (Object)adaptor.nil();

                    // JavaP.g:723:9: (t= type | 'void' )
                    int alt42=2;
                    int LA42_0 = input.LA(1);

                    if ( (LA42_0==Identifier||(LA42_0>=80 && LA42_0<=87)) ) {
                        alt42=1;
                    }
                    else if ( (LA42_0==69) ) {
                        alt42=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 42, 0, input);

                        throw nvae;
                    }
                    switch (alt42) {
                        case 1 :
                            // JavaP.g:723:10: t= type
                            {
                            pushFollow(FOLLOW_type_in_genericMethodOrConstructorRest2371);
                            t=type();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, t.getTree());
                            if ( state.backtracking==0 ) {
                              tref=t.element;
                            }

                            }
                            break;
                        case 2 :
                            // JavaP.g:723:36: 'void'
                            {
                            string_literal34=(Token)match(input,69,FOLLOW_69_in_genericMethodOrConstructorRest2376); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            string_literal34_tree = (Object)adaptor.create(string_literal34);
                            adaptor.addChild(root_0, string_literal34_tree);
                            }
                            if ( state.backtracking==0 ) {
                              tref = typeRef("void");
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_identifierRule_in_genericMethodOrConstructorRest2383);
                    name=identifierRule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = createNormalMethod(new SimpleNameMethodHeader((name!=null?input.toString(name.start,name.stop):null),tref));
                               ((MethodScope_scope)MethodScope_stack.peek()).method = retval.element;
                               setName(retval.element,name.start);
                              
                    }
                    pushFollow(FOLLOW_methodDeclaratorRest_in_genericMethodOrConstructorRest2395);
                    methodDeclaratorRest35=methodDeclaratorRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, methodDeclaratorRest35.getTree());

                    }
                    break;
                case 2 :
                    // JavaP.g:728:9: name= identifierRule constructorDeclaratorRest
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_identifierRule_in_genericMethodOrConstructorRest2407);
                    name=identifierRule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = createNormalMethod(new SimpleNameMethodHeader((name!=null?input.toString(name.start,name.stop):null),typeRef((name!=null?input.toString(name.start,name.stop):null))));
                               ((MethodScope_scope)MethodScope_stack.peek()).method = retval.element;
                               setName(retval.element,name.start);
                              
                    }
                    pushFollow(FOLLOW_constructorDeclaratorRest_in_genericMethodOrConstructorRest2419);
                    constructorDeclaratorRest36=constructorDeclaratorRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constructorDeclaratorRest36.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              check_null(retval.element);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 34, genericMethodOrConstructorRest_StartIndex); }
            MethodScope_stack.pop();

        }
        return retval;
    }
    // $ANTLR end "genericMethodOrConstructorRest"

    public static class methodDeclaration_return extends ParserRuleReturnScope {
        public Method element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "methodDeclaration"
    // JavaP.g:735:1: methodDeclaration returns [Method element] : t= type name= identifierRule methodDeclaratorRest ;
    public final Java_JavaP.methodDeclaration_return methodDeclaration() throws RecognitionException {
        MethodScope_stack.push(new MethodScope_scope());

        Java_JavaP.methodDeclaration_return retval = new Java_JavaP.methodDeclaration_return();
        retval.start = input.LT(1);
        int methodDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.type_return t = null;

        Java_JavaP.identifierRule_return name = null;

        Java_JavaP.methodDeclaratorRest_return methodDeclaratorRest37 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 35) ) { return retval; }
            // JavaP.g:737:5: (t= type name= identifierRule methodDeclaratorRest )
            // JavaP.g:737:9: t= type name= identifierRule methodDeclaratorRest
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_type_in_methodDeclaration2449);
            t=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, t.getTree());
            pushFollow(FOLLOW_identifierRule_in_methodDeclaration2453);
            name=identifierRule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name.getTree());
            if ( state.backtracking==0 ) {
              retval.element = createNormalMethod(new SimpleNameMethodHeader((name!=null?input.toString(name.start,name.stop):null),t.element));
                       ((MethodScope_scope)MethodScope_stack.peek()).method = retval.element;
                       setName(retval.element,name.start);
                       
            }
            pushFollow(FOLLOW_methodDeclaratorRest_in_methodDeclaration2465);
            methodDeclaratorRest37=methodDeclaratorRest();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, methodDeclaratorRest37.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 35, methodDeclaration_StartIndex); }
            MethodScope_stack.pop();

        }
        return retval;
    }
    // $ANTLR end "methodDeclaration"

    public static class fieldDeclaration_return extends ParserRuleReturnScope {
        public MemberVariableDeclarator element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fieldDeclaration"
    // JavaP.g:744:1: fieldDeclaration returns [MemberVariableDeclarator element] : ref= type decls= variableDeclarators ';' ;
    public final Java_JavaP.fieldDeclaration_return fieldDeclaration() throws RecognitionException {
        Java_JavaP.fieldDeclaration_return retval = new Java_JavaP.fieldDeclaration_return();
        retval.start = input.LT(1);
        int fieldDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal38=null;
        Java_JavaP.type_return ref = null;

        Java_JavaP.variableDeclarators_return decls = null;


        Object char_literal38_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 36) ) { return retval; }
            // JavaP.g:745:5: (ref= type decls= variableDeclarators ';' )
            // JavaP.g:745:9: ref= type decls= variableDeclarators ';'
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_type_in_fieldDeclaration2490);
            ref=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ref.getTree());
            if ( state.backtracking==0 ) {
              retval.element = new MemberVariableDeclarator(ref.element);
            }
            pushFollow(FOLLOW_variableDeclarators_in_fieldDeclaration2496);
            decls=variableDeclarators();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, decls.getTree());
            if ( state.backtracking==0 ) {
              for(VariableDeclaration decl: decls.element) {retval.element.add(decl);}
            }
            char_literal38=(Token)match(input,48,FOLLOW_48_in_fieldDeclaration2500); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal38_tree = (Object)adaptor.create(char_literal38);
            adaptor.addChild(root_0, char_literal38_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 36, fieldDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "fieldDeclaration"

    public static class interfaceBodyDeclaration_return extends ParserRuleReturnScope {
        public TypeElement element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceBodyDeclaration"
    // JavaP.g:748:1: interfaceBodyDeclaration returns [TypeElement element] : (mods= modifiers decl= interfaceMemberDecl | ';' );
    public final Java_JavaP.interfaceBodyDeclaration_return interfaceBodyDeclaration() throws RecognitionException {
        Java_JavaP.interfaceBodyDeclaration_return retval = new Java_JavaP.interfaceBodyDeclaration_return();
        retval.start = input.LT(1);
        int interfaceBodyDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal39=null;
        Java_JavaP.modifiers_return mods = null;

        Java_JavaP.interfaceMemberDecl_return decl = null;


        Object char_literal39_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 37) ) { return retval; }
            // JavaP.g:749:5: (mods= modifiers decl= interfaceMemberDecl | ';' )
            int alt44=2;
            int LA44_0 = input.LA(1);

            if ( (LA44_0==ENUM||LA44_0==Identifier||LA44_0==50||(LA44_0>=53 && LA44_0<=59)||LA44_0==62||(LA44_0>=68 && LA44_0<=69)||(LA44_0>=74 && LA44_0<=78)||(LA44_0>=80 && LA44_0<=87)||LA44_0==97) ) {
                alt44=1;
            }
            else if ( (LA44_0==48) ) {
                alt44=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 44, 0, input);

                throw nvae;
            }
            switch (alt44) {
                case 1 :
                    // JavaP.g:749:9: mods= modifiers decl= interfaceMemberDecl
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_modifiers_in_interfaceBodyDeclaration2525);
                    mods=modifiers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mods.getTree());
                    pushFollow(FOLLOW_interfaceMemberDecl_in_interfaceBodyDeclaration2529);
                    decl=interfaceMemberDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, decl.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = decl.element; for(Modifier mod: mods.element){retval.element.addModifier(mod);}
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:750:9: ';'
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal39=(Token)match(input,48,FOLLOW_48_in_interfaceBodyDeclaration2541); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal39_tree = (Object)adaptor.create(char_literal39);
                    adaptor.addChild(root_0, char_literal39_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 37, interfaceBodyDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceBodyDeclaration"

    public static class interfaceMemberDecl_return extends ParserRuleReturnScope {
        public TypeElement element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceMemberDecl"
    // JavaP.g:753:1: interfaceMemberDecl returns [TypeElement element] : (decl= interfaceMethodOrFieldDecl | decl2= interfaceGenericMethodDecl | decl5= voidInterfaceMethodDeclaration | decl3= interfaceDeclaration | decl4= classDeclaration );
    public final Java_JavaP.interfaceMemberDecl_return interfaceMemberDecl() throws RecognitionException {
        Java_JavaP.interfaceMemberDecl_return retval = new Java_JavaP.interfaceMemberDecl_return();
        retval.start = input.LT(1);
        int interfaceMemberDecl_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.interfaceMethodOrFieldDecl_return decl = null;

        Java_JavaP.interfaceGenericMethodDecl_return decl2 = null;

        Java_JavaP.voidInterfaceMethodDeclaration_return decl5 = null;

        Java_JavaP.interfaceDeclaration_return decl3 = null;

        Java_JavaP.classDeclaration_return decl4 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 38) ) { return retval; }
            // JavaP.g:754:5: (decl= interfaceMethodOrFieldDecl | decl2= interfaceGenericMethodDecl | decl5= voidInterfaceMethodDeclaration | decl3= interfaceDeclaration | decl4= classDeclaration )
            int alt45=5;
            switch ( input.LA(1) ) {
            case Identifier:
            case 80:
            case 81:
            case 82:
            case 83:
            case 84:
            case 85:
            case 86:
            case 87:
                {
                alt45=1;
                }
                break;
            case 62:
                {
                alt45=2;
                }
                break;
            case 69:
                {
                alt45=3;
                }
                break;
            case 68:
            case 97:
                {
                alt45=4;
                }
                break;
            case ENUM:
            case 59:
                {
                alt45=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 45, 0, input);

                throw nvae;
            }

            switch (alt45) {
                case 1 :
                    // JavaP.g:754:9: decl= interfaceMethodOrFieldDecl
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_interfaceMethodOrFieldDecl_in_interfaceMemberDecl2566);
                    decl=interfaceMethodOrFieldDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, decl.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = decl.element;
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:755:9: decl2= interfaceGenericMethodDecl
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_interfaceGenericMethodDecl_in_interfaceMemberDecl2580);
                    decl2=interfaceGenericMethodDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, decl2.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = decl2.element;
                    }

                    }
                    break;
                case 3 :
                    // JavaP.g:756:9: decl5= voidInterfaceMethodDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_voidInterfaceMethodDeclaration_in_interfaceMemberDecl2594);
                    decl5=voidInterfaceMethodDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, decl5.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = decl5.element;
                    }

                    }
                    break;
                case 4 :
                    // JavaP.g:757:9: decl3= interfaceDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_interfaceDeclaration_in_interfaceMemberDecl2608);
                    decl3=interfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, decl3.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = decl3.element; 
                    }

                    }
                    break;
                case 5 :
                    // JavaP.g:758:9: decl4= classDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_classDeclaration_in_interfaceMemberDecl2622);
                    decl4=classDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, decl4.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = decl4.element; 
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 38, interfaceMemberDecl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceMemberDecl"

    public static class voidInterfaceMethodDeclaration_return extends ParserRuleReturnScope {
        public Method element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "voidInterfaceMethodDeclaration"
    // JavaP.g:761:1: voidInterfaceMethodDeclaration returns [Method element] : vt= voidType methodname= identifierRule voidInterfaceMethodDeclaratorRest ;
    public final Java_JavaP.voidInterfaceMethodDeclaration_return voidInterfaceMethodDeclaration() throws RecognitionException {
        MethodScope_stack.push(new MethodScope_scope());

        Java_JavaP.voidInterfaceMethodDeclaration_return retval = new Java_JavaP.voidInterfaceMethodDeclaration_return();
        retval.start = input.LT(1);
        int voidInterfaceMethodDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.voidType_return vt = null;

        Java_JavaP.identifierRule_return methodname = null;

        Java_JavaP.voidInterfaceMethodDeclaratorRest_return voidInterfaceMethodDeclaratorRest40 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 39) ) { return retval; }
            // JavaP.g:763:6: (vt= voidType methodname= identifierRule voidInterfaceMethodDeclaratorRest )
            // JavaP.g:763:8: vt= voidType methodname= identifierRule voidInterfaceMethodDeclaratorRest
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_voidType_in_voidInterfaceMethodDeclaration2654);
            vt=voidType();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, vt.getTree());
            pushFollow(FOLLOW_identifierRule_in_voidInterfaceMethodDeclaration2658);
            methodname=identifierRule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, methodname.getTree());
            if ( state.backtracking==0 ) {
              retval.element = createNormalMethod(new SimpleNameMethodHeader((methodname!=null?input.toString(methodname.start,methodname.stop):null), vt.element));
                  	   ((MethodScope_scope)MethodScope_stack.peek()).method = retval.element;
                  	   setName(retval.element,methodname.start);
                  	   
            }
            pushFollow(FOLLOW_voidInterfaceMethodDeclaratorRest_in_voidInterfaceMethodDeclaration2669);
            voidInterfaceMethodDeclaratorRest40=voidInterfaceMethodDeclaratorRest();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, voidInterfaceMethodDeclaratorRest40.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 39, voidInterfaceMethodDeclaration_StartIndex); }
            MethodScope_stack.pop();

        }
        return retval;
    }
    // $ANTLR end "voidInterfaceMethodDeclaration"

    public static class interfaceMethodOrFieldDecl_return extends ParserRuleReturnScope {
        public TypeElement element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceMethodOrFieldDecl"
    // JavaP.g:770:1: interfaceMethodOrFieldDecl returns [TypeElement element] : (cst= interfaceConstant | m= interfaceMethod );
    public final Java_JavaP.interfaceMethodOrFieldDecl_return interfaceMethodOrFieldDecl() throws RecognitionException {
        Java_JavaP.interfaceMethodOrFieldDecl_return retval = new Java_JavaP.interfaceMethodOrFieldDecl_return();
        retval.start = input.LT(1);
        int interfaceMethodOrFieldDecl_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.interfaceConstant_return cst = null;

        Java_JavaP.interfaceMethod_return m = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 40) ) { return retval; }
            // JavaP.g:771:5: (cst= interfaceConstant | m= interfaceMethod )
            int alt46=2;
            alt46 = dfa46.predict(input);
            switch (alt46) {
                case 1 :
                    // JavaP.g:771:9: cst= interfaceConstant
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_interfaceConstant_in_interfaceMethodOrFieldDecl2695);
                    cst=interfaceConstant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cst.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = cst.element;
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:772:9: m= interfaceMethod
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_interfaceMethod_in_interfaceMethodOrFieldDecl2709);
                    m=interfaceMethod();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, m.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = m.element;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 40, interfaceMethodOrFieldDecl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceMethodOrFieldDecl"

    public static class interfaceConstant_return extends ParserRuleReturnScope {
        public MemberVariableDeclarator element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceConstant"
    // JavaP.g:776:1: interfaceConstant returns [MemberVariableDeclarator element] : ref= type decl= constantDeclarator ( ',' dec= constantDeclarator )* ';' ;
    public final Java_JavaP.interfaceConstant_return interfaceConstant() throws RecognitionException {
        Java_JavaP.interfaceConstant_return retval = new Java_JavaP.interfaceConstant_return();
        retval.start = input.LT(1);
        int interfaceConstant_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal41=null;
        Token char_literal42=null;
        Java_JavaP.type_return ref = null;

        Java_JavaP.constantDeclarator_return decl = null;

        Java_JavaP.constantDeclarator_return dec = null;


        Object char_literal41_tree=null;
        Object char_literal42_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 41) ) { return retval; }
            // JavaP.g:777:5: (ref= type decl= constantDeclarator ( ',' dec= constantDeclarator )* ';' )
            // JavaP.g:777:9: ref= type decl= constantDeclarator ( ',' dec= constantDeclarator )* ';'
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_type_in_interfaceConstant2737);
            ref=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ref.getTree());
            if ( state.backtracking==0 ) {
              retval.element = new MemberVariableDeclarator(ref.element);
            }
            pushFollow(FOLLOW_constantDeclarator_in_interfaceConstant2743);
            decl=constantDeclarator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, decl.getTree());
            if ( state.backtracking==0 ) {
              retval.element.add(decl.element);
            }
            // JavaP.g:777:139: ( ',' dec= constantDeclarator )*
            loop47:
            do {
                int alt47=2;
                int LA47_0 = input.LA(1);

                if ( (LA47_0==63) ) {
                    alt47=1;
                }


                switch (alt47) {
            	case 1 :
            	    // JavaP.g:777:140: ',' dec= constantDeclarator
            	    {
            	    char_literal41=(Token)match(input,63,FOLLOW_63_in_interfaceConstant2747); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal41_tree = (Object)adaptor.create(char_literal41);
            	    adaptor.addChild(root_0, char_literal41_tree);
            	    }
            	    pushFollow(FOLLOW_constantDeclarator_in_interfaceConstant2751);
            	    dec=constantDeclarator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dec.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.element.add(dec.element);
            	    }

            	    }
            	    break;

            	default :
            	    break loop47;
                }
            } while (true);

            char_literal42=(Token)match(input,48,FOLLOW_48_in_interfaceConstant2757); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal42_tree = (Object)adaptor.create(char_literal42);
            adaptor.addChild(root_0, char_literal42_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 41, interfaceConstant_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceConstant"

    public static class interfaceMethod_return extends ParserRuleReturnScope {
        public Method element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceMethod"
    // JavaP.g:780:1: interfaceMethod returns [Method element] : tref= type methodname= identifierRule interfaceMethodDeclaratorRest ;
    public final Java_JavaP.interfaceMethod_return interfaceMethod() throws RecognitionException {
        MethodScope_stack.push(new MethodScope_scope());

        Java_JavaP.interfaceMethod_return retval = new Java_JavaP.interfaceMethod_return();
        retval.start = input.LT(1);
        int interfaceMethod_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.type_return tref = null;

        Java_JavaP.identifierRule_return methodname = null;

        Java_JavaP.interfaceMethodDeclaratorRest_return interfaceMethodDeclaratorRest43 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 42) ) { return retval; }
            // JavaP.g:782:2: (tref= type methodname= identifierRule interfaceMethodDeclaratorRest )
            // JavaP.g:782:4: tref= type methodname= identifierRule interfaceMethodDeclaratorRest
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_type_in_interfaceMethod2782);
            tref=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, tref.getTree());
            pushFollow(FOLLOW_identifierRule_in_interfaceMethod2786);
            methodname=identifierRule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, methodname.getTree());
            if ( state.backtracking==0 ) {
              retval.element = createNormalMethod(new SimpleNameMethodHeader((methodname!=null?input.toString(methodname.start,methodname.stop):null), tref.element));
              	    ((MethodScope_scope)MethodScope_stack.peek()).method = retval.element;
              	    setName(retval.element,methodname.start);
              	   
            }
            pushFollow(FOLLOW_interfaceMethodDeclaratorRest_in_interfaceMethod2798);
            interfaceMethodDeclaratorRest43=interfaceMethodDeclaratorRest();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, interfaceMethodDeclaratorRest43.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 42, interfaceMethod_StartIndex); }
            MethodScope_stack.pop();

        }
        return retval;
    }
    // $ANTLR end "interfaceMethod"

    public static class methodDeclaratorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "methodDeclaratorRest"
    // JavaP.g:791:1: methodDeclaratorRest : pars= formalParameters ( '[' ']' )* (thrkw= 'throws' names= qualifiedNameList )? (body= methodBody | ';' ) ;
    public final Java_JavaP.methodDeclaratorRest_return methodDeclaratorRest() throws RecognitionException {
        Java_JavaP.methodDeclaratorRest_return retval = new Java_JavaP.methodDeclaratorRest_return();
        retval.start = input.LT(1);
        int methodDeclaratorRest_StartIndex = input.index();
        Object root_0 = null;

        Token thrkw=null;
        Token char_literal44=null;
        Token char_literal45=null;
        Token char_literal46=null;
        Java_JavaP.formalParameters_return pars = null;

        Java_JavaP.qualifiedNameList_return names = null;

        Java_JavaP.methodBody_return body = null;


        Object thrkw_tree=null;
        Object char_literal44_tree=null;
        Object char_literal45_tree=null;
        Object char_literal46_tree=null;

        int count = 0;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 43) ) { return retval; }
            // JavaP.g:793:5: (pars= formalParameters ( '[' ']' )* (thrkw= 'throws' names= qualifiedNameList )? (body= methodBody | ';' ) )
            // JavaP.g:793:9: pars= formalParameters ( '[' ']' )* (thrkw= 'throws' names= qualifiedNameList )? (body= methodBody | ';' )
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_formalParameters_in_methodDeclaratorRest2821);
            pars=formalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pars.getTree());
            if ( state.backtracking==0 ) {
              for(FormalParameter par: pars.element){
                             ((MethodScope_scope)MethodScope_stack.peek()).method.header().addFormalParameter(par);
                          }
                         
            }
            // JavaP.g:798:9: ( '[' ']' )*
            loop48:
            do {
                int alt48=2;
                int LA48_0 = input.LA(1);

                if ( (LA48_0==70) ) {
                    alt48=1;
                }


                switch (alt48) {
            	case 1 :
            	    // JavaP.g:798:10: '[' ']'
            	    {
            	    char_literal44=(Token)match(input,70,FOLLOW_70_in_methodDeclaratorRest2845); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal44_tree = (Object)adaptor.create(char_literal44);
            	    adaptor.addChild(root_0, char_literal44_tree);
            	    }
            	    char_literal45=(Token)match(input,71,FOLLOW_71_in_methodDeclaratorRest2847); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal45_tree = (Object)adaptor.create(char_literal45);
            	    adaptor.addChild(root_0, char_literal45_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	      count++;
            	    }

            	    }
            	    break;

            	default :
            	    break loop48;
                }
            } while (true);

            if ( state.backtracking==0 ) {
              if(count > 0) {
                         JavaTypeReference original = (JavaTypeReference)((MethodScope_scope)MethodScope_stack.peek()).method.returnTypeReference();
                         ((MethodScope_scope)MethodScope_stack.peek()).method.setReturnTypeReference(new ArrayTypeReference(original,count));
                       }
                      
            }
            // JavaP.g:804:9: (thrkw= 'throws' names= qualifiedNameList )?
            int alt49=2;
            int LA49_0 = input.LA(1);

            if ( (LA49_0==72) ) {
                alt49=1;
            }
            switch (alt49) {
                case 1 :
                    // JavaP.g:804:10: thrkw= 'throws' names= qualifiedNameList
                    {
                    thrkw=(Token)match(input,72,FOLLOW_72_in_methodDeclaratorRest2874); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    thrkw_tree = (Object)adaptor.create(thrkw);
                    adaptor.addChild(root_0, thrkw_tree);
                    }
                    pushFollow(FOLLOW_qualifiedNameList_in_methodDeclaratorRest2878);
                    names=qualifiedNameList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, names.getTree());
                    if ( state.backtracking==0 ) {
                       ExceptionClause clause = new ExceptionClause(); for(String name: names.element){clause.add(new TypeExceptionDeclaration(typeRef(name)));((MethodScope_scope)MethodScope_stack.peek()).method.setExceptionClause(clause);}
                    }

                    }
                    break;

            }

            // JavaP.g:805:9: (body= methodBody | ';' )
            int alt50=2;
            int LA50_0 = input.LA(1);

            if ( (LA50_0==66) ) {
                alt50=1;
            }
            else if ( (LA50_0==48) ) {
                alt50=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 50, 0, input);

                throw nvae;
            }
            switch (alt50) {
                case 1 :
                    // JavaP.g:805:13: body= methodBody
                    {
                    pushFollow(FOLLOW_methodBody_in_methodDeclaratorRest2898);
                    body=methodBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, body.getTree());
                    if ( state.backtracking==0 ) {
                      ((MethodScope_scope)MethodScope_stack.peek()).method.setImplementation(new RegularImplementation(body.element));
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:806:13: ';'
                    {
                    char_literal46=(Token)match(input,48,FOLLOW_48_in_methodDeclaratorRest2914); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal46_tree = (Object)adaptor.create(char_literal46);
                    adaptor.addChild(root_0, char_literal46_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ((MethodScope_scope)MethodScope_stack.peek()).method.setImplementation(null);
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              setKeyword(((MethodScope_scope)MethodScope_stack.peek()).method,thrkw);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 43, methodDeclaratorRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "methodDeclaratorRest"

    public static class voidMethodDeclaratorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "voidMethodDeclaratorRest"
    // JavaP.g:811:1: voidMethodDeclaratorRest : pars= formalParameters (thrkw= 'throws' names= qualifiedNameList )? (body= methodBody | ';' ) ;
    public final Java_JavaP.voidMethodDeclaratorRest_return voidMethodDeclaratorRest() throws RecognitionException {
        Java_JavaP.voidMethodDeclaratorRest_return retval = new Java_JavaP.voidMethodDeclaratorRest_return();
        retval.start = input.LT(1);
        int voidMethodDeclaratorRest_StartIndex = input.index();
        Object root_0 = null;

        Token thrkw=null;
        Token char_literal47=null;
        Java_JavaP.formalParameters_return pars = null;

        Java_JavaP.qualifiedNameList_return names = null;

        Java_JavaP.methodBody_return body = null;


        Object thrkw_tree=null;
        Object char_literal47_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 44) ) { return retval; }
            // JavaP.g:812:5: (pars= formalParameters (thrkw= 'throws' names= qualifiedNameList )? (body= methodBody | ';' ) )
            // JavaP.g:812:9: pars= formalParameters (thrkw= 'throws' names= qualifiedNameList )? (body= methodBody | ';' )
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_formalParameters_in_voidMethodDeclaratorRest2957);
            pars=formalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pars.getTree());
            if ( state.backtracking==0 ) {

                       // On parse error, this may get executed even without a match.
                       if(pars != null) {
                       for(FormalParameter par: pars.element){
                          ((MethodScope_scope)MethodScope_stack.peek()).method.header().addFormalParameter(par);
                       }
                       }
                     
            }
            // JavaP.g:820:10: (thrkw= 'throws' names= qualifiedNameList )?
            int alt51=2;
            int LA51_0 = input.LA(1);

            if ( (LA51_0==72) ) {
                alt51=1;
            }
            switch (alt51) {
                case 1 :
                    // JavaP.g:820:11: thrkw= 'throws' names= qualifiedNameList
                    {
                    thrkw=(Token)match(input,72,FOLLOW_72_in_voidMethodDeclaratorRest2973); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    thrkw_tree = (Object)adaptor.create(thrkw);
                    adaptor.addChild(root_0, thrkw_tree);
                    }
                    pushFollow(FOLLOW_qualifiedNameList_in_voidMethodDeclaratorRest2977);
                    names=qualifiedNameList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, names.getTree());
                    if ( state.backtracking==0 ) {
                       ExceptionClause clause = new ExceptionClause(); for(String name: names.element){clause.add(new TypeExceptionDeclaration(typeRef(name)));((MethodScope_scope)MethodScope_stack.peek()).method.setExceptionClause(clause);}
                    }

                    }
                    break;

            }

            // JavaP.g:821:9: (body= methodBody | ';' )
            int alt52=2;
            int LA52_0 = input.LA(1);

            if ( (LA52_0==66) ) {
                alt52=1;
            }
            else if ( (LA52_0==48) ) {
                alt52=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 52, 0, input);

                throw nvae;
            }
            switch (alt52) {
                case 1 :
                    // JavaP.g:821:13: body= methodBody
                    {
                    pushFollow(FOLLOW_methodBody_in_voidMethodDeclaratorRest2997);
                    body=methodBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, body.getTree());
                    if ( state.backtracking==0 ) {
                      ((MethodScope_scope)MethodScope_stack.peek()).method.setImplementation(new RegularImplementation(body.element));
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:822:13: ';'
                    {
                    char_literal47=(Token)match(input,48,FOLLOW_48_in_voidMethodDeclaratorRest3013); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal47_tree = (Object)adaptor.create(char_literal47);
                    adaptor.addChild(root_0, char_literal47_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ((MethodScope_scope)MethodScope_stack.peek()).method.setImplementation(null);
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              setKeyword(((MethodScope_scope)MethodScope_stack.peek()).method,thrkw);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 44, voidMethodDeclaratorRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "voidMethodDeclaratorRest"

    public static class interfaceMethodDeclaratorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceMethodDeclaratorRest"
    // JavaP.g:827:1: interfaceMethodDeclaratorRest : pars= formalParameters ( '[' ']' )* (thrkw= 'throws' names= qualifiedNameList )? ';' ;
    public final Java_JavaP.interfaceMethodDeclaratorRest_return interfaceMethodDeclaratorRest() throws RecognitionException {
        Java_JavaP.interfaceMethodDeclaratorRest_return retval = new Java_JavaP.interfaceMethodDeclaratorRest_return();
        retval.start = input.LT(1);
        int interfaceMethodDeclaratorRest_StartIndex = input.index();
        Object root_0 = null;

        Token thrkw=null;
        Token char_literal48=null;
        Token char_literal49=null;
        Token char_literal50=null;
        Java_JavaP.formalParameters_return pars = null;

        Java_JavaP.qualifiedNameList_return names = null;


        Object thrkw_tree=null;
        Object char_literal48_tree=null;
        Object char_literal49_tree=null;
        Object char_literal50_tree=null;

        int count = 0;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 45) ) { return retval; }
            // JavaP.g:829:5: (pars= formalParameters ( '[' ']' )* (thrkw= 'throws' names= qualifiedNameList )? ';' )
            // JavaP.g:829:9: pars= formalParameters ( '[' ']' )* (thrkw= 'throws' names= qualifiedNameList )? ';'
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_formalParameters_in_interfaceMethodDeclaratorRest3060);
            pars=formalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pars.getTree());
            if ( state.backtracking==0 ) {
              for(FormalParameter par: pars.element){((MethodScope_scope)MethodScope_stack.peek()).method.header().addFormalParameter(par);}
            }
            // JavaP.g:830:8: ( '[' ']' )*
            loop53:
            do {
                int alt53=2;
                int LA53_0 = input.LA(1);

                if ( (LA53_0==70) ) {
                    alt53=1;
                }


                switch (alt53) {
            	case 1 :
            	    // JavaP.g:830:9: '[' ']'
            	    {
            	    char_literal48=(Token)match(input,70,FOLLOW_70_in_interfaceMethodDeclaratorRest3072); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal48_tree = (Object)adaptor.create(char_literal48);
            	    adaptor.addChild(root_0, char_literal48_tree);
            	    }
            	    char_literal49=(Token)match(input,71,FOLLOW_71_in_interfaceMethodDeclaratorRest3074); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal49_tree = (Object)adaptor.create(char_literal49);
            	    adaptor.addChild(root_0, char_literal49_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	      count++;
            	    }

            	    }
            	    break;

            	default :
            	    break loop53;
                }
            } while (true);

            if ( state.backtracking==0 ) {
              if(count > 0) {
                        JavaTypeReference original = (JavaTypeReference)((MethodScope_scope)MethodScope_stack.peek()).method.returnTypeReference();
                        ((MethodScope_scope)MethodScope_stack.peek()).method.setReturnTypeReference(new ArrayTypeReference(original,count));
                      }
                     
            }
            // JavaP.g:836:9: (thrkw= 'throws' names= qualifiedNameList )?
            int alt54=2;
            int LA54_0 = input.LA(1);

            if ( (LA54_0==72) ) {
                alt54=1;
            }
            switch (alt54) {
                case 1 :
                    // JavaP.g:836:10: thrkw= 'throws' names= qualifiedNameList
                    {
                    thrkw=(Token)match(input,72,FOLLOW_72_in_interfaceMethodDeclaratorRest3100); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    thrkw_tree = (Object)adaptor.create(thrkw);
                    adaptor.addChild(root_0, thrkw_tree);
                    }
                    pushFollow(FOLLOW_qualifiedNameList_in_interfaceMethodDeclaratorRest3104);
                    names=qualifiedNameList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, names.getTree());
                    if ( state.backtracking==0 ) {
                       ExceptionClause clause = new ExceptionClause(); for(String name: names.element){clause.add(new TypeExceptionDeclaration(typeRef(name)));((MethodScope_scope)MethodScope_stack.peek()).method.setExceptionClause(clause);}
                    }

                    }
                    break;

            }

            char_literal50=(Token)match(input,48,FOLLOW_48_in_interfaceMethodDeclaratorRest3110); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal50_tree = (Object)adaptor.create(char_literal50);
            adaptor.addChild(root_0, char_literal50_tree);
            }
            if ( state.backtracking==0 ) {
              setKeyword(((MethodScope_scope)MethodScope_stack.peek()).method,thrkw);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 45, interfaceMethodDeclaratorRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceMethodDeclaratorRest"

    public static class interfaceGenericMethodDecl_return extends ParserRuleReturnScope {
        public TypeElement element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "interfaceGenericMethodDecl"
    // JavaP.g:840:1: interfaceGenericMethodDecl returns [TypeElement element] : typeParameters ( type | 'void' ) identifierRule interfaceMethodDeclaratorRest ;
    public final Java_JavaP.interfaceGenericMethodDecl_return interfaceGenericMethodDecl() throws RecognitionException {
        Java_JavaP.interfaceGenericMethodDecl_return retval = new Java_JavaP.interfaceGenericMethodDecl_return();
        retval.start = input.LT(1);
        int interfaceGenericMethodDecl_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal53=null;
        Java_JavaP.typeParameters_return typeParameters51 = null;

        Java_JavaP.type_return type52 = null;

        Java_JavaP.identifierRule_return identifierRule54 = null;

        Java_JavaP.interfaceMethodDeclaratorRest_return interfaceMethodDeclaratorRest55 = null;


        Object string_literal53_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 46) ) { return retval; }
            // JavaP.g:841:5: ( typeParameters ( type | 'void' ) identifierRule interfaceMethodDeclaratorRest )
            // JavaP.g:841:9: typeParameters ( type | 'void' ) identifierRule interfaceMethodDeclaratorRest
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_typeParameters_in_interfaceGenericMethodDecl3142);
            typeParameters51=typeParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, typeParameters51.getTree());
            // JavaP.g:841:24: ( type | 'void' )
            int alt55=2;
            int LA55_0 = input.LA(1);

            if ( (LA55_0==Identifier||(LA55_0>=80 && LA55_0<=87)) ) {
                alt55=1;
            }
            else if ( (LA55_0==69) ) {
                alt55=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 55, 0, input);

                throw nvae;
            }
            switch (alt55) {
                case 1 :
                    // JavaP.g:841:25: type
                    {
                    pushFollow(FOLLOW_type_in_interfaceGenericMethodDecl3145);
                    type52=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, type52.getTree());

                    }
                    break;
                case 2 :
                    // JavaP.g:841:32: 'void'
                    {
                    string_literal53=(Token)match(input,69,FOLLOW_69_in_interfaceGenericMethodDecl3149); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal53_tree = (Object)adaptor.create(string_literal53);
                    adaptor.addChild(root_0, string_literal53_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_identifierRule_in_interfaceGenericMethodDecl3152);
            identifierRule54=identifierRule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifierRule54.getTree());
            pushFollow(FOLLOW_interfaceMethodDeclaratorRest_in_interfaceGenericMethodDecl3162);
            interfaceMethodDeclaratorRest55=interfaceMethodDeclaratorRest();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, interfaceMethodDeclaratorRest55.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 46, interfaceGenericMethodDecl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceGenericMethodDecl"

    public static class voidInterfaceMethodDeclaratorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "voidInterfaceMethodDeclaratorRest"
    // JavaP.g:845:1: voidInterfaceMethodDeclaratorRest : pars= formalParameters ( 'throws' names= qualifiedNameList )? ';' ;
    public final Java_JavaP.voidInterfaceMethodDeclaratorRest_return voidInterfaceMethodDeclaratorRest() throws RecognitionException {
        Java_JavaP.voidInterfaceMethodDeclaratorRest_return retval = new Java_JavaP.voidInterfaceMethodDeclaratorRest_return();
        retval.start = input.LT(1);
        int voidInterfaceMethodDeclaratorRest_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal56=null;
        Token char_literal57=null;
        Java_JavaP.formalParameters_return pars = null;

        Java_JavaP.qualifiedNameList_return names = null;


        Object string_literal56_tree=null;
        Object char_literal57_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 47) ) { return retval; }
            // JavaP.g:846:5: (pars= formalParameters ( 'throws' names= qualifiedNameList )? ';' )
            // JavaP.g:846:9: pars= formalParameters ( 'throws' names= qualifiedNameList )? ';'
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_formalParameters_in_voidInterfaceMethodDeclaratorRest3183);
            pars=formalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pars.getTree());
            if ( state.backtracking==0 ) {
              for(FormalParameter par: pars.element){((MethodScope_scope)MethodScope_stack.peek()).method.header().addFormalParameter(par);}
            }
            // JavaP.g:847:6: ( 'throws' names= qualifiedNameList )?
            int alt56=2;
            int LA56_0 = input.LA(1);

            if ( (LA56_0==72) ) {
                alt56=1;
            }
            switch (alt56) {
                case 1 :
                    // JavaP.g:847:7: 'throws' names= qualifiedNameList
                    {
                    string_literal56=(Token)match(input,72,FOLLOW_72_in_voidInterfaceMethodDeclaratorRest3193); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal56_tree = (Object)adaptor.create(string_literal56);
                    adaptor.addChild(root_0, string_literal56_tree);
                    }
                    pushFollow(FOLLOW_qualifiedNameList_in_voidInterfaceMethodDeclaratorRest3197);
                    names=qualifiedNameList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, names.getTree());
                    if ( state.backtracking==0 ) {
                       ExceptionClause clause = new ExceptionClause(); for(String name: names.element){clause.add(new TypeExceptionDeclaration(typeRef(name)));((MethodScope_scope)MethodScope_stack.peek()).method.setExceptionClause(clause);}
                    }

                    }
                    break;

            }

            char_literal57=(Token)match(input,48,FOLLOW_48_in_voidInterfaceMethodDeclaratorRest3209); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal57_tree = (Object)adaptor.create(char_literal57);
            adaptor.addChild(root_0, char_literal57_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 47, voidInterfaceMethodDeclaratorRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "voidInterfaceMethodDeclaratorRest"

    public static class constructorDeclaratorRest_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constructorDeclaratorRest"
    // JavaP.g:851:1: constructorDeclaratorRest : pars= formalParameters ( 'throws' names= qualifiedNameList )? body= constructorBody ;
    public final Java_JavaP.constructorDeclaratorRest_return constructorDeclaratorRest() throws RecognitionException {
        Java_JavaP.constructorDeclaratorRest_return retval = new Java_JavaP.constructorDeclaratorRest_return();
        retval.start = input.LT(1);
        int constructorDeclaratorRest_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal58=null;
        Java_JavaP.formalParameters_return pars = null;

        Java_JavaP.qualifiedNameList_return names = null;

        Java_JavaP.constructorBody_return body = null;


        Object string_literal58_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 48) ) { return retval; }
            // JavaP.g:852:5: (pars= formalParameters ( 'throws' names= qualifiedNameList )? body= constructorBody )
            // JavaP.g:852:9: pars= formalParameters ( 'throws' names= qualifiedNameList )? body= constructorBody
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_formalParameters_in_constructorDeclaratorRest3230);
            pars=formalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, pars.getTree());
            if ( state.backtracking==0 ) {
              for(FormalParameter par: pars.element){((MethodScope_scope)MethodScope_stack.peek()).method.header().addFormalParameter(par);}
            }
            // JavaP.g:853:5: ( 'throws' names= qualifiedNameList )?
            int alt57=2;
            int LA57_0 = input.LA(1);

            if ( (LA57_0==72) ) {
                alt57=1;
            }
            switch (alt57) {
                case 1 :
                    // JavaP.g:853:6: 'throws' names= qualifiedNameList
                    {
                    string_literal58=(Token)match(input,72,FOLLOW_72_in_constructorDeclaratorRest3239); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal58_tree = (Object)adaptor.create(string_literal58);
                    adaptor.addChild(root_0, string_literal58_tree);
                    }
                    pushFollow(FOLLOW_qualifiedNameList_in_constructorDeclaratorRest3243);
                    names=qualifiedNameList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, names.getTree());
                    if ( state.backtracking==0 ) {
                       ExceptionClause clause = new ExceptionClause(); for(String name: names.element){clause.add(new TypeExceptionDeclaration(typeRef(name)));((MethodScope_scope)MethodScope_stack.peek()).method.setExceptionClause(clause);}
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_constructorBody_in_constructorDeclaratorRest3256);
            body=constructorBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, body.getTree());
            if ( state.backtracking==0 ) {
              ((MethodScope_scope)MethodScope_stack.peek()).method.setImplementation(new RegularImplementation(body.element));
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 48, constructorDeclaratorRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constructorDeclaratorRest"

    public static class constantDeclarator_return extends ParserRuleReturnScope {
        public JavaVariableDeclaration element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constantDeclarator"
    // JavaP.g:857:1: constantDeclarator returns [JavaVariableDeclaration element] : name= identifierRule ( ( '[' ']' )* '=' init= variableInitializer ) ;
    public final Java_JavaP.constantDeclarator_return constantDeclarator() throws RecognitionException {
        Java_JavaP.constantDeclarator_return retval = new Java_JavaP.constantDeclarator_return();
        retval.start = input.LT(1);
        int constantDeclarator_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal59=null;
        Token char_literal60=null;
        Token char_literal61=null;
        Java_JavaP.identifierRule_return name = null;

        Java_JavaP.variableInitializer_return init = null;


        Object char_literal59_tree=null;
        Object char_literal60_tree=null;
        Object char_literal61_tree=null;

        int count = 0;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 49) ) { return retval; }
            // JavaP.g:860:5: (name= identifierRule ( ( '[' ']' )* '=' init= variableInitializer ) )
            // JavaP.g:860:9: name= identifierRule ( ( '[' ']' )* '=' init= variableInitializer )
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_identifierRule_in_constantDeclarator3291);
            name=identifierRule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name.getTree());
            // JavaP.g:860:29: ( ( '[' ']' )* '=' init= variableInitializer )
            // JavaP.g:860:30: ( '[' ']' )* '=' init= variableInitializer
            {
            // JavaP.g:860:30: ( '[' ']' )*
            loop58:
            do {
                int alt58=2;
                int LA58_0 = input.LA(1);

                if ( (LA58_0==70) ) {
                    alt58=1;
                }


                switch (alt58) {
            	case 1 :
            	    // JavaP.g:860:31: '[' ']'
            	    {
            	    char_literal59=(Token)match(input,70,FOLLOW_70_in_constantDeclarator3295); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal59_tree = (Object)adaptor.create(char_literal59);
            	    adaptor.addChild(root_0, char_literal59_tree);
            	    }
            	    char_literal60=(Token)match(input,71,FOLLOW_71_in_constantDeclarator3297); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal60_tree = (Object)adaptor.create(char_literal60);
            	    adaptor.addChild(root_0, char_literal60_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	      count++;
            	    }

            	    }
            	    break;

            	default :
            	    break loop58;
                }
            } while (true);

            char_literal61=(Token)match(input,73,FOLLOW_73_in_constantDeclarator3303); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal61_tree = (Object)adaptor.create(char_literal61);
            adaptor.addChild(root_0, char_literal61_tree);
            }
            pushFollow(FOLLOW_variableInitializer_in_constantDeclarator3307);
            init=variableInitializer();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, init.getTree());

            }

            if ( state.backtracking==0 ) {
              retval.element = new JavaVariableDeclaration((name!=null?input.toString(name.start,name.stop):null));
                      retval.element.setArrayDimension(count);
                      retval.element.setInitialization(init.element);
                      setName(retval.element, name.start);
                      
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              setLocation(retval.element, (CommonToken)retval.start, (CommonToken)retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 49, constantDeclarator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constantDeclarator"

    public static class variableDeclarators_return extends ParserRuleReturnScope {
        public List<VariableDeclaration> element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableDeclarators"
    // JavaP.g:868:1: variableDeclarators returns [List<VariableDeclaration> element] : decl= variableDeclarator ( ',' decll= variableDeclarator )* ;
    public final Java_JavaP.variableDeclarators_return variableDeclarators() throws RecognitionException {
        Java_JavaP.variableDeclarators_return retval = new Java_JavaP.variableDeclarators_return();
        retval.start = input.LT(1);
        int variableDeclarators_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal62=null;
        Java_JavaP.variableDeclarator_return decl = null;

        Java_JavaP.variableDeclarator_return decll = null;


        Object char_literal62_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 50) ) { return retval; }
            // JavaP.g:869:5: (decl= variableDeclarator ( ',' decll= variableDeclarator )* )
            // JavaP.g:869:9: decl= variableDeclarator ( ',' decll= variableDeclarator )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_variableDeclarator_in_variableDeclarators3342);
            decl=variableDeclarator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, decl.getTree());
            if ( state.backtracking==0 ) {
              retval.element = new ArrayList<VariableDeclaration>(); retval.element.add(decl.element);
            }
            // JavaP.g:869:123: ( ',' decll= variableDeclarator )*
            loop59:
            do {
                int alt59=2;
                int LA59_0 = input.LA(1);

                if ( (LA59_0==63) ) {
                    alt59=1;
                }


                switch (alt59) {
            	case 1 :
            	    // JavaP.g:869:124: ',' decll= variableDeclarator
            	    {
            	    char_literal62=(Token)match(input,63,FOLLOW_63_in_variableDeclarators3346); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal62_tree = (Object)adaptor.create(char_literal62);
            	    adaptor.addChild(root_0, char_literal62_tree);
            	    }
            	    pushFollow(FOLLOW_variableDeclarator_in_variableDeclarators3350);
            	    decll=variableDeclarator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, decll.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.element.add(decll.element);
            	    }

            	    }
            	    break;

            	default :
            	    break loop59;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 50, variableDeclarators_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variableDeclarators"

    public static class variableDeclarator_return extends ParserRuleReturnScope {
        public JavaVariableDeclaration element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableDeclarator"
    // JavaP.g:872:1: variableDeclarator returns [JavaVariableDeclaration element] : id= variableDeclaratorId ( '=' init= variableInitializer )? ;
    public final Java_JavaP.variableDeclarator_return variableDeclarator() throws RecognitionException {
        Java_JavaP.variableDeclarator_return retval = new Java_JavaP.variableDeclarator_return();
        retval.start = input.LT(1);
        int variableDeclarator_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal63=null;
        Java_JavaP.variableDeclaratorId_return id = null;

        Java_JavaP.variableInitializer_return init = null;


        Object char_literal63_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 51) ) { return retval; }
            // JavaP.g:874:5: (id= variableDeclaratorId ( '=' init= variableInitializer )? )
            // JavaP.g:874:9: id= variableDeclaratorId ( '=' init= variableInitializer )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_variableDeclaratorId_in_variableDeclarator3383);
            id=variableDeclaratorId();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, id.getTree());
            if ( state.backtracking==0 ) {
              retval.element = new JavaVariableDeclaration(id.element.name());
                            retval.element.setArrayDimension(id.element.dimension());
                            setName(retval.element, id.element.nameToken());
                            
            }
            // JavaP.g:878:17: ( '=' init= variableInitializer )?
            int alt60=2;
            int LA60_0 = input.LA(1);

            if ( (LA60_0==73) ) {
                alt60=1;
            }
            switch (alt60) {
                case 1 :
                    // JavaP.g:878:18: '=' init= variableInitializer
                    {
                    char_literal63=(Token)match(input,73,FOLLOW_73_in_variableDeclarator3401); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal63_tree = (Object)adaptor.create(char_literal63);
                    adaptor.addChild(root_0, char_literal63_tree);
                    }
                    pushFollow(FOLLOW_variableInitializer_in_variableDeclarator3405);
                    init=variableInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, init.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element.setInitialization(init.element);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              setLocation(retval.element, (CommonToken)retval.start, (CommonToken)retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 51, variableDeclarator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variableDeclarator"

    public static class variableDeclaratorId_return extends ParserRuleReturnScope {
        public StupidVariableDeclaratorId element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableDeclaratorId"
    // JavaP.g:883:1: variableDeclaratorId returns [StupidVariableDeclaratorId element] : name= identifierRule ( '[' ']' )* ;
    public final Java_JavaP.variableDeclaratorId_return variableDeclaratorId() throws RecognitionException {
        Java_JavaP.variableDeclaratorId_return retval = new Java_JavaP.variableDeclaratorId_return();
        retval.start = input.LT(1);
        int variableDeclaratorId_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal64=null;
        Token char_literal65=null;
        Java_JavaP.identifierRule_return name = null;


        Object char_literal64_tree=null;
        Object char_literal65_tree=null;

        int count = 0;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 52) ) { return retval; }
            // JavaP.g:885:5: (name= identifierRule ( '[' ']' )* )
            // JavaP.g:885:9: name= identifierRule ( '[' ']' )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_identifierRule_in_variableDeclaratorId3440);
            name=identifierRule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name.getTree());
            // JavaP.g:885:29: ( '[' ']' )*
            loop61:
            do {
                int alt61=2;
                int LA61_0 = input.LA(1);

                if ( (LA61_0==70) ) {
                    alt61=1;
                }


                switch (alt61) {
            	case 1 :
            	    // JavaP.g:885:30: '[' ']'
            	    {
            	    char_literal64=(Token)match(input,70,FOLLOW_70_in_variableDeclaratorId3443); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal64_tree = (Object)adaptor.create(char_literal64);
            	    adaptor.addChild(root_0, char_literal64_tree);
            	    }
            	    char_literal65=(Token)match(input,71,FOLLOW_71_in_variableDeclaratorId3445); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal65_tree = (Object)adaptor.create(char_literal65);
            	    adaptor.addChild(root_0, char_literal65_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	      count++;
            	    }

            	    }
            	    break;

            	default :
            	    break loop61;
                }
            } while (true);

            if ( state.backtracking==0 ) {
               retval.element = new StupidVariableDeclaratorId((name!=null?input.toString(name.start,name.stop):null), count,(CommonToken)name.start);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 52, variableDeclaratorId_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variableDeclaratorId"

    public static class variableInitializer_return extends ParserRuleReturnScope {
        public Expression element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableInitializer"
    // JavaP.g:888:1: variableInitializer returns [Expression element] : (init= arrayInitializer | expr= expression );
    public final Java_JavaP.variableInitializer_return variableInitializer() throws RecognitionException {
        Java_JavaP.variableInitializer_return retval = new Java_JavaP.variableInitializer_return();
        retval.start = input.LT(1);
        int variableInitializer_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.arrayInitializer_return init = null;

        Java_JavaP.expression_return expr = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 53) ) { return retval; }
            // JavaP.g:889:5: (init= arrayInitializer | expr= expression )
            int alt62=2;
            int LA62_0 = input.LA(1);

            if ( (LA62_0==66) ) {
                alt62=1;
            }
            else if ( (LA62_0==IntegerLiteral||LA62_0==FloatingPointLiteral||(LA62_0>=CharacterLiteral && LA62_0<=StringLiteral)||LA62_0==Identifier||LA62_0==69||(LA62_0>=80 && LA62_0<=87)||(LA62_0>=89 && LA62_0<=90)||(LA62_0>=93 && LA62_0<=96)||(LA62_0>=127 && LA62_0<=128)||(LA62_0>=131 && LA62_0<=135)) ) {
                alt62=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 62, 0, input);

                throw nvae;
            }
            switch (alt62) {
                case 1 :
                    // JavaP.g:889:9: init= arrayInitializer
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_arrayInitializer_in_variableInitializer3476);
                    init=arrayInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, init.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = init.element;
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:890:9: expr= expression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_expression_in_variableInitializer3490);
                    expr=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = expr.element;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 53, variableInitializer_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variableInitializer"

    public static class arrayInitializer_return extends ParserRuleReturnScope {
        public ArrayInitializer element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arrayInitializer"
    // JavaP.g:893:1: arrayInitializer returns [ArrayInitializer element] : '{' (init= variableInitializer ( ',' initt= variableInitializer )* ( ',' )? )? '}' ;
    public final Java_JavaP.arrayInitializer_return arrayInitializer() throws RecognitionException {
        Java_JavaP.arrayInitializer_return retval = new Java_JavaP.arrayInitializer_return();
        retval.start = input.LT(1);
        int arrayInitializer_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal66=null;
        Token char_literal67=null;
        Token char_literal68=null;
        Token char_literal69=null;
        Java_JavaP.variableInitializer_return init = null;

        Java_JavaP.variableInitializer_return initt = null;


        Object char_literal66_tree=null;
        Object char_literal67_tree=null;
        Object char_literal68_tree=null;
        Object char_literal69_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 54) ) { return retval; }
            // JavaP.g:894:5: ( '{' (init= variableInitializer ( ',' initt= variableInitializer )* ( ',' )? )? '}' )
            // JavaP.g:894:9: '{' (init= variableInitializer ( ',' initt= variableInitializer )* ( ',' )? )? '}'
            {
            root_0 = (Object)adaptor.nil();

            char_literal66=(Token)match(input,66,FOLLOW_66_in_arrayInitializer3515); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal66_tree = (Object)adaptor.create(char_literal66);
            adaptor.addChild(root_0, char_literal66_tree);
            }
            if ( state.backtracking==0 ) {
              retval.element = new ArrayInitializer();
            }
            // JavaP.g:894:56: (init= variableInitializer ( ',' initt= variableInitializer )* ( ',' )? )?
            int alt65=2;
            int LA65_0 = input.LA(1);

            if ( (LA65_0==IntegerLiteral||LA65_0==FloatingPointLiteral||(LA65_0>=CharacterLiteral && LA65_0<=StringLiteral)||LA65_0==Identifier||LA65_0==66||LA65_0==69||(LA65_0>=80 && LA65_0<=87)||(LA65_0>=89 && LA65_0<=90)||(LA65_0>=93 && LA65_0<=96)||(LA65_0>=127 && LA65_0<=128)||(LA65_0>=131 && LA65_0<=135)) ) {
                alt65=1;
            }
            switch (alt65) {
                case 1 :
                    // JavaP.g:894:57: init= variableInitializer ( ',' initt= variableInitializer )* ( ',' )?
                    {
                    pushFollow(FOLLOW_variableInitializer_in_arrayInitializer3522);
                    init=variableInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, init.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element.addInitializer(init.element);
                    }
                    // JavaP.g:894:128: ( ',' initt= variableInitializer )*
                    loop63:
                    do {
                        int alt63=2;
                        int LA63_0 = input.LA(1);

                        if ( (LA63_0==63) ) {
                            int LA63_1 = input.LA(2);

                            if ( (LA63_1==IntegerLiteral||LA63_1==FloatingPointLiteral||(LA63_1>=CharacterLiteral && LA63_1<=StringLiteral)||LA63_1==Identifier||LA63_1==66||LA63_1==69||(LA63_1>=80 && LA63_1<=87)||(LA63_1>=89 && LA63_1<=90)||(LA63_1>=93 && LA63_1<=96)||(LA63_1>=127 && LA63_1<=128)||(LA63_1>=131 && LA63_1<=135)) ) {
                                alt63=1;
                            }


                        }


                        switch (alt63) {
                    	case 1 :
                    	    // JavaP.g:894:129: ',' initt= variableInitializer
                    	    {
                    	    char_literal67=(Token)match(input,63,FOLLOW_63_in_arrayInitializer3526); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal67_tree = (Object)adaptor.create(char_literal67);
                    	    adaptor.addChild(root_0, char_literal67_tree);
                    	    }
                    	    pushFollow(FOLLOW_variableInitializer_in_arrayInitializer3530);
                    	    initt=variableInitializer();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, initt.getTree());
                    	    if ( state.backtracking==0 ) {
                    	      retval.element.addInitializer(initt.element);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop63;
                        }
                    } while (true);

                    // JavaP.g:894:208: ( ',' )?
                    int alt64=2;
                    int LA64_0 = input.LA(1);

                    if ( (LA64_0==63) ) {
                        alt64=1;
                    }
                    switch (alt64) {
                        case 1 :
                            // JavaP.g:894:209: ','
                            {
                            char_literal68=(Token)match(input,63,FOLLOW_63_in_arrayInitializer3536); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal68_tree = (Object)adaptor.create(char_literal68);
                            adaptor.addChild(root_0, char_literal68_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;

            }

            char_literal69=(Token)match(input,67,FOLLOW_67_in_arrayInitializer3543); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal69_tree = (Object)adaptor.create(char_literal69);
            adaptor.addChild(root_0, char_literal69_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 54, arrayInitializer_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "arrayInitializer"

    public static class modifier_return extends ParserRuleReturnScope {
        public Modifier element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "modifier"
    // JavaP.g:897:1: modifier returns [Modifier element] : (mod= classOrInterfaceModifier | 'native' | 'synchronized' | 'transient' | 'volatile' | 'default' );
    public final Java_JavaP.modifier_return modifier() throws RecognitionException {
        Java_JavaP.modifier_return retval = new Java_JavaP.modifier_return();
        retval.start = input.LT(1);
        int modifier_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal70=null;
        Token string_literal71=null;
        Token string_literal72=null;
        Token string_literal73=null;
        Token string_literal74=null;
        Java_JavaP.classOrInterfaceModifier_return mod = null;


        Object string_literal70_tree=null;
        Object string_literal71_tree=null;
        Object string_literal72_tree=null;
        Object string_literal73_tree=null;
        Object string_literal74_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 55) ) { return retval; }
            // JavaP.g:903:5: (mod= classOrInterfaceModifier | 'native' | 'synchronized' | 'transient' | 'volatile' | 'default' )
            int alt66=6;
            switch ( input.LA(1) ) {
            case 50:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
            case 58:
            case 97:
                {
                alt66=1;
                }
                break;
            case 74:
                {
                alt66=2;
                }
                break;
            case 75:
                {
                alt66=3;
                }
                break;
            case 76:
                {
                alt66=4;
                }
                break;
            case 77:
                {
                alt66=5;
                }
                break;
            case 78:
                {
                alt66=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 66, 0, input);

                throw nvae;
            }

            switch (alt66) {
                case 1 :
                    // JavaP.g:903:9: mod= classOrInterfaceModifier
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_classOrInterfaceModifier_in_modifier3574);
                    mod=classOrInterfaceModifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mod.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = mod.element;
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:904:9: 'native'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal70=(Token)match(input,74,FOLLOW_74_in_modifier3586); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal70_tree = (Object)adaptor.create(string_literal70);
                    adaptor.addChild(root_0, string_literal70_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new Native();
                    }

                    }
                    break;
                case 3 :
                    // JavaP.g:905:9: 'synchronized'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal71=(Token)match(input,75,FOLLOW_75_in_modifier3598); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal71_tree = (Object)adaptor.create(string_literal71);
                    adaptor.addChild(root_0, string_literal71_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new Synchronized();
                    }

                    }
                    break;
                case 4 :
                    // JavaP.g:906:9: 'transient'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal72=(Token)match(input,76,FOLLOW_76_in_modifier3610); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal72_tree = (Object)adaptor.create(string_literal72);
                    adaptor.addChild(root_0, string_literal72_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new Transient();
                    }

                    }
                    break;
                case 5 :
                    // JavaP.g:907:9: 'volatile'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal73=(Token)match(input,77,FOLLOW_77_in_modifier3622); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal73_tree = (Object)adaptor.create(string_literal73);
                    adaptor.addChild(root_0, string_literal73_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new Volatile();
                    }

                    }
                    break;
                case 6 :
                    // JavaP.g:908:9: 'default'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal74=(Token)match(input,78,FOLLOW_78_in_modifier3634); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal74_tree = (Object)adaptor.create(string_literal74);
                    adaptor.addChild(root_0, string_literal74_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new Default();
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              setLocation(retval.element, (CommonToken)retval.start, (CommonToken)retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 55, modifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "modifier"

    public static class enumConstantName_return extends ParserRuleReturnScope {
        public String element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enumConstantName"
    // JavaP.g:911:1: enumConstantName returns [String element] : id= identifierRule ;
    public final Java_JavaP.enumConstantName_return enumConstantName() throws RecognitionException {
        Java_JavaP.enumConstantName_return retval = new Java_JavaP.enumConstantName_return();
        retval.start = input.LT(1);
        int enumConstantName_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.identifierRule_return id = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 56) ) { return retval; }
            // JavaP.g:912:5: (id= identifierRule )
            // JavaP.g:912:9: id= identifierRule
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_identifierRule_in_enumConstantName3661);
            id=identifierRule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, id.getTree());
            if ( state.backtracking==0 ) {
              retval.element=(id!=null?input.toString(id.start,id.stop):null);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 56, enumConstantName_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumConstantName"

    public static class typeName_return extends ParserRuleReturnScope {
        public String element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeName"
    // JavaP.g:915:1: typeName returns [String element] : name= qualifiedName ;
    public final Java_JavaP.typeName_return typeName() throws RecognitionException {
        Java_JavaP.typeName_return retval = new Java_JavaP.typeName_return();
        retval.start = input.LT(1);
        int typeName_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.qualifiedName_return name = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 57) ) { return retval; }
            // JavaP.g:916:5: (name= qualifiedName )
            // JavaP.g:916:9: name= qualifiedName
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_qualifiedName_in_typeName3688);
            name=qualifiedName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name.getTree());
            if ( state.backtracking==0 ) {
              retval.element=name.element;
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 57, typeName_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeName"

    public static class type_return extends ParserRuleReturnScope {
        public JavaTypeReference element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "type"
    // JavaP.g:919:1: type returns [JavaTypeReference element] : (cd= classOrInterfaceType ( '[' ']' )* | pt= primitiveType ( '[' ']' )* );
    public final Java_JavaP.type_return type() throws RecognitionException {
        Java_JavaP.type_return retval = new Java_JavaP.type_return();
        retval.start = input.LT(1);
        int type_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal75=null;
        Token char_literal76=null;
        Token char_literal77=null;
        Token char_literal78=null;
        Java_JavaP.classOrInterfaceType_return cd = null;

        Java_JavaP.primitiveType_return pt = null;


        Object char_literal75_tree=null;
        Object char_literal76_tree=null;
        Object char_literal77_tree=null;
        Object char_literal78_tree=null;

        int dimension=0;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 58) ) { return retval; }
            // JavaP.g:922:2: (cd= classOrInterfaceType ( '[' ']' )* | pt= primitiveType ( '[' ']' )* )
            int alt69=2;
            int LA69_0 = input.LA(1);

            if ( (LA69_0==Identifier) ) {
                alt69=1;
            }
            else if ( ((LA69_0>=80 && LA69_0<=87)) ) {
                alt69=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 69, 0, input);

                throw nvae;
            }
            switch (alt69) {
                case 1 :
                    // JavaP.g:922:4: cd= classOrInterfaceType ( '[' ']' )*
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_classOrInterfaceType_in_type3718);
                    cd=classOrInterfaceType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd.getTree());
                    // JavaP.g:922:28: ( '[' ']' )*
                    loop67:
                    do {
                        int alt67=2;
                        int LA67_0 = input.LA(1);

                        if ( (LA67_0==70) ) {
                            alt67=1;
                        }


                        switch (alt67) {
                    	case 1 :
                    	    // JavaP.g:922:29: '[' ']'
                    	    {
                    	    char_literal75=(Token)match(input,70,FOLLOW_70_in_type3721); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal75_tree = (Object)adaptor.create(char_literal75);
                    	    adaptor.addChild(root_0, char_literal75_tree);
                    	    }
                    	    char_literal76=(Token)match(input,71,FOLLOW_71_in_type3723); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal76_tree = (Object)adaptor.create(char_literal76);
                    	    adaptor.addChild(root_0, char_literal76_tree);
                    	    }
                    	    if ( state.backtracking==0 ) {
                    	      dimension++;
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop67;
                        }
                    } while (true);

                    if ( state.backtracking==0 ) {

                      	         if(dimension > 0) {
                      	           retval.element = cd.element.toArray(dimension);
                      	           cd.element.disconnect();
                      	         } else {
                      	           retval.element = cd.element;
                      	         }
                      	        
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:931:4: pt= primitiveType ( '[' ']' )*
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_primitiveType_in_type3745);
                    pt=primitiveType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pt.getTree());
                    // JavaP.g:931:21: ( '[' ']' )*
                    loop68:
                    do {
                        int alt68=2;
                        int LA68_0 = input.LA(1);

                        if ( (LA68_0==70) ) {
                            alt68=1;
                        }


                        switch (alt68) {
                    	case 1 :
                    	    // JavaP.g:931:22: '[' ']'
                    	    {
                    	    char_literal77=(Token)match(input,70,FOLLOW_70_in_type3748); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal77_tree = (Object)adaptor.create(char_literal77);
                    	    adaptor.addChild(root_0, char_literal77_tree);
                    	    }
                    	    char_literal78=(Token)match(input,71,FOLLOW_71_in_type3750); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal78_tree = (Object)adaptor.create(char_literal78);
                    	    adaptor.addChild(root_0, char_literal78_tree);
                    	    }
                    	    if ( state.backtracking==0 ) {
                    	      dimension++;
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop68;
                        }
                    } while (true);

                    if ( state.backtracking==0 ) {

                      	     if(dimension > 0) {
                      	       retval.element = pt.element.toArray(dimension);
                      	       pt.element.disconnect();
                      	     } else {
                      	           retval.element = pt.element;
                      	     }
                      	   
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              setLocation(retval.element, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 58, type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type"

    public static class possibleUnionType_return extends ParserRuleReturnScope {
        public JavaTypeReference element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "possibleUnionType"
    // JavaP.g:943:1: possibleUnionType returns [JavaTypeReference element] : t= type ( '|' tt= type )* ;
    public final Java_JavaP.possibleUnionType_return possibleUnionType() throws RecognitionException {
        Java_JavaP.possibleUnionType_return retval = new Java_JavaP.possibleUnionType_return();
        retval.start = input.LT(1);
        int possibleUnionType_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal79=null;
        Java_JavaP.type_return t = null;

        Java_JavaP.type_return tt = null;


        Object char_literal79_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 59) ) { return retval; }
            // JavaP.g:944:2: (t= type ( '|' tt= type )* )
            // JavaP.g:944:4: t= type ( '|' tt= type )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_type_in_possibleUnionType3779);
            t=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, t.getTree());
            if ( state.backtracking==0 ) {
              retval.element = (t!=null?t.element:null);
            }
            // JavaP.g:945:4: ( '|' tt= type )*
            loop70:
            do {
                int alt70=2;
                int LA70_0 = input.LA(1);

                if ( (LA70_0==79) ) {
                    alt70=1;
                }


                switch (alt70) {
            	case 1 :
            	    // JavaP.g:945:5: '|' tt= type
            	    {
            	    char_literal79=(Token)match(input,79,FOLLOW_79_in_possibleUnionType3787); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal79_tree = (Object)adaptor.create(char_literal79);
            	    adaptor.addChild(root_0, char_literal79_tree);
            	    }
            	    pushFollow(FOLLOW_type_in_possibleUnionType3791);
            	    tt=type();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, tt.getTree());
            	    if ( state.backtracking==0 ) {
            	      if(! (retval.element instanceof UnionTypeReference)) {
            	             retval.element = new JavaUnionTypeReference();
            	             ((UnionTypeReference)retval.element).add((t!=null?t.element:null));
            	            }
            	            ((UnionTypeReference)retval.element).add((tt!=null?tt.element:null));
            	           
            	    }

            	    }
            	    break;

            	default :
            	    break loop70;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 59, possibleUnionType_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "possibleUnionType"

    public static class classOrInterfaceType_return extends ParserRuleReturnScope {
        public JavaTypeReference element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classOrInterfaceType"
    // JavaP.g:955:1: classOrInterfaceType returns [JavaTypeReference element] : name= identifierRule (args= typeArguments )? ( '.' namex= identifierRule (argsx= typeArguments )? )* ( '&' nttt= classOrInterfaceType )? ;
    public final Java_JavaP.classOrInterfaceType_return classOrInterfaceType() throws RecognitionException {
        Java_JavaP.classOrInterfaceType_return retval = new Java_JavaP.classOrInterfaceType_return();
        retval.start = input.LT(1);
        int classOrInterfaceType_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal80=null;
        Token char_literal81=null;
        Java_JavaP.identifierRule_return name = null;

        Java_JavaP.typeArguments_return args = null;

        Java_JavaP.identifierRule_return namex = null;

        Java_JavaP.typeArguments_return argsx = null;

        Java_JavaP.classOrInterfaceType_return nttt = null;


        Object char_literal80_tree=null;
        Object char_literal81_tree=null;

        CrossReferenceWithTarget target = null;
              Token stop = null;
             
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 60) ) { return retval; }
            // JavaP.g:962:2: (name= identifierRule (args= typeArguments )? ( '.' namex= identifierRule (argsx= typeArguments )? )* ( '&' nttt= classOrInterfaceType )? )
            // JavaP.g:962:4: name= identifierRule (args= typeArguments )? ( '.' namex= identifierRule (argsx= typeArguments )? )* ( '&' nttt= classOrInterfaceType )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_identifierRule_in_classOrInterfaceType3828);
            name=identifierRule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name.getTree());
            if ( state.backtracking==0 ) {

              	           retval.element = typeRef((name!=null?input.toString(name.start,name.stop):null));
              	           target =  (CrossReferenceWithTarget) createTypeReferenceTarget((name!=null?input.toString(name.start,name.stop):null));
              	           stop=name.start;
              	          
            }
            // JavaP.g:968:10: (args= typeArguments )?
            int alt71=2;
            int LA71_0 = input.LA(1);

            if ( (LA71_0==62) ) {
                int LA71_1 = input.LA(2);

                if ( (LA71_1==Identifier||(LA71_1>=80 && LA71_1<=88)) ) {
                    alt71=1;
                }
            }
            switch (alt71) {
                case 1 :
                    // JavaP.g:968:11: args= typeArguments
                    {
                    pushFollow(FOLLOW_typeArguments_in_classOrInterfaceType3855);
                    args=typeArguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, args.getTree());
                    if ( state.backtracking==0 ) {

                      	           // Add the type arguments
                      	           ((BasicJavaTypeReference)retval.element).addAllArguments(args.element);
                      	           // In this case, we know that the current element must be a type reference,
                      	           // so we set the target to null, and only create type references afterwards.
                      	           target = (CrossReferenceWithTarget)retval.element;
                      	           stop=args.stop;
                      	          
                    }

                    }
                    break;

            }

            // JavaP.g:977:10: ( '.' namex= identifierRule (argsx= typeArguments )? )*
            loop73:
            do {
                int alt73=2;
                int LA73_0 = input.LA(1);

                if ( (LA73_0==51) ) {
                    int LA73_2 = input.LA(2);

                    if ( (LA73_2==Identifier) ) {
                        alt73=1;
                    }


                }


                switch (alt73) {
            	case 1 :
            	    // JavaP.g:977:11: '.' namex= identifierRule (argsx= typeArguments )?
            	    {
            	    char_literal80=(Token)match(input,51,FOLLOW_51_in_classOrInterfaceType3882); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal80_tree = (Object)adaptor.create(char_literal80);
            	    adaptor.addChild(root_0, char_literal80_tree);
            	    }
            	    pushFollow(FOLLOW_identifierRule_in_classOrInterfaceType3886);
            	    namex=identifierRule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, namex.getTree());
            	    if ( state.backtracking==0 ) {

            	      	           if(target != null) {
            	      	             //retval.element.removeAllMetadata();
            	      	             //for(Element e: retval.element.descendants()) {e.removeAllMetadata();}
            	      	             retval.element = createTypeReference(target,(namex!=null?input.toString(namex.start,namex.stop):null));
            	      	             // We must clone the target here, or else it will be removed from the
            	      	             // type reference we just created.
            	      	             CrossReferenceTarget nt = Util.clone(target);
            	      	             target = (CrossReferenceWithTarget) createTypeReferenceTarget((namex!=null?input.toString(namex.start,namex.stop):null));
            	      	             target.setTarget(nt);
            	      	           } else {
            	      	             throw new Error();
            	      	           }
            	      	           stop=namex.start;
            	      	          
            	    }
            	    // JavaP.g:993:10: (argsx= typeArguments )?
            	    int alt72=2;
            	    int LA72_0 = input.LA(1);

            	    if ( (LA72_0==62) ) {
            	        int LA72_1 = input.LA(2);

            	        if ( (LA72_1==Identifier||(LA72_1>=80 && LA72_1<=88)) ) {
            	            alt72=1;
            	        }
            	    }
            	    switch (alt72) {
            	        case 1 :
            	            // JavaP.g:993:11: argsx= typeArguments
            	            {
            	            pushFollow(FOLLOW_typeArguments_in_classOrInterfaceType3913);
            	            argsx=typeArguments();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, argsx.getTree());
            	            if ( state.backtracking==0 ) {

            	              	           // Add the type arguments
            	                           ((BasicJavaTypeReference)retval.element).addAllArguments(argsx.element);
            	              	           // In this case, we know that the current element must be a type reference,
            	              	           // so we se the target to the current type reference.
            	                           target = (CrossReferenceWithTarget)retval.element;
            	              	           stop = argsx.stop;
            	              	          
            	            }

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop73;
                }
            } while (true);

            // JavaP.g:1002:13: ( '&' nttt= classOrInterfaceType )?
            int alt74=2;
            int LA74_0 = input.LA(1);

            if ( (LA74_0==65) ) {
                int LA74_1 = input.LA(2);

                if ( (LA74_1==Identifier) ) {
                    int LA74_3 = input.LA(3);

                    if ( (synpred92_JavaP()) ) {
                        alt74=1;
                    }
                }
            }
            switch (alt74) {
                case 1 :
                    // JavaP.g:1002:14: '&' nttt= classOrInterfaceType
                    {
                    char_literal81=(Token)match(input,65,FOLLOW_65_in_classOrInterfaceType3943); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal81_tree = (Object)adaptor.create(char_literal81);
                    adaptor.addChild(root_0, char_literal81_tree);
                    }
                    pushFollow(FOLLOW_classOrInterfaceType_in_classOrInterfaceType3947);
                    nttt=classOrInterfaceType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nttt.getTree());
                    if ( state.backtracking==0 ) {
                       
                                          	 List refs = new ArrayList();
                                          	 refs.add(retval.element);
                                          	 refs.add(nttt.element);
                                          	 retval.element = new JavaIntersectionTypeReference(refs);
                      //                       retval.element = (JavaTypeReference)retval.element.intersection(nttt.element); 
                                             stop=nttt.stop;
                      	           
                      	           
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              setLocation(retval.element,name.start,stop);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 60, classOrInterfaceType_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classOrInterfaceType"

    public static class primitiveType_return extends ParserRuleReturnScope {
        public JavaTypeReference element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "primitiveType"
    // JavaP.g:1014:1: primitiveType returns [JavaTypeReference element] : ( 'boolean' | 'char' | 'byte' | 'short' | 'int' | 'long' | 'float' | 'double' );
    public final Java_JavaP.primitiveType_return primitiveType() throws RecognitionException {
        Java_JavaP.primitiveType_return retval = new Java_JavaP.primitiveType_return();
        retval.start = input.LT(1);
        int primitiveType_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal82=null;
        Token string_literal83=null;
        Token string_literal84=null;
        Token string_literal85=null;
        Token string_literal86=null;
        Token string_literal87=null;
        Token string_literal88=null;
        Token string_literal89=null;

        Object string_literal82_tree=null;
        Object string_literal83_tree=null;
        Object string_literal84_tree=null;
        Object string_literal85_tree=null;
        Object string_literal86_tree=null;
        Object string_literal87_tree=null;
        Object string_literal88_tree=null;
        Object string_literal89_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 61) ) { return retval; }
            // JavaP.g:1016:5: ( 'boolean' | 'char' | 'byte' | 'short' | 'int' | 'long' | 'float' | 'double' )
            int alt75=8;
            switch ( input.LA(1) ) {
            case 80:
                {
                alt75=1;
                }
                break;
            case 81:
                {
                alt75=2;
                }
                break;
            case 82:
                {
                alt75=3;
                }
                break;
            case 83:
                {
                alt75=4;
                }
                break;
            case 84:
                {
                alt75=5;
                }
                break;
            case 85:
                {
                alt75=6;
                }
                break;
            case 86:
                {
                alt75=7;
                }
                break;
            case 87:
                {
                alt75=8;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 75, 0, input);

                throw nvae;
            }

            switch (alt75) {
                case 1 :
                    // JavaP.g:1016:9: 'boolean'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal82=(Token)match(input,80,FOLLOW_80_in_primitiveType3986); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal82_tree = (Object)adaptor.create(string_literal82);
                    adaptor.addChild(root_0, string_literal82_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = typeRef("boolean");
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:1017:9: 'char'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal83=(Token)match(input,81,FOLLOW_81_in_primitiveType3998); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal83_tree = (Object)adaptor.create(string_literal83);
                    adaptor.addChild(root_0, string_literal83_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = typeRef("char");
                    }

                    }
                    break;
                case 3 :
                    // JavaP.g:1018:9: 'byte'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal84=(Token)match(input,82,FOLLOW_82_in_primitiveType4010); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal84_tree = (Object)adaptor.create(string_literal84);
                    adaptor.addChild(root_0, string_literal84_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = typeRef("byte");
                    }

                    }
                    break;
                case 4 :
                    // JavaP.g:1019:9: 'short'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal85=(Token)match(input,83,FOLLOW_83_in_primitiveType4022); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal85_tree = (Object)adaptor.create(string_literal85);
                    adaptor.addChild(root_0, string_literal85_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = typeRef("short");
                    }

                    }
                    break;
                case 5 :
                    // JavaP.g:1020:9: 'int'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal86=(Token)match(input,84,FOLLOW_84_in_primitiveType4034); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal86_tree = (Object)adaptor.create(string_literal86);
                    adaptor.addChild(root_0, string_literal86_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = typeRef("int");
                    }

                    }
                    break;
                case 6 :
                    // JavaP.g:1021:9: 'long'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal87=(Token)match(input,85,FOLLOW_85_in_primitiveType4046); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal87_tree = (Object)adaptor.create(string_literal87);
                    adaptor.addChild(root_0, string_literal87_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = typeRef("long");
                    }

                    }
                    break;
                case 7 :
                    // JavaP.g:1022:9: 'float'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal88=(Token)match(input,86,FOLLOW_86_in_primitiveType4058); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal88_tree = (Object)adaptor.create(string_literal88);
                    adaptor.addChild(root_0, string_literal88_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = typeRef("float");
                    }

                    }
                    break;
                case 8 :
                    // JavaP.g:1023:9: 'double'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal89=(Token)match(input,87,FOLLOW_87_in_primitiveType4070); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal89_tree = (Object)adaptor.create(string_literal89);
                    adaptor.addChild(root_0, string_literal89_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = typeRef("double");
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              setLocation(retval.element, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 61, primitiveType_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "primitiveType"

    public static class variableModifier_return extends ParserRuleReturnScope {
        public Modifier element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableModifier"
    // JavaP.g:1026:1: variableModifier returns [Modifier element] : ( 'final' | a= annotation );
    public final Java_JavaP.variableModifier_return variableModifier() throws RecognitionException {
        Java_JavaP.variableModifier_return retval = new Java_JavaP.variableModifier_return();
        retval.start = input.LT(1);
        int variableModifier_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal90=null;
        Java_JavaP.annotation_return a = null;


        Object string_literal90_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 62) ) { return retval; }
            // JavaP.g:1027:5: ( 'final' | a= annotation )
            int alt76=2;
            int LA76_0 = input.LA(1);

            if ( (LA76_0==57) ) {
                alt76=1;
            }
            else if ( (LA76_0==97) ) {
                alt76=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 76, 0, input);

                throw nvae;
            }
            switch (alt76) {
                case 1 :
                    // JavaP.g:1027:9: 'final'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal90=(Token)match(input,57,FOLLOW_57_in_variableModifier4095); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal90_tree = (Object)adaptor.create(string_literal90);
                    adaptor.addChild(root_0, string_literal90_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new Final();
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:1028:9: a= annotation
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_annotation_in_variableModifier4109);
                    a=annotation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = a.element;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 62, variableModifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variableModifier"

    public static class typeArguments_return extends ParserRuleReturnScope {
        public List<TypeArgument> element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeArguments"
    // JavaP.g:1031:1: typeArguments returns [List<TypeArgument> element] : '<' arg= typeArgument ( ',' argx= typeArgument )* '>' ;
    public final Java_JavaP.typeArguments_return typeArguments() throws RecognitionException {
        Java_JavaP.typeArguments_return retval = new Java_JavaP.typeArguments_return();
        retval.start = input.LT(1);
        int typeArguments_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal91=null;
        Token char_literal92=null;
        Token char_literal93=null;
        Java_JavaP.typeArgument_return arg = null;

        Java_JavaP.typeArgument_return argx = null;


        Object char_literal91_tree=null;
        Object char_literal92_tree=null;
        Object char_literal93_tree=null;

        retval.element = new ArrayList<TypeArgument>();
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 63) ) { return retval; }
            // JavaP.g:1033:5: ( '<' arg= typeArgument ( ',' argx= typeArgument )* '>' )
            // JavaP.g:1033:9: '<' arg= typeArgument ( ',' argx= typeArgument )* '>'
            {
            root_0 = (Object)adaptor.nil();

            char_literal91=(Token)match(input,62,FOLLOW_62_in_typeArguments4138); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal91_tree = (Object)adaptor.create(char_literal91);
            adaptor.addChild(root_0, char_literal91_tree);
            }
            pushFollow(FOLLOW_typeArgument_in_typeArguments4150);
            arg=typeArgument();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, arg.getTree());
            if ( state.backtracking==0 ) {
              retval.element.add(arg.element);
            }
            // JavaP.g:1035:9: ( ',' argx= typeArgument )*
            loop77:
            do {
                int alt77=2;
                int LA77_0 = input.LA(1);

                if ( (LA77_0==63) ) {
                    alt77=1;
                }


                switch (alt77) {
            	case 1 :
            	    // JavaP.g:1035:10: ',' argx= typeArgument
            	    {
            	    char_literal92=(Token)match(input,63,FOLLOW_63_in_typeArguments4163); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal92_tree = (Object)adaptor.create(char_literal92);
            	    adaptor.addChild(root_0, char_literal92_tree);
            	    }
            	    pushFollow(FOLLOW_typeArgument_in_typeArguments4167);
            	    argx=typeArgument();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, argx.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.element.add(argx.element);
            	    }

            	    }
            	    break;

            	default :
            	    break loop77;
                }
            } while (true);

            char_literal93=(Token)match(input,64,FOLLOW_64_in_typeArguments4181); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal93_tree = (Object)adaptor.create(char_literal93);
            adaptor.addChild(root_0, char_literal93_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 63, typeArguments_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeArguments"

    public static class typeArgument_return extends ParserRuleReturnScope {
        public TypeArgument element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "typeArgument"
    // JavaP.g:1039:1: typeArgument returns [TypeArgument element] : (t= type | '?' ( ( 'extends' | 'super' ) t= type )? );
    public final Java_JavaP.typeArgument_return typeArgument() throws RecognitionException {
        Java_JavaP.typeArgument_return retval = new Java_JavaP.typeArgument_return();
        retval.start = input.LT(1);
        int typeArgument_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal94=null;
        Token string_literal95=null;
        Token string_literal96=null;
        Java_JavaP.type_return t = null;


        Object char_literal94_tree=null;
        Object string_literal95_tree=null;
        Object string_literal96_tree=null;


        boolean pure=true;
        boolean ext=true;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 64) ) { return retval; }
            // JavaP.g:1044:5: (t= type | '?' ( ( 'extends' | 'super' ) t= type )? )
            int alt80=2;
            int LA80_0 = input.LA(1);

            if ( (LA80_0==Identifier||(LA80_0>=80 && LA80_0<=87)) ) {
                alt80=1;
            }
            else if ( (LA80_0==88) ) {
                alt80=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 80, 0, input);

                throw nvae;
            }
            switch (alt80) {
                case 1 :
                    // JavaP.g:1044:9: t= type
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_type_in_typeArgument4210);
                    t=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, t.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = java().createEqualityTypeArgument(t.element);
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:1045:9: '?' ( ( 'extends' | 'super' ) t= type )?
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal94=(Token)match(input,88,FOLLOW_88_in_typeArgument4222); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal94_tree = (Object)adaptor.create(char_literal94);
                    adaptor.addChild(root_0, char_literal94_tree);
                    }
                    // JavaP.g:1046:9: ( ( 'extends' | 'super' ) t= type )?
                    int alt79=2;
                    int LA79_0 = input.LA(1);

                    if ( (LA79_0==60||LA79_0==89) ) {
                        alt79=1;
                    }
                    switch (alt79) {
                        case 1 :
                            // JavaP.g:1047:11: ( 'extends' | 'super' ) t= type
                            {
                            if ( state.backtracking==0 ) {
                              pure=false;
                            }
                            // JavaP.g:1048:11: ( 'extends' | 'super' )
                            int alt78=2;
                            int LA78_0 = input.LA(1);

                            if ( (LA78_0==60) ) {
                                alt78=1;
                            }
                            else if ( (LA78_0==89) ) {
                                alt78=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 78, 0, input);

                                throw nvae;
                            }
                            switch (alt78) {
                                case 1 :
                                    // JavaP.g:1048:12: 'extends'
                                    {
                                    string_literal95=(Token)match(input,60,FOLLOW_60_in_typeArgument4257); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    string_literal95_tree = (Object)adaptor.create(string_literal95);
                                    adaptor.addChild(root_0, string_literal95_tree);
                                    }

                                    }
                                    break;
                                case 2 :
                                    // JavaP.g:1048:24: 'super'
                                    {
                                    string_literal96=(Token)match(input,89,FOLLOW_89_in_typeArgument4261); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    string_literal96_tree = (Object)adaptor.create(string_literal96);
                                    adaptor.addChild(root_0, string_literal96_tree);
                                    }
                                    if ( state.backtracking==0 ) {
                                      ext=false;
                                    }

                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_type_in_typeArgument4277);
                            t=type();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, t.getTree());
                            if ( state.backtracking==0 ) {
                              if(ext) {
                                          retval.element = java().createExtendsWildcard(t.element);
                                         } else {
                                          retval.element = java().createSuperWildcard(t.element);
                                         }
                                        
                            }

                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {
                      if(pure) {
                                 retval.element = java().createPureWildcard();
                               }
                              
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 64, typeArgument_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeArgument"

    public static class qualifiedNameList_return extends ParserRuleReturnScope {
        public List<String> element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualifiedNameList"
    // JavaP.g:1063:1: qualifiedNameList returns [List<String> element] : q= qualifiedName ( ',' qn= qualifiedName )* ;
    public final Java_JavaP.qualifiedNameList_return qualifiedNameList() throws RecognitionException {
        Java_JavaP.qualifiedNameList_return retval = new Java_JavaP.qualifiedNameList_return();
        retval.start = input.LT(1);
        int qualifiedNameList_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal97=null;
        Java_JavaP.qualifiedName_return q = null;

        Java_JavaP.qualifiedName_return qn = null;


        Object char_literal97_tree=null;

        retval.element = new ArrayList<String>();
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 65) ) { return retval; }
            // JavaP.g:1065:5: (q= qualifiedName ( ',' qn= qualifiedName )* )
            // JavaP.g:1065:9: q= qualifiedName ( ',' qn= qualifiedName )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_qualifiedName_in_qualifiedNameList4338);
            q=qualifiedName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, q.getTree());
            if ( state.backtracking==0 ) {
              retval.element.add((q!=null?input.toString(q.start,q.stop):null));
            }
            // JavaP.g:1065:56: ( ',' qn= qualifiedName )*
            loop81:
            do {
                int alt81=2;
                int LA81_0 = input.LA(1);

                if ( (LA81_0==63) ) {
                    alt81=1;
                }


                switch (alt81) {
            	case 1 :
            	    // JavaP.g:1065:57: ',' qn= qualifiedName
            	    {
            	    char_literal97=(Token)match(input,63,FOLLOW_63_in_qualifiedNameList4343); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal97_tree = (Object)adaptor.create(char_literal97);
            	    adaptor.addChild(root_0, char_literal97_tree);
            	    }
            	    pushFollow(FOLLOW_qualifiedName_in_qualifiedNameList4347);
            	    qn=qualifiedName();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, qn.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.element.add((qn!=null?input.toString(qn.start,qn.stop):null));
            	    }

            	    }
            	    break;

            	default :
            	    break loop81;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 65, qualifiedNameList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "qualifiedNameList"

    public static class formalParameters_return extends ParserRuleReturnScope {
        public List<FormalParameter> element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "formalParameters"
    // JavaP.g:1068:1: formalParameters returns [List<FormalParameter> element] : '(' (pars= formalParameterDecls )? ')' ;
    public final Java_JavaP.formalParameters_return formalParameters() throws RecognitionException {
        Java_JavaP.formalParameters_return retval = new Java_JavaP.formalParameters_return();
        retval.start = input.LT(1);
        int formalParameters_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal98=null;
        Token char_literal99=null;
        Java_JavaP.formalParameterDecls_return pars = null;


        Object char_literal98_tree=null;
        Object char_literal99_tree=null;

        retval.element = new ArrayList<FormalParameter>();
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 66) ) { return retval; }
            // JavaP.g:1070:5: ( '(' (pars= formalParameterDecls )? ')' )
            // JavaP.g:1070:9: '(' (pars= formalParameterDecls )? ')'
            {
            root_0 = (Object)adaptor.nil();

            char_literal98=(Token)match(input,90,FOLLOW_90_in_formalParameters4378); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal98_tree = (Object)adaptor.create(char_literal98);
            adaptor.addChild(root_0, char_literal98_tree);
            }
            // JavaP.g:1070:13: (pars= formalParameterDecls )?
            int alt82=2;
            int LA82_0 = input.LA(1);

            if ( (LA82_0==Identifier||LA82_0==57||(LA82_0>=80 && LA82_0<=87)||LA82_0==97) ) {
                alt82=1;
            }
            switch (alt82) {
                case 1 :
                    // JavaP.g:1070:14: pars= formalParameterDecls
                    {
                    pushFollow(FOLLOW_formalParameterDecls_in_formalParameters4383);
                    pars=formalParameterDecls();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pars.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element=pars.element;
                    }

                    }
                    break;

            }

            char_literal99=(Token)match(input,91,FOLLOW_91_in_formalParameters4389); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal99_tree = (Object)adaptor.create(char_literal99);
            adaptor.addChild(root_0, char_literal99_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 66, formalParameters_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "formalParameters"

    public static class formalParameterDecls_return extends ParserRuleReturnScope {
        public List<FormalParameter> element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "formalParameterDecls"
    // JavaP.g:1073:1: formalParameterDecls returns [List<FormalParameter> element] : (mods= variableModifiers t= type id= variableDeclaratorId ( ',' decls= formalParameterDecls )? | modss= variableModifiers tt= type '...' idd= variableDeclaratorId );
    public final Java_JavaP.formalParameterDecls_return formalParameterDecls() throws RecognitionException {
        Java_JavaP.formalParameterDecls_return retval = new Java_JavaP.formalParameterDecls_return();
        retval.start = input.LT(1);
        int formalParameterDecls_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal100=null;
        Token string_literal101=null;
        Java_JavaP.variableModifiers_return mods = null;

        Java_JavaP.type_return t = null;

        Java_JavaP.variableDeclaratorId_return id = null;

        Java_JavaP.formalParameterDecls_return decls = null;

        Java_JavaP.variableModifiers_return modss = null;

        Java_JavaP.type_return tt = null;

        Java_JavaP.variableDeclaratorId_return idd = null;


        Object char_literal100_tree=null;
        Object string_literal101_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 67) ) { return retval; }
            // JavaP.g:1074:5: (mods= variableModifiers t= type id= variableDeclaratorId ( ',' decls= formalParameterDecls )? | modss= variableModifiers tt= type '...' idd= variableDeclaratorId )
            int alt84=2;
            alt84 = dfa84.predict(input);
            switch (alt84) {
                case 1 :
                    // JavaP.g:1074:9: mods= variableModifiers t= type id= variableDeclaratorId ( ',' decls= formalParameterDecls )?
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_variableModifiers_in_formalParameterDecls4414);
                    mods=variableModifiers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mods.getTree());
                    pushFollow(FOLLOW_type_in_formalParameterDecls4418);
                    t=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, t.getTree());
                    pushFollow(FOLLOW_variableDeclaratorId_in_formalParameterDecls4422);
                    id=variableDeclaratorId();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, id.getTree());
                    // JavaP.g:1075:9: ( ',' decls= formalParameterDecls )?
                    int alt83=2;
                    int LA83_0 = input.LA(1);

                    if ( (LA83_0==63) ) {
                        alt83=1;
                    }
                    switch (alt83) {
                        case 1 :
                            // JavaP.g:1075:10: ',' decls= formalParameterDecls
                            {
                            char_literal100=(Token)match(input,63,FOLLOW_63_in_formalParameterDecls4433); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal100_tree = (Object)adaptor.create(char_literal100);
                            adaptor.addChild(root_0, char_literal100_tree);
                            }
                            pushFollow(FOLLOW_formalParameterDecls_in_formalParameterDecls4437);
                            decls=formalParameterDecls();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, decls.getTree());
                            if ( state.backtracking==0 ) {
                              retval.element=decls.element; 
                            }

                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {
                      if(retval.element == null) {
                               retval.element=new ArrayList<FormalParameter>();}
                               FormalParameter param = new FormalParameter(id.element.name(),myToArray(t.element, id.element));
                               param.addAllModifiers(mods.element);
                               retval.element.add(0,param);
                               setLocation(param, mods.start,id.stop);
                               
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:1083:9: modss= variableModifiers tt= type '...' idd= variableDeclaratorId
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_variableModifiers_in_formalParameterDecls4463);
                    modss=variableModifiers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, modss.getTree());
                    pushFollow(FOLLOW_type_in_formalParameterDecls4467);
                    tt=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, tt.getTree());
                    string_literal101=(Token)match(input,92,FOLLOW_92_in_formalParameterDecls4469); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal101_tree = (Object)adaptor.create(string_literal101);
                    adaptor.addChild(root_0, string_literal101_tree);
                    }
                    pushFollow(FOLLOW_variableDeclaratorId_in_formalParameterDecls4473);
                    idd=variableDeclaratorId();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, idd.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = new ArrayList<FormalParameter>();
                               FormalParameter param = new MultiFormalParameter(idd.element.name(),myToArray(tt.element,idd.element));
                               param.addAllModifiers(modss.element);
                               retval.element.add(param);
                               setLocation(param, modss.start, idd.stop);
                               
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 67, formalParameterDecls_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "formalParameterDecls"

    public static class methodBody_return extends ParserRuleReturnScope {
        public Block element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "methodBody"
    // JavaP.g:1093:1: methodBody returns [Block element] : b= block ;
    public final Java_JavaP.methodBody_return methodBody() throws RecognitionException {
        Java_JavaP.methodBody_return retval = new Java_JavaP.methodBody_return();
        retval.start = input.LT(1);
        int methodBody_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.block_return b = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 68) ) { return retval; }
            // JavaP.g:1094:5: (b= block )
            // JavaP.g:1094:9: b= block
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_block_in_methodBody4509);
            b=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, b.getTree());
            if ( state.backtracking==0 ) {
              retval.element = b.element;
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 68, methodBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "methodBody"

    public static class constructorBody_return extends ParserRuleReturnScope {
        public Block element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constructorBody"
    // JavaP.g:1097:1: constructorBody returns [Block element] : '{' (inv= explicitConstructorInvocation )? (bs= blockStatement )* '}' ;
    public final Java_JavaP.constructorBody_return constructorBody() throws RecognitionException {
        Java_JavaP.constructorBody_return retval = new Java_JavaP.constructorBody_return();
        retval.start = input.LT(1);
        int constructorBody_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal102=null;
        Token char_literal103=null;
        Java_JavaP.explicitConstructorInvocation_return inv = null;

        Java_JavaP.blockStatement_return bs = null;


        Object char_literal102_tree=null;
        Object char_literal103_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 69) ) { return retval; }
            // JavaP.g:1098:5: ( '{' (inv= explicitConstructorInvocation )? (bs= blockStatement )* '}' )
            // JavaP.g:1098:9: '{' (inv= explicitConstructorInvocation )? (bs= blockStatement )* '}'
            {
            root_0 = (Object)adaptor.nil();

            char_literal102=(Token)match(input,66,FOLLOW_66_in_constructorBody4534); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal102_tree = (Object)adaptor.create(char_literal102);
            adaptor.addChild(root_0, char_literal102_tree);
            }
            if ( state.backtracking==0 ) {
              retval.element = new Block();
            }
            // JavaP.g:1099:10: (inv= explicitConstructorInvocation )?
            int alt85=2;
            alt85 = dfa85.predict(input);
            switch (alt85) {
                case 1 :
                    // JavaP.g:1099:11: inv= explicitConstructorInvocation
                    {
                    pushFollow(FOLLOW_explicitConstructorInvocation_in_constructorBody4550);
                    inv=explicitConstructorInvocation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, inv.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element.addStatement(new StatementExpression(inv.element));
                    }

                    }
                    break;

            }

            // JavaP.g:1100:10: (bs= blockStatement )*
            loop86:
            do {
                int alt86=2;
                int LA86_0 = input.LA(1);

                if ( (LA86_0==IntegerLiteral||LA86_0==FloatingPointLiteral||(LA86_0>=CharacterLiteral && LA86_0<=StringLiteral)||(LA86_0>=ENUM && LA86_0<=ASSERT)||LA86_0==Identifier||LA86_0==48||LA86_0==50||(LA86_0>=53 && LA86_0<=59)||LA86_0==66||(LA86_0>=68 && LA86_0<=69)||LA86_0==75||(LA86_0>=80 && LA86_0<=87)||(LA86_0>=89 && LA86_0<=90)||(LA86_0>=93 && LA86_0<=97)||LA86_0==99||(LA86_0>=101 && LA86_0<=104)||(LA86_0>=106 && LA86_0<=110)||(LA86_0>=127 && LA86_0<=128)||(LA86_0>=131 && LA86_0<=135)) ) {
                    alt86=1;
                }


                switch (alt86) {
            	case 1 :
            	    // JavaP.g:1100:11: bs= blockStatement
            	    {
            	    pushFollow(FOLLOW_blockStatement_in_constructorBody4568);
            	    bs=blockStatement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, bs.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.element.addStatement(bs.element);
            	    }

            	    }
            	    break;

            	default :
            	    break loop86;
                }
            } while (true);

            char_literal103=(Token)match(input,67,FOLLOW_67_in_constructorBody4574); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal103_tree = (Object)adaptor.create(char_literal103);
            adaptor.addChild(root_0, char_literal103_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 69, constructorBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constructorBody"

    public static class explicitConstructorInvocation_return extends ParserRuleReturnScope {
        public MethodInvocation element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "explicitConstructorInvocation"
    // JavaP.g:1103:1: explicitConstructorInvocation returns [MethodInvocation element] : ( ( nonWildcardTypeArguments )? 'this' args= arguments ';' | (prim= primary '.' )? ( nonWildcardTypeArguments )? 'super' argsx= arguments ';' );
    public final Java_JavaP.explicitConstructorInvocation_return explicitConstructorInvocation() throws RecognitionException {
        Java_JavaP.explicitConstructorInvocation_return retval = new Java_JavaP.explicitConstructorInvocation_return();
        retval.start = input.LT(1);
        int explicitConstructorInvocation_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal105=null;
        Token char_literal106=null;
        Token char_literal107=null;
        Token string_literal109=null;
        Token char_literal110=null;
        Java_JavaP.arguments_return args = null;

        Java_JavaP.primary_return prim = null;

        Java_JavaP.arguments_return argsx = null;

        Java_JavaP.nonWildcardTypeArguments_return nonWildcardTypeArguments104 = null;

        Java_JavaP.nonWildcardTypeArguments_return nonWildcardTypeArguments108 = null;


        Object string_literal105_tree=null;
        Object char_literal106_tree=null;
        Object char_literal107_tree=null;
        Object string_literal109_tree=null;
        Object char_literal110_tree=null;

        Expression target=null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 70) ) { return retval; }
            // JavaP.g:1105:5: ( ( nonWildcardTypeArguments )? 'this' args= arguments ';' | (prim= primary '.' )? ( nonWildcardTypeArguments )? 'super' argsx= arguments ';' )
            int alt90=2;
            alt90 = dfa90.predict(input);
            switch (alt90) {
                case 1 :
                    // JavaP.g:1105:9: ( nonWildcardTypeArguments )? 'this' args= arguments ';'
                    {
                    root_0 = (Object)adaptor.nil();

                    // JavaP.g:1105:9: ( nonWildcardTypeArguments )?
                    int alt87=2;
                    int LA87_0 = input.LA(1);

                    if ( (LA87_0==62) ) {
                        alt87=1;
                    }
                    switch (alt87) {
                        case 1 :
                            // JavaP.g:0:0: nonWildcardTypeArguments
                            {
                            pushFollow(FOLLOW_nonWildcardTypeArguments_in_explicitConstructorInvocation4601);
                            nonWildcardTypeArguments104=nonWildcardTypeArguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, nonWildcardTypeArguments104.getTree());

                            }
                            break;

                    }

                    string_literal105=(Token)match(input,93,FOLLOW_93_in_explicitConstructorInvocation4604); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal105_tree = (Object)adaptor.create(string_literal105);
                    adaptor.addChild(root_0, string_literal105_tree);
                    }
                    pushFollow(FOLLOW_arguments_in_explicitConstructorInvocation4608);
                    args=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, args.getTree());
                    char_literal106=(Token)match(input,48,FOLLOW_48_in_explicitConstructorInvocation4610); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal106_tree = (Object)adaptor.create(char_literal106);
                    adaptor.addChild(root_0, char_literal106_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new ThisConstructorDelegation();
                              retval.element.addAllArguments(args.element);
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:1108:7: (prim= primary '.' )? ( nonWildcardTypeArguments )? 'super' argsx= arguments ';'
                    {
                    root_0 = (Object)adaptor.nil();

                    // JavaP.g:1108:7: (prim= primary '.' )?
                    int alt88=2;
                    int LA88_0 = input.LA(1);

                    if ( (LA88_0==IntegerLiteral||LA88_0==FloatingPointLiteral||(LA88_0>=CharacterLiteral && LA88_0<=StringLiteral)||LA88_0==Identifier||LA88_0==69||(LA88_0>=80 && LA88_0<=87)||LA88_0==90||(LA88_0>=93 && LA88_0<=96)||LA88_0==135) ) {
                        alt88=1;
                    }
                    else if ( (LA88_0==89) ) {
                        int LA88_2 = input.LA(2);

                        if ( (LA88_2==51) ) {
                            alt88=1;
                        }
                    }
                    switch (alt88) {
                        case 1 :
                            // JavaP.g:1108:8: prim= primary '.'
                            {
                            pushFollow(FOLLOW_primary_in_explicitConstructorInvocation4630);
                            prim=primary();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, prim.getTree());
                            char_literal107=(Token)match(input,51,FOLLOW_51_in_explicitConstructorInvocation4632); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal107_tree = (Object)adaptor.create(char_literal107);
                            adaptor.addChild(root_0, char_literal107_tree);
                            }
                            if ( state.backtracking==0 ) {
                              target=prim.element;
                            }

                            }
                            break;

                    }

                    // JavaP.g:1108:50: ( nonWildcardTypeArguments )?
                    int alt89=2;
                    int LA89_0 = input.LA(1);

                    if ( (LA89_0==62) ) {
                        alt89=1;
                    }
                    switch (alt89) {
                        case 1 :
                            // JavaP.g:0:0: nonWildcardTypeArguments
                            {
                            pushFollow(FOLLOW_nonWildcardTypeArguments_in_explicitConstructorInvocation4638);
                            nonWildcardTypeArguments108=nonWildcardTypeArguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, nonWildcardTypeArguments108.getTree());

                            }
                            break;

                    }

                    string_literal109=(Token)match(input,89,FOLLOW_89_in_explicitConstructorInvocation4641); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal109_tree = (Object)adaptor.create(string_literal109);
                    adaptor.addChild(root_0, string_literal109_tree);
                    }
                    pushFollow(FOLLOW_arguments_in_explicitConstructorInvocation4645);
                    argsx=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, argsx.getTree());
                    char_literal110=(Token)match(input,48,FOLLOW_48_in_explicitConstructorInvocation4647); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal110_tree = (Object)adaptor.create(char_literal110);
                    adaptor.addChild(root_0, char_literal110_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new SuperConstructorDelegation();
                             retval.element.addAllArguments(argsx.element);
                             if(target != null) {
                               retval.element.setTarget(target);
                             }
                            
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 70, explicitConstructorInvocation_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "explicitConstructorInvocation"

    public static class qualifiedName_return extends ParserRuleReturnScope {
        public String element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualifiedName"
    // JavaP.g:1118:1: qualifiedName returns [String element] : id= identifierRule ( '.' idx= identifierRule )* ;
    public final Java_JavaP.qualifiedName_return qualifiedName() throws RecognitionException {
        Java_JavaP.qualifiedName_return retval = new Java_JavaP.qualifiedName_return();
        retval.start = input.LT(1);
        int qualifiedName_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal111=null;
        Java_JavaP.identifierRule_return id = null;

        Java_JavaP.identifierRule_return idx = null;


        Object char_literal111_tree=null;

        StringBuffer buffer = new StringBuffer();
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 71) ) { return retval; }
            // JavaP.g:1120:5: (id= identifierRule ( '.' idx= identifierRule )* )
            // JavaP.g:1120:9: id= identifierRule ( '.' idx= identifierRule )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_identifierRule_in_qualifiedName4685);
            id=identifierRule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, id.getTree());
            if ( state.backtracking==0 ) {
              buffer.append((id!=null?input.toString(id.start,id.stop):null));
            }
            // JavaP.g:1120:53: ( '.' idx= identifierRule )*
            loop91:
            do {
                int alt91=2;
                int LA91_0 = input.LA(1);

                if ( (LA91_0==51) ) {
                    int LA91_2 = input.LA(2);

                    if ( (LA91_2==Identifier) ) {
                        alt91=1;
                    }


                }


                switch (alt91) {
            	case 1 :
            	    // JavaP.g:1120:54: '.' idx= identifierRule
            	    {
            	    char_literal111=(Token)match(input,51,FOLLOW_51_in_qualifiedName4689); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal111_tree = (Object)adaptor.create(char_literal111);
            	    adaptor.addChild(root_0, char_literal111_tree);
            	    }
            	    pushFollow(FOLLOW_identifierRule_in_qualifiedName4693);
            	    idx=identifierRule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, idx.getTree());
            	    if ( state.backtracking==0 ) {
            	      buffer.append((idx!=null?input.toString(idx.start,idx.stop):null));
            	    }

            	    }
            	    break;

            	default :
            	    break loop91;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 71, qualifiedName_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "qualifiedName"

    public static class literal_return extends ParserRuleReturnScope {
        public Literal element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "literal"
    // JavaP.g:1123:1: literal returns [Literal element] : (intl= integerLiteral | fl= FloatingPointLiteral | charl= CharacterLiteral | strl= StringLiteral | booll= booleanLiteral | 'null' );
    public final Java_JavaP.literal_return literal() throws RecognitionException {
        Java_JavaP.literal_return retval = new Java_JavaP.literal_return();
        retval.start = input.LT(1);
        int literal_StartIndex = input.index();
        Object root_0 = null;

        Token fl=null;
        Token charl=null;
        Token strl=null;
        Token string_literal112=null;
        Java_JavaP.integerLiteral_return intl = null;

        Java_JavaP.booleanLiteral_return booll = null;


        Object fl_tree=null;
        Object charl_tree=null;
        Object strl_tree=null;
        Object string_literal112_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 72) ) { return retval; }
            // JavaP.g:1124:5: (intl= integerLiteral | fl= FloatingPointLiteral | charl= CharacterLiteral | strl= StringLiteral | booll= booleanLiteral | 'null' )
            int alt92=6;
            switch ( input.LA(1) ) {
            case IntegerLiteral:
                {
                alt92=1;
                }
                break;
            case FloatingPointLiteral:
                {
                alt92=2;
                }
                break;
            case CharacterLiteral:
                {
                alt92=3;
                }
                break;
            case StringLiteral:
                {
                alt92=4;
                }
                break;
            case 95:
            case 96:
                {
                alt92=5;
                }
                break;
            case 94:
                {
                alt92=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 92, 0, input);

                throw nvae;
            }

            switch (alt92) {
                case 1 :
                    // JavaP.g:1124:9: intl= integerLiteral
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_integerLiteral_in_literal4722);
                    intl=integerLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, intl.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element=intl.element;
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:1125:9: fl= FloatingPointLiteral
                    {
                    root_0 = (Object)adaptor.nil();

                    fl=(Token)match(input,FloatingPointLiteral,FOLLOW_FloatingPointLiteral_in_literal4736); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    fl_tree = (Object)adaptor.create(fl);
                    adaptor.addChild(root_0, fl_tree);
                    }
                    if ( state.backtracking==0 ) {

                                 String text = (fl!=null?fl.getText():null);
                                 if(text.endsWith("f") || text.endsWith("F")) {
                                   retval.element=new RegularLiteral(typeRef("float"),text);
                                 } else {
                                   retval.element=new RegularLiteral(typeRef("double"),text);
                                 }
                              
                    }

                    }
                    break;
                case 3 :
                    // JavaP.g:1133:9: charl= CharacterLiteral
                    {
                    root_0 = (Object)adaptor.nil();

                    charl=(Token)match(input,CharacterLiteral,FOLLOW_CharacterLiteral_in_literal4750); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    charl_tree = (Object)adaptor.create(charl);
                    adaptor.addChild(root_0, charl_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element=new RegularLiteral(typeRef("char"),(charl!=null?charl.getText():null));
                    }

                    }
                    break;
                case 4 :
                    // JavaP.g:1134:9: strl= StringLiteral
                    {
                    root_0 = (Object)adaptor.nil();

                    strl=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_literal4764); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    strl_tree = (Object)adaptor.create(strl);
                    adaptor.addChild(root_0, strl_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element=new RegularLiteral(typeRef("java.lang.String"),(strl!=null?strl.getText():null));
                    }

                    }
                    break;
                case 5 :
                    // JavaP.g:1135:9: booll= booleanLiteral
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_booleanLiteral_in_literal4778);
                    booll=booleanLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, booll.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element=booll.element;
                    }

                    }
                    break;
                case 6 :
                    // JavaP.g:1136:9: 'null'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal112=(Token)match(input,94,FOLLOW_94_in_literal4790); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal112_tree = (Object)adaptor.create(string_literal112);
                    adaptor.addChild(root_0, string_literal112_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new NullLiteral();
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 72, literal_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "literal"

    public static class integerLiteral_return extends ParserRuleReturnScope {
        public Literal element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "integerLiteral"
    // JavaP.g:1145:1: integerLiteral returns [Literal element] : hexl= IntegerLiteral ;
    public final Java_JavaP.integerLiteral_return integerLiteral() throws RecognitionException {
        Java_JavaP.integerLiteral_return retval = new Java_JavaP.integerLiteral_return();
        retval.start = input.LT(1);
        int integerLiteral_StartIndex = input.index();
        Object root_0 = null;

        Token hexl=null;

        Object hexl_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 73) ) { return retval; }
            // JavaP.g:1146:5: (hexl= IntegerLiteral )
            // JavaP.g:1146:9: hexl= IntegerLiteral
            {
            root_0 = (Object)adaptor.nil();

            hexl=(Token)match(input,IntegerLiteral,FOLLOW_IntegerLiteral_in_integerLiteral4823); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            hexl_tree = (Object)adaptor.create(hexl);
            adaptor.addChild(root_0, hexl_tree);
            }
            if ( state.backtracking==0 ) {

                      char last = (hexl!=null?hexl.getText():null).charAt((hexl!=null?hexl.getText():null).length()-1);
                      String type = "int";
                      if(last == 'l' || last == 'L') {
                         type = "long";
                      }
                     retval.element=new RegularLiteral(typeRef(type),(hexl!=null?hexl.getText():null));
                    
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 73, integerLiteral_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "integerLiteral"

    public static class booleanLiteral_return extends ParserRuleReturnScope {
        public Literal element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "booleanLiteral"
    // JavaP.g:1157:1: booleanLiteral returns [Literal element] : ( 'true' | 'false' );
    public final Java_JavaP.booleanLiteral_return booleanLiteral() throws RecognitionException {
        Java_JavaP.booleanLiteral_return retval = new Java_JavaP.booleanLiteral_return();
        retval.start = input.LT(1);
        int booleanLiteral_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal113=null;
        Token string_literal114=null;

        Object string_literal113_tree=null;
        Object string_literal114_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 74) ) { return retval; }
            // JavaP.g:1158:5: ( 'true' | 'false' )
            int alt93=2;
            int LA93_0 = input.LA(1);

            if ( (LA93_0==95) ) {
                alt93=1;
            }
            else if ( (LA93_0==96) ) {
                alt93=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 93, 0, input);

                throw nvae;
            }
            switch (alt93) {
                case 1 :
                    // JavaP.g:1158:9: 'true'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal113=(Token)match(input,95,FOLLOW_95_in_booleanLiteral4848); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal113_tree = (Object)adaptor.create(string_literal113);
                    adaptor.addChild(root_0, string_literal113_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new RegularLiteral(typeRef("boolean"),"true");
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:1159:9: 'false'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal114=(Token)match(input,96,FOLLOW_96_in_booleanLiteral4860); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal114_tree = (Object)adaptor.create(string_literal114);
                    adaptor.addChild(root_0, string_literal114_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new RegularLiteral(typeRef("boolean"),"false");
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 74, booleanLiteral_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "booleanLiteral"

    public static class annotations_return extends ParserRuleReturnScope {
        public List<AnnotationModifier> element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotations"
    // JavaP.g:1164:1: annotations returns [List<AnnotationModifier> element] : (a= annotation )+ ;
    public final Java_JavaP.annotations_return annotations() throws RecognitionException {
        Java_JavaP.annotations_return retval = new Java_JavaP.annotations_return();
        retval.start = input.LT(1);
        int annotations_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.annotation_return a = null;



        retval.element = new ArrayList<AnnotationModifier>();
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 75) ) { return retval; }
            // JavaP.g:1166:5: ( (a= annotation )+ )
            // JavaP.g:1166:9: (a= annotation )+
            {
            root_0 = (Object)adaptor.nil();

            // JavaP.g:1166:9: (a= annotation )+
            int cnt94=0;
            loop94:
            do {
                int alt94=2;
                int LA94_0 = input.LA(1);

                if ( (LA94_0==97) ) {
                    int LA94_2 = input.LA(2);

                    if ( (LA94_2==Identifier) ) {
                        int LA94_3 = input.LA(3);

                        if ( (synpred122_JavaP()) ) {
                            alt94=1;
                        }


                    }


                }


                switch (alt94) {
            	case 1 :
            	    // JavaP.g:1166:10: a= annotation
            	    {
            	    pushFollow(FOLLOW_annotation_in_annotations4894);
            	    a=annotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.element.add(a.element);
            	    }

            	    }
            	    break;

            	default :
            	    if ( cnt94 >= 1 ) break loop94;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(94, input);
                        throw eee;
                }
                cnt94++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 75, annotations_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotations"

    public static class annotation_return extends ParserRuleReturnScope {
        public AnnotationModifier element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotation"
    // JavaP.g:1169:1: annotation returns [AnnotationModifier element] : '@' a= annotationName ( '(' ( elementValuePairs | elementValue )? ')' )? ;
    public final Java_JavaP.annotation_return annotation() throws RecognitionException {
        Java_JavaP.annotation_return retval = new Java_JavaP.annotation_return();
        retval.start = input.LT(1);
        int annotation_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal115=null;
        Token char_literal116=null;
        Token char_literal119=null;
        Java_JavaP.annotationName_return a = null;

        Java_JavaP.elementValuePairs_return elementValuePairs117 = null;

        Java_JavaP.elementValue_return elementValue118 = null;


        Object char_literal115_tree=null;
        Object char_literal116_tree=null;
        Object char_literal119_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 76) ) { return retval; }
            // JavaP.g:1170:5: ( '@' a= annotationName ( '(' ( elementValuePairs | elementValue )? ')' )? )
            // JavaP.g:1170:9: '@' a= annotationName ( '(' ( elementValuePairs | elementValue )? ')' )?
            {
            root_0 = (Object)adaptor.nil();

            char_literal115=(Token)match(input,97,FOLLOW_97_in_annotation4921); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal115_tree = (Object)adaptor.create(char_literal115);
            adaptor.addChild(root_0, char_literal115_tree);
            }
            pushFollow(FOLLOW_annotationName_in_annotation4925);
            a=annotationName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());
            if ( state.backtracking==0 ) {
              retval.element=new AnnotationModifier(typeRef((a!=null?input.toString(a.start,a.stop):null)));
            }
            // JavaP.g:1170:89: ( '(' ( elementValuePairs | elementValue )? ')' )?
            int alt96=2;
            int LA96_0 = input.LA(1);

            if ( (LA96_0==90) ) {
                alt96=1;
            }
            switch (alt96) {
                case 1 :
                    // JavaP.g:1170:91: '(' ( elementValuePairs | elementValue )? ')'
                    {
                    char_literal116=(Token)match(input,90,FOLLOW_90_in_annotation4931); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal116_tree = (Object)adaptor.create(char_literal116);
                    adaptor.addChild(root_0, char_literal116_tree);
                    }
                    // JavaP.g:1170:95: ( elementValuePairs | elementValue )?
                    int alt95=3;
                    int LA95_0 = input.LA(1);

                    if ( (LA95_0==Identifier) ) {
                        int LA95_1 = input.LA(2);

                        if ( (LA95_1==73) ) {
                            alt95=1;
                        }
                        else if ( ((LA95_1>=51 && LA95_1<=52)||LA95_1==62||(LA95_1>=64 && LA95_1<=65)||LA95_1==70||LA95_1==79||LA95_1==88||(LA95_1>=90 && LA95_1<=91)||(LA95_1>=121 && LA95_1<=132)) ) {
                            alt95=2;
                        }
                    }
                    else if ( (LA95_0==IntegerLiteral||LA95_0==FloatingPointLiteral||(LA95_0>=CharacterLiteral && LA95_0<=StringLiteral)||LA95_0==66||LA95_0==69||(LA95_0>=80 && LA95_0<=87)||(LA95_0>=89 && LA95_0<=90)||(LA95_0>=93 && LA95_0<=97)||(LA95_0>=127 && LA95_0<=128)||(LA95_0>=131 && LA95_0<=135)) ) {
                        alt95=2;
                    }
                    switch (alt95) {
                        case 1 :
                            // JavaP.g:1170:97: elementValuePairs
                            {
                            pushFollow(FOLLOW_elementValuePairs_in_annotation4935);
                            elementValuePairs117=elementValuePairs();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairs117.getTree());

                            }
                            break;
                        case 2 :
                            // JavaP.g:1170:117: elementValue
                            {
                            pushFollow(FOLLOW_elementValue_in_annotation4939);
                            elementValue118=elementValue();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValue118.getTree());

                            }
                            break;

                    }

                    char_literal119=(Token)match(input,91,FOLLOW_91_in_annotation4944); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal119_tree = (Object)adaptor.create(char_literal119);
                    adaptor.addChild(root_0, char_literal119_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 76, annotation_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotation"

    public static class annotationName_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationName"
    // JavaP.g:1173:1: annotationName : identifierRule ( '.' identifierRule )* ;
    public final Java_JavaP.annotationName_return annotationName() throws RecognitionException {
        Java_JavaP.annotationName_return retval = new Java_JavaP.annotationName_return();
        retval.start = input.LT(1);
        int annotationName_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal121=null;
        Java_JavaP.identifierRule_return identifierRule120 = null;

        Java_JavaP.identifierRule_return identifierRule122 = null;


        Object char_literal121_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 77) ) { return retval; }
            // JavaP.g:1174:5: ( identifierRule ( '.' identifierRule )* )
            // JavaP.g:1174:7: identifierRule ( '.' identifierRule )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_identifierRule_in_annotationName4964);
            identifierRule120=identifierRule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifierRule120.getTree());
            // JavaP.g:1174:22: ( '.' identifierRule )*
            loop97:
            do {
                int alt97=2;
                int LA97_0 = input.LA(1);

                if ( (LA97_0==51) ) {
                    alt97=1;
                }


                switch (alt97) {
            	case 1 :
            	    // JavaP.g:1174:23: '.' identifierRule
            	    {
            	    char_literal121=(Token)match(input,51,FOLLOW_51_in_annotationName4967); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal121_tree = (Object)adaptor.create(char_literal121);
            	    adaptor.addChild(root_0, char_literal121_tree);
            	    }
            	    pushFollow(FOLLOW_identifierRule_in_annotationName4969);
            	    identifierRule122=identifierRule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, identifierRule122.getTree());

            	    }
            	    break;

            	default :
            	    break loop97;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 77, annotationName_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationName"

    public static class elementValuePairs_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValuePairs"
    // JavaP.g:1177:1: elementValuePairs : elementValuePair ( ',' elementValuePair )* ;
    public final Java_JavaP.elementValuePairs_return elementValuePairs() throws RecognitionException {
        Java_JavaP.elementValuePairs_return retval = new Java_JavaP.elementValuePairs_return();
        retval.start = input.LT(1);
        int elementValuePairs_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal124=null;
        Java_JavaP.elementValuePair_return elementValuePair123 = null;

        Java_JavaP.elementValuePair_return elementValuePair125 = null;


        Object char_literal124_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 78) ) { return retval; }
            // JavaP.g:1178:5: ( elementValuePair ( ',' elementValuePair )* )
            // JavaP.g:1178:9: elementValuePair ( ',' elementValuePair )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_elementValuePair_in_elementValuePairs4990);
            elementValuePair123=elementValuePair();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePair123.getTree());
            // JavaP.g:1178:26: ( ',' elementValuePair )*
            loop98:
            do {
                int alt98=2;
                int LA98_0 = input.LA(1);

                if ( (LA98_0==63) ) {
                    alt98=1;
                }


                switch (alt98) {
            	case 1 :
            	    // JavaP.g:1178:27: ',' elementValuePair
            	    {
            	    char_literal124=(Token)match(input,63,FOLLOW_63_in_elementValuePairs4993); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal124_tree = (Object)adaptor.create(char_literal124);
            	    adaptor.addChild(root_0, char_literal124_tree);
            	    }
            	    pushFollow(FOLLOW_elementValuePair_in_elementValuePairs4995);
            	    elementValuePair125=elementValuePair();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePair125.getTree());

            	    }
            	    break;

            	default :
            	    break loop98;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 78, elementValuePairs_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "elementValuePairs"

    public static class elementValuePair_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValuePair"
    // JavaP.g:1181:1: elementValuePair : identifierRule '=' elementValue ;
    public final Java_JavaP.elementValuePair_return elementValuePair() throws RecognitionException {
        Java_JavaP.elementValuePair_return retval = new Java_JavaP.elementValuePair_return();
        retval.start = input.LT(1);
        int elementValuePair_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal127=null;
        Java_JavaP.identifierRule_return identifierRule126 = null;

        Java_JavaP.elementValue_return elementValue128 = null;


        Object char_literal127_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 79) ) { return retval; }
            // JavaP.g:1182:5: ( identifierRule '=' elementValue )
            // JavaP.g:1182:9: identifierRule '=' elementValue
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_identifierRule_in_elementValuePair5016);
            identifierRule126=identifierRule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, identifierRule126.getTree());
            char_literal127=(Token)match(input,73,FOLLOW_73_in_elementValuePair5018); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal127_tree = (Object)adaptor.create(char_literal127);
            adaptor.addChild(root_0, char_literal127_tree);
            }
            pushFollow(FOLLOW_elementValue_in_elementValuePair5020);
            elementValue128=elementValue();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValue128.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 79, elementValuePair_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "elementValuePair"

    public static class elementValue_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValue"
    // JavaP.g:1185:1: elementValue : ( conditionalExpression | annotation | elementValueArrayInitializer );
    public final Java_JavaP.elementValue_return elementValue() throws RecognitionException {
        Java_JavaP.elementValue_return retval = new Java_JavaP.elementValue_return();
        retval.start = input.LT(1);
        int elementValue_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.conditionalExpression_return conditionalExpression129 = null;

        Java_JavaP.annotation_return annotation130 = null;

        Java_JavaP.elementValueArrayInitializer_return elementValueArrayInitializer131 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 80) ) { return retval; }
            // JavaP.g:1186:5: ( conditionalExpression | annotation | elementValueArrayInitializer )
            int alt99=3;
            switch ( input.LA(1) ) {
            case IntegerLiteral:
            case FloatingPointLiteral:
            case CharacterLiteral:
            case StringLiteral:
            case Identifier:
            case 69:
            case 80:
            case 81:
            case 82:
            case 83:
            case 84:
            case 85:
            case 86:
            case 87:
            case 89:
            case 90:
            case 93:
            case 94:
            case 95:
            case 96:
            case 127:
            case 128:
            case 131:
            case 132:
            case 133:
            case 134:
            case 135:
                {
                alt99=1;
                }
                break;
            case 97:
                {
                alt99=2;
                }
                break;
            case 66:
                {
                alt99=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 99, 0, input);

                throw nvae;
            }

            switch (alt99) {
                case 1 :
                    // JavaP.g:1186:9: conditionalExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_conditionalExpression_in_elementValue5039);
                    conditionalExpression129=conditionalExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, conditionalExpression129.getTree());

                    }
                    break;
                case 2 :
                    // JavaP.g:1187:9: annotation
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_annotation_in_elementValue5049);
                    annotation130=annotation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotation130.getTree());

                    }
                    break;
                case 3 :
                    // JavaP.g:1188:9: elementValueArrayInitializer
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_elementValueArrayInitializer_in_elementValue5059);
                    elementValueArrayInitializer131=elementValueArrayInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValueArrayInitializer131.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 80, elementValue_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "elementValue"

    public static class elementValueArrayInitializer_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValueArrayInitializer"
    // JavaP.g:1191:1: elementValueArrayInitializer : '{' ( elementValue ( ',' elementValue )* )? ( ',' )? '}' ;
    public final Java_JavaP.elementValueArrayInitializer_return elementValueArrayInitializer() throws RecognitionException {
        Java_JavaP.elementValueArrayInitializer_return retval = new Java_JavaP.elementValueArrayInitializer_return();
        retval.start = input.LT(1);
        int elementValueArrayInitializer_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal132=null;
        Token char_literal134=null;
        Token char_literal136=null;
        Token char_literal137=null;
        Java_JavaP.elementValue_return elementValue133 = null;

        Java_JavaP.elementValue_return elementValue135 = null;


        Object char_literal132_tree=null;
        Object char_literal134_tree=null;
        Object char_literal136_tree=null;
        Object char_literal137_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 81) ) { return retval; }
            // JavaP.g:1192:5: ( '{' ( elementValue ( ',' elementValue )* )? ( ',' )? '}' )
            // JavaP.g:1192:9: '{' ( elementValue ( ',' elementValue )* )? ( ',' )? '}'
            {
            root_0 = (Object)adaptor.nil();

            char_literal132=(Token)match(input,66,FOLLOW_66_in_elementValueArrayInitializer5078); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal132_tree = (Object)adaptor.create(char_literal132);
            adaptor.addChild(root_0, char_literal132_tree);
            }
            // JavaP.g:1192:13: ( elementValue ( ',' elementValue )* )?
            int alt101=2;
            int LA101_0 = input.LA(1);

            if ( (LA101_0==IntegerLiteral||LA101_0==FloatingPointLiteral||(LA101_0>=CharacterLiteral && LA101_0<=StringLiteral)||LA101_0==Identifier||LA101_0==66||LA101_0==69||(LA101_0>=80 && LA101_0<=87)||(LA101_0>=89 && LA101_0<=90)||(LA101_0>=93 && LA101_0<=97)||(LA101_0>=127 && LA101_0<=128)||(LA101_0>=131 && LA101_0<=135)) ) {
                alt101=1;
            }
            switch (alt101) {
                case 1 :
                    // JavaP.g:1192:14: elementValue ( ',' elementValue )*
                    {
                    pushFollow(FOLLOW_elementValue_in_elementValueArrayInitializer5081);
                    elementValue133=elementValue();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValue133.getTree());
                    // JavaP.g:1192:27: ( ',' elementValue )*
                    loop100:
                    do {
                        int alt100=2;
                        int LA100_0 = input.LA(1);

                        if ( (LA100_0==63) ) {
                            int LA100_1 = input.LA(2);

                            if ( (LA100_1==IntegerLiteral||LA100_1==FloatingPointLiteral||(LA100_1>=CharacterLiteral && LA100_1<=StringLiteral)||LA100_1==Identifier||LA100_1==66||LA100_1==69||(LA100_1>=80 && LA100_1<=87)||(LA100_1>=89 && LA100_1<=90)||(LA100_1>=93 && LA100_1<=97)||(LA100_1>=127 && LA100_1<=128)||(LA100_1>=131 && LA100_1<=135)) ) {
                                alt100=1;
                            }


                        }


                        switch (alt100) {
                    	case 1 :
                    	    // JavaP.g:1192:28: ',' elementValue
                    	    {
                    	    char_literal134=(Token)match(input,63,FOLLOW_63_in_elementValueArrayInitializer5084); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal134_tree = (Object)adaptor.create(char_literal134);
                    	    adaptor.addChild(root_0, char_literal134_tree);
                    	    }
                    	    pushFollow(FOLLOW_elementValue_in_elementValueArrayInitializer5086);
                    	    elementValue135=elementValue();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValue135.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop100;
                        }
                    } while (true);


                    }
                    break;

            }

            // JavaP.g:1192:49: ( ',' )?
            int alt102=2;
            int LA102_0 = input.LA(1);

            if ( (LA102_0==63) ) {
                alt102=1;
            }
            switch (alt102) {
                case 1 :
                    // JavaP.g:1192:50: ','
                    {
                    char_literal136=(Token)match(input,63,FOLLOW_63_in_elementValueArrayInitializer5093); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal136_tree = (Object)adaptor.create(char_literal136);
                    adaptor.addChild(root_0, char_literal136_tree);
                    }

                    }
                    break;

            }

            char_literal137=(Token)match(input,67,FOLLOW_67_in_elementValueArrayInitializer5097); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal137_tree = (Object)adaptor.create(char_literal137);
            adaptor.addChild(root_0, char_literal137_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 81, elementValueArrayInitializer_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "elementValueArrayInitializer"

    public static class annotationTypeDeclaration_return extends ParserRuleReturnScope {
        public ClassWithBody element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationTypeDeclaration"
    // JavaP.g:1195:1: annotationTypeDeclaration returns [ClassWithBody element] : '@' 'interface' name= identifierRule body= annotationTypeBody ;
    public final Java_JavaP.annotationTypeDeclaration_return annotationTypeDeclaration() throws RecognitionException {
        Java_JavaP.annotationTypeDeclaration_return retval = new Java_JavaP.annotationTypeDeclaration_return();
        retval.start = input.LT(1);
        int annotationTypeDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal138=null;
        Token string_literal139=null;
        Java_JavaP.identifierRule_return name = null;

        Java_JavaP.annotationTypeBody_return body = null;


        Object char_literal138_tree=null;
        Object string_literal139_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 82) ) { return retval; }
            // JavaP.g:1196:5: ( '@' 'interface' name= identifierRule body= annotationTypeBody )
            // JavaP.g:1196:9: '@' 'interface' name= identifierRule body= annotationTypeBody
            {
            root_0 = (Object)adaptor.nil();

            char_literal138=(Token)match(input,97,FOLLOW_97_in_annotationTypeDeclaration5120); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal138_tree = (Object)adaptor.create(char_literal138);
            adaptor.addChild(root_0, char_literal138_tree);
            }
            string_literal139=(Token)match(input,68,FOLLOW_68_in_annotationTypeDeclaration5122); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal139_tree = (Object)adaptor.create(string_literal139);
            adaptor.addChild(root_0, string_literal139_tree);
            }
            pushFollow(FOLLOW_identifierRule_in_annotationTypeDeclaration5126);
            name=identifierRule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name.getTree());
            if ( state.backtracking==0 ) {

                             retval.element = (ClassWithBody)createType((name!=null?input.toString(name.start,name.stop):null));
                             retval.element.addModifier(new AnnotationType());
                             setName(retval.element,name.start);
                           
            }
            pushFollow(FOLLOW_annotationTypeBody_in_annotationTypeDeclaration5158);
            body=annotationTypeBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, body.getTree());
            if ( state.backtracking==0 ) {
              retval.element.setBody(body.element);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 82, annotationTypeDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationTypeDeclaration"

    public static class annotationTypeBody_return extends ParserRuleReturnScope {
        public ClassBody element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationTypeBody"
    // JavaP.g:1205:1: annotationTypeBody returns [ClassBody element] : '{' ( annotationTypeElementDeclaration )* '}' ;
    public final Java_JavaP.annotationTypeBody_return annotationTypeBody() throws RecognitionException {
        Java_JavaP.annotationTypeBody_return retval = new Java_JavaP.annotationTypeBody_return();
        retval.start = input.LT(1);
        int annotationTypeBody_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal140=null;
        Token char_literal142=null;
        Java_JavaP.annotationTypeElementDeclaration_return annotationTypeElementDeclaration141 = null;


        Object char_literal140_tree=null;
        Object char_literal142_tree=null;

        retval.element = new ClassBody();
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 83) ) { return retval; }
            // JavaP.g:1207:5: ( '{' ( annotationTypeElementDeclaration )* '}' )
            // JavaP.g:1207:9: '{' ( annotationTypeElementDeclaration )* '}'
            {
            root_0 = (Object)adaptor.nil();

            char_literal140=(Token)match(input,66,FOLLOW_66_in_annotationTypeBody5187); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal140_tree = (Object)adaptor.create(char_literal140);
            adaptor.addChild(root_0, char_literal140_tree);
            }
            // JavaP.g:1207:13: ( annotationTypeElementDeclaration )*
            loop103:
            do {
                int alt103=2;
                int LA103_0 = input.LA(1);

                if ( (LA103_0==ENUM||LA103_0==Identifier||LA103_0==50||(LA103_0>=53 && LA103_0<=59)||LA103_0==62||(LA103_0>=68 && LA103_0<=69)||(LA103_0>=74 && LA103_0<=78)||(LA103_0>=80 && LA103_0<=87)||LA103_0==97) ) {
                    alt103=1;
                }


                switch (alt103) {
            	case 1 :
            	    // JavaP.g:1207:14: annotationTypeElementDeclaration
            	    {
            	    pushFollow(FOLLOW_annotationTypeElementDeclaration_in_annotationTypeBody5190);
            	    annotationTypeElementDeclaration141=annotationTypeElementDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationTypeElementDeclaration141.getTree());

            	    }
            	    break;

            	default :
            	    break loop103;
                }
            } while (true);

            char_literal142=(Token)match(input,67,FOLLOW_67_in_annotationTypeBody5194); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal142_tree = (Object)adaptor.create(char_literal142);
            adaptor.addChild(root_0, char_literal142_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 83, annotationTypeBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationTypeBody"

    public static class annotationTypeElementDeclaration_return extends ParserRuleReturnScope {
        public TypeElement element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationTypeElementDeclaration"
    // JavaP.g:1210:1: annotationTypeElementDeclaration returns [TypeElement element] : mods= modifiers rest= annotationTypeElementRest ;
    public final Java_JavaP.annotationTypeElementDeclaration_return annotationTypeElementDeclaration() throws RecognitionException {
        Java_JavaP.annotationTypeElementDeclaration_return retval = new Java_JavaP.annotationTypeElementDeclaration_return();
        retval.start = input.LT(1);
        int annotationTypeElementDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.modifiers_return mods = null;

        Java_JavaP.annotationTypeElementRest_return rest = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 84) ) { return retval; }
            // JavaP.g:1211:5: (mods= modifiers rest= annotationTypeElementRest )
            // JavaP.g:1211:9: mods= modifiers rest= annotationTypeElementRest
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_modifiers_in_annotationTypeElementDeclaration5219);
            mods=modifiers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mods.getTree());
            pushFollow(FOLLOW_annotationTypeElementRest_in_annotationTypeElementDeclaration5223);
            rest=annotationTypeElementRest();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rest.getTree());
            if ( state.backtracking==0 ) {

                       retval.element = rest.element;
                       for(Modifier modifier: mods.element) {
                         retval.element.addModifier(modifier);
                       }
                     
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 84, annotationTypeElementDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationTypeElementDeclaration"

    public static class annotationTypeElementRest_return extends ParserRuleReturnScope {
        public TypeElement element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationTypeElementRest"
    // JavaP.g:1220:1: annotationTypeElementRest returns [TypeElement element] : (t= type ann= annotationMethodOrConstantRest[$t.element] ';' | cd= normalClassDeclaration ( ';' )? | id= normalInterfaceDeclaration ( ';' )? | en= enumDeclaration ( ';' )? | an= annotationTypeDeclaration ( ';' )? );
    public final Java_JavaP.annotationTypeElementRest_return annotationTypeElementRest() throws RecognitionException {
        Java_JavaP.annotationTypeElementRest_return retval = new Java_JavaP.annotationTypeElementRest_return();
        retval.start = input.LT(1);
        int annotationTypeElementRest_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal143=null;
        Token char_literal144=null;
        Token char_literal145=null;
        Token char_literal146=null;
        Token char_literal147=null;
        Java_JavaP.type_return t = null;

        Java_JavaP.annotationMethodOrConstantRest_return ann = null;

        Java_JavaP.normalClassDeclaration_return cd = null;

        Java_JavaP.normalInterfaceDeclaration_return id = null;

        Java_JavaP.enumDeclaration_return en = null;

        Java_JavaP.annotationTypeDeclaration_return an = null;


        Object char_literal143_tree=null;
        Object char_literal144_tree=null;
        Object char_literal145_tree=null;
        Object char_literal146_tree=null;
        Object char_literal147_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 85) ) { return retval; }
            // JavaP.g:1221:5: (t= type ann= annotationMethodOrConstantRest[$t.element] ';' | cd= normalClassDeclaration ( ';' )? | id= normalInterfaceDeclaration ( ';' )? | en= enumDeclaration ( ';' )? | an= annotationTypeDeclaration ( ';' )? )
            int alt108=5;
            switch ( input.LA(1) ) {
            case Identifier:
            case 80:
            case 81:
            case 82:
            case 83:
            case 84:
            case 85:
            case 86:
            case 87:
                {
                alt108=1;
                }
                break;
            case 59:
                {
                alt108=2;
                }
                break;
            case 68:
                {
                alt108=3;
                }
                break;
            case ENUM:
                {
                alt108=4;
                }
                break;
            case 97:
                {
                alt108=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 108, 0, input);

                throw nvae;
            }

            switch (alt108) {
                case 1 :
                    // JavaP.g:1221:9: t= type ann= annotationMethodOrConstantRest[$t.element] ';'
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_type_in_annotationTypeElementRest5257);
                    t=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, t.getTree());
                    pushFollow(FOLLOW_annotationMethodOrConstantRest_in_annotationTypeElementRest5261);
                    ann=annotationMethodOrConstantRest((t!=null?t.element:null));

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ann.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = ann.element;
                    }
                    char_literal143=(Token)match(input,48,FOLLOW_48_in_annotationTypeElementRest5271); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal143_tree = (Object)adaptor.create(char_literal143);
                    adaptor.addChild(root_0, char_literal143_tree);
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:1224:9: cd= normalClassDeclaration ( ';' )?
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_normalClassDeclaration_in_annotationTypeElementRest5283);
                    cd=normalClassDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd.getTree());
                    if ( state.backtracking==0 ) {
                       retval.element = cd.element; 
                    }
                    // JavaP.g:1224:67: ( ';' )?
                    int alt104=2;
                    int LA104_0 = input.LA(1);

                    if ( (LA104_0==48) ) {
                        alt104=1;
                    }
                    switch (alt104) {
                        case 1 :
                            // JavaP.g:0:0: ';'
                            {
                            char_literal144=(Token)match(input,48,FOLLOW_48_in_annotationTypeElementRest5286); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal144_tree = (Object)adaptor.create(char_literal144);
                            adaptor.addChild(root_0, char_literal144_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // JavaP.g:1225:9: id= normalInterfaceDeclaration ( ';' )?
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_normalInterfaceDeclaration_in_annotationTypeElementRest5299);
                    id=normalInterfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, id.getTree());
                    if ( state.backtracking==0 ) {
                       retval.element = id.element; 
                    }
                    // JavaP.g:1225:71: ( ';' )?
                    int alt105=2;
                    int LA105_0 = input.LA(1);

                    if ( (LA105_0==48) ) {
                        alt105=1;
                    }
                    switch (alt105) {
                        case 1 :
                            // JavaP.g:0:0: ';'
                            {
                            char_literal145=(Token)match(input,48,FOLLOW_48_in_annotationTypeElementRest5302); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal145_tree = (Object)adaptor.create(char_literal145);
                            adaptor.addChild(root_0, char_literal145_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // JavaP.g:1226:9: en= enumDeclaration ( ';' )?
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_enumDeclaration_in_annotationTypeElementRest5315);
                    en=enumDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, en.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = en.element;
                    }
                    // JavaP.g:1226:59: ( ';' )?
                    int alt106=2;
                    int LA106_0 = input.LA(1);

                    if ( (LA106_0==48) ) {
                        alt106=1;
                    }
                    switch (alt106) {
                        case 1 :
                            // JavaP.g:0:0: ';'
                            {
                            char_literal146=(Token)match(input,48,FOLLOW_48_in_annotationTypeElementRest5319); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal146_tree = (Object)adaptor.create(char_literal146);
                            adaptor.addChild(root_0, char_literal146_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 5 :
                    // JavaP.g:1227:9: an= annotationTypeDeclaration ( ';' )?
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_annotationTypeDeclaration_in_annotationTypeElementRest5332);
                    an=annotationTypeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, an.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = an.element;
                    }
                    // JavaP.g:1227:69: ( ';' )?
                    int alt107=2;
                    int LA107_0 = input.LA(1);

                    if ( (LA107_0==48) ) {
                        alt107=1;
                    }
                    switch (alt107) {
                        case 1 :
                            // JavaP.g:0:0: ';'
                            {
                            char_literal147=(Token)match(input,48,FOLLOW_48_in_annotationTypeElementRest5336); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal147_tree = (Object)adaptor.create(char_literal147);
                            adaptor.addChild(root_0, char_literal147_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 85, annotationTypeElementRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationTypeElementRest"

    public static class annotationMethodOrConstantRest_return extends ParserRuleReturnScope {
        public TypeElement element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationMethodOrConstantRest"
    // JavaP.g:1230:1: annotationMethodOrConstantRest[TypeReference type] returns [TypeElement element] : (a= annotationMethodRest[$type] | aa= annotationConstantRest[$type] );
    public final Java_JavaP.annotationMethodOrConstantRest_return annotationMethodOrConstantRest(TypeReference type) throws RecognitionException {
        Java_JavaP.annotationMethodOrConstantRest_return retval = new Java_JavaP.annotationMethodOrConstantRest_return();
        retval.start = input.LT(1);
        int annotationMethodOrConstantRest_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.annotationMethodRest_return a = null;

        Java_JavaP.annotationConstantRest_return aa = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 86) ) { return retval; }
            // JavaP.g:1231:5: (a= annotationMethodRest[$type] | aa= annotationConstantRest[$type] )
            int alt109=2;
            int LA109_0 = input.LA(1);

            if ( (LA109_0==Identifier) ) {
                int LA109_1 = input.LA(2);

                if ( (LA109_1==90) ) {
                    alt109=1;
                }
                else if ( (LA109_1==48||LA109_1==63||LA109_1==70||LA109_1==73) ) {
                    alt109=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 109, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 109, 0, input);

                throw nvae;
            }
            switch (alt109) {
                case 1 :
                    // JavaP.g:1231:9: a= annotationMethodRest[$type]
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_annotationMethodRest_in_annotationMethodOrConstantRest5363);
                    a=annotationMethodRest(type);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, a.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = a.element;
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:1232:9: aa= annotationConstantRest[$type]
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_annotationConstantRest_in_annotationMethodOrConstantRest5378);
                    aa=annotationConstantRest(type);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, aa.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = aa.element;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 86, annotationMethodOrConstantRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationMethodOrConstantRest"

    public static class annotationMethodRest_return extends ParserRuleReturnScope {
        public Method element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationMethodRest"
    // JavaP.g:1235:1: annotationMethodRest[TypeReference type] returns [Method element] : name= identifierRule '(' ')' ( defaultValue )? ;
    public final Java_JavaP.annotationMethodRest_return annotationMethodRest(TypeReference type) throws RecognitionException {
        Java_JavaP.annotationMethodRest_return retval = new Java_JavaP.annotationMethodRest_return();
        retval.start = input.LT(1);
        int annotationMethodRest_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal148=null;
        Token char_literal149=null;
        Java_JavaP.identifierRule_return name = null;

        Java_JavaP.defaultValue_return defaultValue150 = null;


        Object char_literal148_tree=null;
        Object char_literal149_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 87) ) { return retval; }
            // JavaP.g:1236:5: (name= identifierRule '(' ')' ( defaultValue )? )
            // JavaP.g:1236:9: name= identifierRule '(' ')' ( defaultValue )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_identifierRule_in_annotationMethodRest5407);
            name=identifierRule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name.getTree());
            char_literal148=(Token)match(input,90,FOLLOW_90_in_annotationMethodRest5409); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal148_tree = (Object)adaptor.create(char_literal148);
            adaptor.addChild(root_0, char_literal148_tree);
            }
            char_literal149=(Token)match(input,91,FOLLOW_91_in_annotationMethodRest5411); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal149_tree = (Object)adaptor.create(char_literal149);
            adaptor.addChild(root_0, char_literal149_tree);
            }
            if ( state.backtracking==0 ) {
              retval.element = createNormalMethod(new SimpleNameMethodHeader((name!=null?input.toString(name.start,name.stop):null),type));
                       setName(retval.element,name.start);
                      
            }
            // JavaP.g:1239:11: ( defaultValue )?
            int alt110=2;
            int LA110_0 = input.LA(1);

            if ( (LA110_0==78) ) {
                alt110=1;
            }
            switch (alt110) {
                case 1 :
                    // JavaP.g:1239:12: defaultValue
                    {
                    pushFollow(FOLLOW_defaultValue_in_annotationMethodRest5424);
                    defaultValue150=defaultValue();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, defaultValue150.getTree());
                    if ( state.backtracking==0 ) {
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 87, annotationMethodRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationMethodRest"

    public static class annotationConstantRest_return extends ParserRuleReturnScope {
        public MemberVariableDeclarator element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationConstantRest"
    // JavaP.g:1242:1: annotationConstantRest[TypeReference type] returns [MemberVariableDeclarator element] : decls= variableDeclarators ;
    public final Java_JavaP.annotationConstantRest_return annotationConstantRest(TypeReference type) throws RecognitionException {
        Java_JavaP.annotationConstantRest_return retval = new Java_JavaP.annotationConstantRest_return();
        retval.start = input.LT(1);
        int annotationConstantRest_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.variableDeclarators_return decls = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 88) ) { return retval; }
            // JavaP.g:1243:5: (decls= variableDeclarators )
            // JavaP.g:1243:9: decls= variableDeclarators
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_variableDeclarators_in_annotationConstantRest5454);
            decls=variableDeclarators();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, decls.getTree());
            if ( state.backtracking==0 ) {
              retval.element = new MemberVariableDeclarator(type);
                       for(VariableDeclaration decl: decls.element) {
                         retval.element.add(decl);
                       }
                      
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 88, annotationConstantRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationConstantRest"

    public static class defaultValue_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "defaultValue"
    // JavaP.g:1251:1: defaultValue : 'default' elementValue ;
    public final Java_JavaP.defaultValue_return defaultValue() throws RecognitionException {
        Java_JavaP.defaultValue_return retval = new Java_JavaP.defaultValue_return();
        retval.start = input.LT(1);
        int defaultValue_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal151=null;
        Java_JavaP.elementValue_return elementValue152 = null;


        Object string_literal151_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 89) ) { return retval; }
            // JavaP.g:1252:5: ( 'default' elementValue )
            // JavaP.g:1252:9: 'default' elementValue
            {
            root_0 = (Object)adaptor.nil();

            string_literal151=(Token)match(input,78,FOLLOW_78_in_defaultValue5483); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal151_tree = (Object)adaptor.create(string_literal151);
            adaptor.addChild(root_0, string_literal151_tree);
            }
            pushFollow(FOLLOW_elementValue_in_defaultValue5485);
            elementValue152=elementValue();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValue152.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 89, defaultValue_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "defaultValue"

    public static class block_return extends ParserRuleReturnScope {
        public Block element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "block"
    // JavaP.g:1257:1: block returns [Block element] : '{' (stat= blockStatement )* '}' ;
    public final Java_JavaP.block_return block() throws RecognitionException {
        Java_JavaP.block_return retval = new Java_JavaP.block_return();
        retval.start = input.LT(1);
        int block_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal153=null;
        Token char_literal154=null;
        Java_JavaP.blockStatement_return stat = null;


        Object char_literal153_tree=null;
        Object char_literal154_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 90) ) { return retval; }
            // JavaP.g:1258:5: ( '{' (stat= blockStatement )* '}' )
            // JavaP.g:1258:9: '{' (stat= blockStatement )* '}'
            {
            root_0 = (Object)adaptor.nil();

            char_literal153=(Token)match(input,66,FOLLOW_66_in_block5510); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal153_tree = (Object)adaptor.create(char_literal153);
            adaptor.addChild(root_0, char_literal153_tree);
            }
            if ( state.backtracking==0 ) {
              retval.element = new Block();
            }
            // JavaP.g:1258:45: (stat= blockStatement )*
            loop111:
            do {
                int alt111=2;
                int LA111_0 = input.LA(1);

                if ( (LA111_0==IntegerLiteral||LA111_0==FloatingPointLiteral||(LA111_0>=CharacterLiteral && LA111_0<=StringLiteral)||(LA111_0>=ENUM && LA111_0<=ASSERT)||LA111_0==Identifier||LA111_0==48||LA111_0==50||(LA111_0>=53 && LA111_0<=59)||LA111_0==66||(LA111_0>=68 && LA111_0<=69)||LA111_0==75||(LA111_0>=80 && LA111_0<=87)||(LA111_0>=89 && LA111_0<=90)||(LA111_0>=93 && LA111_0<=97)||LA111_0==99||(LA111_0>=101 && LA111_0<=104)||(LA111_0>=106 && LA111_0<=110)||(LA111_0>=127 && LA111_0<=128)||(LA111_0>=131 && LA111_0<=135)) ) {
                    alt111=1;
                }


                switch (alt111) {
            	case 1 :
            	    // JavaP.g:1258:46: stat= blockStatement
            	    {
            	    pushFollow(FOLLOW_blockStatement_in_block5517);
            	    stat=blockStatement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stat.getTree());
            	    if ( state.backtracking==0 ) {
            	      if(stat != null) {retval.element.addStatement(stat.element);}
            	    }

            	    }
            	    break;

            	default :
            	    break loop111;
                }
            } while (true);

            char_literal154=(Token)match(input,67,FOLLOW_67_in_block5523); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal154_tree = (Object)adaptor.create(char_literal154);
            adaptor.addChild(root_0, char_literal154_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 90, block_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "block"

    public static class blockStatement_return extends ParserRuleReturnScope {
        public Statement element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "blockStatement"
    // JavaP.g:1261:1: blockStatement returns [Statement element] : (local= localVariableDeclarationStatement | cd= classOrInterfaceDeclaration | stat= statement );
    public final Java_JavaP.blockStatement_return blockStatement() throws RecognitionException {
        Java_JavaP.blockStatement_return retval = new Java_JavaP.blockStatement_return();
        retval.start = input.LT(1);
        int blockStatement_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.localVariableDeclarationStatement_return local = null;

        Java_JavaP.classOrInterfaceDeclaration_return cd = null;

        Java_JavaP.statement_return stat = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 91) ) { return retval; }
            // JavaP.g:1263:5: (local= localVariableDeclarationStatement | cd= classOrInterfaceDeclaration | stat= statement )
            int alt112=3;
            alt112 = dfa112.predict(input);
            switch (alt112) {
                case 1 :
                    // JavaP.g:1263:9: local= localVariableDeclarationStatement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_localVariableDeclarationStatement_in_blockStatement5552);
                    local=localVariableDeclarationStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, local.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = local.element;
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:1264:9: cd= classOrInterfaceDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_classOrInterfaceDeclaration_in_blockStatement5566);
                    cd=classOrInterfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = new LocalClassStatement(cd.element);
                    }

                    }
                    break;
                case 3 :
                    // JavaP.g:1265:9: stat= statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_statement_in_blockStatement5580);
                    stat=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stat.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = stat.element;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              assert(retval.element != null);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 91, blockStatement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "blockStatement"

    public static class localVariableDeclarationStatement_return extends ParserRuleReturnScope {
        public Statement element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "localVariableDeclarationStatement"
    // JavaP.g:1268:1: localVariableDeclarationStatement returns [Statement element] : local= localVariableDeclaration ';' ;
    public final Java_JavaP.localVariableDeclarationStatement_return localVariableDeclarationStatement() throws RecognitionException {
        Java_JavaP.localVariableDeclarationStatement_return retval = new Java_JavaP.localVariableDeclarationStatement_return();
        retval.start = input.LT(1);
        int localVariableDeclarationStatement_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal155=null;
        Java_JavaP.localVariableDeclaration_return local = null;


        Object char_literal155_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 92) ) { return retval; }
            // JavaP.g:1269:5: (local= localVariableDeclaration ';' )
            // JavaP.g:1269:10: local= localVariableDeclaration ';'
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_localVariableDeclaration_in_localVariableDeclarationStatement5608);
            local=localVariableDeclaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, local.getTree());
            if ( state.backtracking==0 ) {
              retval.element=local.element;
            }
            char_literal155=(Token)match(input,48,FOLLOW_48_in_localVariableDeclarationStatement5612); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal155_tree = (Object)adaptor.create(char_literal155);
            adaptor.addChild(root_0, char_literal155_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 92, localVariableDeclarationStatement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "localVariableDeclarationStatement"

    public static class localVariableDeclaration_return extends ParserRuleReturnScope {
        public LocalVariableDeclarator element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "localVariableDeclaration"
    // JavaP.g:1272:1: localVariableDeclaration returns [LocalVariableDeclarator element] : mods= variableModifiers ref= type decls= variableDeclarators ;
    public final Java_JavaP.localVariableDeclaration_return localVariableDeclaration() throws RecognitionException {
        Java_JavaP.localVariableDeclaration_return retval = new Java_JavaP.localVariableDeclaration_return();
        retval.start = input.LT(1);
        int localVariableDeclaration_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.variableModifiers_return mods = null;

        Java_JavaP.type_return ref = null;

        Java_JavaP.variableDeclarators_return decls = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 93) ) { return retval; }
            // JavaP.g:1273:5: (mods= variableModifiers ref= type decls= variableDeclarators )
            // JavaP.g:1273:9: mods= variableModifiers ref= type decls= variableDeclarators
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_variableModifiers_in_localVariableDeclaration5637);
            mods=variableModifiers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mods.getTree());
            pushFollow(FOLLOW_type_in_localVariableDeclaration5641);
            ref=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ref.getTree());
            if ( state.backtracking==0 ) {
              retval.element = new LocalVariableDeclarator(ref.element);
            }
            pushFollow(FOLLOW_variableDeclarators_in_localVariableDeclaration5647);
            decls=variableDeclarators();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, decls.getTree());
            if ( state.backtracking==0 ) {
              for(VariableDeclaration decl: decls.element) {retval.element.add(decl);}
            }
            if ( state.backtracking==0 ) {
              for(Modifier mod : mods.element) {retval.element.addModifier(mod);}
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 93, localVariableDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "localVariableDeclaration"

    public static class variableModifiers_return extends ParserRuleReturnScope {
        public List<Modifier> element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variableModifiers"
    // JavaP.g:1277:1: variableModifiers returns [List<Modifier> element] : (mod= variableModifier )* ;
    public final Java_JavaP.variableModifiers_return variableModifiers() throws RecognitionException {
        Java_JavaP.variableModifiers_return retval = new Java_JavaP.variableModifiers_return();
        retval.start = input.LT(1);
        int variableModifiers_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.variableModifier_return mod = null;



        retval.element = new ArrayList<Modifier>();
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 94) ) { return retval; }
            // JavaP.g:1279:5: ( (mod= variableModifier )* )
            // JavaP.g:1279:9: (mod= variableModifier )*
            {
            root_0 = (Object)adaptor.nil();

            // JavaP.g:1279:9: (mod= variableModifier )*
            loop113:
            do {
                int alt113=2;
                int LA113_0 = input.LA(1);

                if ( (LA113_0==57||LA113_0==97) ) {
                    alt113=1;
                }


                switch (alt113) {
            	case 1 :
            	    // JavaP.g:1279:10: mod= variableModifier
            	    {
            	    pushFollow(FOLLOW_variableModifier_in_variableModifiers5689);
            	    mod=variableModifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, mod.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.element.add(mod.element);
            	    }

            	    }
            	    break;

            	default :
            	    break loop113;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 94, variableModifiers_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variableModifiers"

    public static class statement_return extends ParserRuleReturnScope {
        public Statement element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "statement"
    // JavaP.g:1282:1: statement returns [Statement element] : (bl= block | ASSERT asexpr= expression ( ':' asexprx= expression )? ';' | ifkey= 'if' ifexpr= parExpression ifif= statement ( options {k=1; } : elsekey= 'else' ifelse= statement )? | forkey= 'for' '(' forc= forControl ')' forstat= statement | whilkey= 'while' wexs= parExpression wstat= statement | dokey= 'do' dostat= statement whilekey= 'while' doex= parExpression ';' | trykey= 'try' (ress= resources )? traaibl= block (cts= catches finkey= 'finally' trybl= block | ctss= catches | finnkey= 'finally' trybll= block )? | switchkey= 'switch' swexpr= parExpression '{' cases= switchBlockStatementGroups '}' | synkey= 'synchronized' synexpr= parExpression synstat= block | retkey= 'return' (retex= expression )? ';' | throwkey= 'throw' threx= expression ';' | breakkey= 'break' (name= identifierRule )? ';' | continuekey= 'continue' (name= identifierRule )? ';' | ';' | stattex= statementExpression ';' | name= identifierRule ':' labstat= statement );
    public final Java_JavaP.statement_return statement() throws RecognitionException {
        Java_JavaP.statement_return retval = new Java_JavaP.statement_return();
        retval.start = input.LT(1);
        int statement_StartIndex = input.index();
        Object root_0 = null;

        Token ifkey=null;
        Token elsekey=null;
        Token forkey=null;
        Token whilkey=null;
        Token dokey=null;
        Token whilekey=null;
        Token trykey=null;
        Token finkey=null;
        Token finnkey=null;
        Token switchkey=null;
        Token synkey=null;
        Token retkey=null;
        Token throwkey=null;
        Token breakkey=null;
        Token continuekey=null;
        Token ASSERT156=null;
        Token char_literal157=null;
        Token char_literal158=null;
        Token char_literal159=null;
        Token char_literal160=null;
        Token char_literal161=null;
        Token char_literal162=null;
        Token char_literal163=null;
        Token char_literal164=null;
        Token char_literal165=null;
        Token char_literal166=null;
        Token char_literal167=null;
        Token char_literal168=null;
        Token char_literal169=null;
        Token char_literal170=null;
        Java_JavaP.block_return bl = null;

        Java_JavaP.expression_return asexpr = null;

        Java_JavaP.expression_return asexprx = null;

        Java_JavaP.parExpression_return ifexpr = null;

        Java_JavaP.statement_return ifif = null;

        Java_JavaP.statement_return ifelse = null;

        Java_JavaP.forControl_return forc = null;

        Java_JavaP.statement_return forstat = null;

        Java_JavaP.parExpression_return wexs = null;

        Java_JavaP.statement_return wstat = null;

        Java_JavaP.statement_return dostat = null;

        Java_JavaP.parExpression_return doex = null;

        Java_JavaP.resources_return ress = null;

        Java_JavaP.block_return traaibl = null;

        Java_JavaP.catches_return cts = null;

        Java_JavaP.block_return trybl = null;

        Java_JavaP.catches_return ctss = null;

        Java_JavaP.block_return trybll = null;

        Java_JavaP.parExpression_return swexpr = null;

        Java_JavaP.switchBlockStatementGroups_return cases = null;

        Java_JavaP.parExpression_return synexpr = null;

        Java_JavaP.block_return synstat = null;

        Java_JavaP.expression_return retex = null;

        Java_JavaP.expression_return threx = null;

        Java_JavaP.identifierRule_return name = null;

        Java_JavaP.statementExpression_return stattex = null;

        Java_JavaP.statement_return labstat = null;


        Object ifkey_tree=null;
        Object elsekey_tree=null;
        Object forkey_tree=null;
        Object whilkey_tree=null;
        Object dokey_tree=null;
        Object whilekey_tree=null;
        Object trykey_tree=null;
        Object finkey_tree=null;
        Object finnkey_tree=null;
        Object switchkey_tree=null;
        Object synkey_tree=null;
        Object retkey_tree=null;
        Object throwkey_tree=null;
        Object breakkey_tree=null;
        Object continuekey_tree=null;
        Object ASSERT156_tree=null;
        Object char_literal157_tree=null;
        Object char_literal158_tree=null;
        Object char_literal159_tree=null;
        Object char_literal160_tree=null;
        Object char_literal161_tree=null;
        Object char_literal162_tree=null;
        Object char_literal163_tree=null;
        Object char_literal164_tree=null;
        Object char_literal165_tree=null;
        Object char_literal166_tree=null;
        Object char_literal167_tree=null;
        Object char_literal168_tree=null;
        Object char_literal169_tree=null;
        Object char_literal170_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 95) ) { return retval; }
            // JavaP.g:1285:5: (bl= block | ASSERT asexpr= expression ( ':' asexprx= expression )? ';' | ifkey= 'if' ifexpr= parExpression ifif= statement ( options {k=1; } : elsekey= 'else' ifelse= statement )? | forkey= 'for' '(' forc= forControl ')' forstat= statement | whilkey= 'while' wexs= parExpression wstat= statement | dokey= 'do' dostat= statement whilekey= 'while' doex= parExpression ';' | trykey= 'try' (ress= resources )? traaibl= block (cts= catches finkey= 'finally' trybl= block | ctss= catches | finnkey= 'finally' trybll= block )? | switchkey= 'switch' swexpr= parExpression '{' cases= switchBlockStatementGroups '}' | synkey= 'synchronized' synexpr= parExpression synstat= block | retkey= 'return' (retex= expression )? ';' | throwkey= 'throw' threx= expression ';' | breakkey= 'break' (name= identifierRule )? ';' | continuekey= 'continue' (name= identifierRule )? ';' | ';' | stattex= statementExpression ';' | name= identifierRule ':' labstat= statement )
            int alt121=16;
            alt121 = dfa121.predict(input);
            switch (alt121) {
                case 1 :
                    // JavaP.g:1285:7: bl= block
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_block_in_statement5720);
                    bl=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, bl.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = bl.element;
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:1286:9: ASSERT asexpr= expression ( ':' asexprx= expression )? ';'
                    {
                    root_0 = (Object)adaptor.nil();

                    ASSERT156=(Token)match(input,ASSERT,FOLLOW_ASSERT_in_statement5732); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ASSERT156_tree = (Object)adaptor.create(ASSERT156);
                    adaptor.addChild(root_0, ASSERT156_tree);
                    }
                    pushFollow(FOLLOW_expression_in_statement5736);
                    asexpr=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, asexpr.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element=new AssertStatement(asexpr.element);
                    }
                    // JavaP.g:1286:87: ( ':' asexprx= expression )?
                    int alt114=2;
                    int LA114_0 = input.LA(1);

                    if ( (LA114_0==98) ) {
                        alt114=1;
                    }
                    switch (alt114) {
                        case 1 :
                            // JavaP.g:1286:88: ':' asexprx= expression
                            {
                            char_literal157=(Token)match(input,98,FOLLOW_98_in_statement5740); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal157_tree = (Object)adaptor.create(char_literal157);
                            adaptor.addChild(root_0, char_literal157_tree);
                            }
                            pushFollow(FOLLOW_expression_in_statement5744);
                            asexprx=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, asexprx.getTree());
                            if ( state.backtracking==0 ) {
                              ((AssertStatement)retval.element).setMessageExpression(asexprx.element);
                            }

                            }
                            break;

                    }

                    char_literal158=(Token)match(input,48,FOLLOW_48_in_statement5750); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal158_tree = (Object)adaptor.create(char_literal158);
                    adaptor.addChild(root_0, char_literal158_tree);
                    }

                    }
                    break;
                case 3 :
                    // JavaP.g:1287:9: ifkey= 'if' ifexpr= parExpression ifif= statement ( options {k=1; } : elsekey= 'else' ifelse= statement )?
                    {
                    root_0 = (Object)adaptor.nil();

                    ifkey=(Token)match(input,99,FOLLOW_99_in_statement5762); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ifkey_tree = (Object)adaptor.create(ifkey);
                    adaptor.addChild(root_0, ifkey_tree);
                    }
                    pushFollow(FOLLOW_parExpression_in_statement5766);
                    ifexpr=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ifexpr.getTree());
                    pushFollow(FOLLOW_statement_in_statement5770);
                    ifif=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ifif.getTree());
                    // JavaP.g:1287:56: ( options {k=1; } : elsekey= 'else' ifelse= statement )?
                    int alt115=2;
                    int LA115_0 = input.LA(1);

                    if ( (LA115_0==100) ) {
                        int LA115_1 = input.LA(2);

                        if ( (synpred151_JavaP()) ) {
                            alt115=1;
                        }
                    }
                    switch (alt115) {
                        case 1 :
                            // JavaP.g:1287:72: elsekey= 'else' ifelse= statement
                            {
                            elsekey=(Token)match(input,100,FOLLOW_100_in_statement5782); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            elsekey_tree = (Object)adaptor.create(elsekey);
                            adaptor.addChild(root_0, elsekey_tree);
                            }
                            pushFollow(FOLLOW_statement_in_statement5786);
                            ifelse=statement();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, ifelse.getTree());

                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {
                      retval.element=new IfThenElseStatement(ifexpr.element, ifif.element, (ifelse == null ? null : ifelse.element));
                                setKeyword(retval.element,ifkey);
                                if(ifelse != null) {
                                  setKeyword(ifelse.element,elsekey);
                                }
                               
                    }

                    }
                    break;
                case 4 :
                    // JavaP.g:1294:9: forkey= 'for' '(' forc= forControl ')' forstat= statement
                    {
                    root_0 = (Object)adaptor.nil();

                    forkey=(Token)match(input,101,FOLLOW_101_in_statement5811); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    forkey_tree = (Object)adaptor.create(forkey);
                    adaptor.addChild(root_0, forkey_tree);
                    }
                    char_literal159=(Token)match(input,90,FOLLOW_90_in_statement5813); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal159_tree = (Object)adaptor.create(char_literal159);
                    adaptor.addChild(root_0, char_literal159_tree);
                    }
                    pushFollow(FOLLOW_forControl_in_statement5817);
                    forc=forControl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, forc.getTree());
                    char_literal160=(Token)match(input,91,FOLLOW_91_in_statement5819); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal160_tree = (Object)adaptor.create(char_literal160);
                    adaptor.addChild(root_0, char_literal160_tree);
                    }
                    pushFollow(FOLLOW_statement_in_statement5823);
                    forstat=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, forstat.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = new ForStatement(forc.element,forstat.element);
                              setKeyword(retval.element,forkey);
                    }

                    }
                    break;
                case 5 :
                    // JavaP.g:1297:9: whilkey= 'while' wexs= parExpression wstat= statement
                    {
                    root_0 = (Object)adaptor.nil();

                    whilkey=(Token)match(input,102,FOLLOW_102_in_statement5845); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    whilkey_tree = (Object)adaptor.create(whilkey);
                    adaptor.addChild(root_0, whilkey_tree);
                    }
                    pushFollow(FOLLOW_parExpression_in_statement5849);
                    wexs=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wexs.getTree());
                    pushFollow(FOLLOW_statement_in_statement5853);
                    wstat=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, wstat.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = new WhileStatement(wexs.element, wstat.element);
                              setKeyword(retval.element,whilkey);
                    }

                    }
                    break;
                case 6 :
                    // JavaP.g:1300:9: dokey= 'do' dostat= statement whilekey= 'while' doex= parExpression ';'
                    {
                    root_0 = (Object)adaptor.nil();

                    dokey=(Token)match(input,103,FOLLOW_103_in_statement5875); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    dokey_tree = (Object)adaptor.create(dokey);
                    adaptor.addChild(root_0, dokey_tree);
                    }
                    pushFollow(FOLLOW_statement_in_statement5879);
                    dostat=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dostat.getTree());
                    whilekey=(Token)match(input,102,FOLLOW_102_in_statement5883); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    whilekey_tree = (Object)adaptor.create(whilekey);
                    adaptor.addChild(root_0, whilekey_tree);
                    }
                    pushFollow(FOLLOW_parExpression_in_statement5887);
                    doex=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, doex.getTree());
                    char_literal161=(Token)match(input,48,FOLLOW_48_in_statement5889); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal161_tree = (Object)adaptor.create(char_literal161);
                    adaptor.addChild(root_0, char_literal161_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element= new DoStatement(doex.element, dostat.element);
                              setKeyword(retval.element,dokey);
                              setKeyword(retval.element,whilekey);
                    }

                    }
                    break;
                case 7 :
                    // JavaP.g:1304:9: trykey= 'try' (ress= resources )? traaibl= block (cts= catches finkey= 'finally' trybl= block | ctss= catches | finnkey= 'finally' trybll= block )?
                    {
                    root_0 = (Object)adaptor.nil();

                    trykey=(Token)match(input,104,FOLLOW_104_in_statement5911); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    trykey_tree = (Object)adaptor.create(trykey);
                    adaptor.addChild(root_0, trykey_tree);
                    }
                    // JavaP.g:1304:26: (ress= resources )?
                    int alt116=2;
                    int LA116_0 = input.LA(1);

                    if ( (LA116_0==90) ) {
                        alt116=1;
                    }
                    switch (alt116) {
                        case 1 :
                            // JavaP.g:0:0: ress= resources
                            {
                            pushFollow(FOLLOW_resources_in_statement5915);
                            ress=resources();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, ress.getTree());

                            }
                            break;

                    }

                    pushFollow(FOLLOW_block_in_statement5920);
                    traaibl=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, traaibl.getTree());
                    if ( state.backtracking==0 ) {

                               retval.element = new JavaTryStatement(traaibl.element);
                               ((JavaTryStatement)retval.element).setResourceBlock((ress!=null?ress.element:null));
                               setKeyword(retval.element,trykey);
                               
                    }
                    // JavaP.g:1310:9: (cts= catches finkey= 'finally' trybl= block | ctss= catches | finnkey= 'finally' trybll= block )?
                    int alt117=4;
                    alt117 = dfa117.predict(input);
                    switch (alt117) {
                        case 1 :
                            // JavaP.g:1310:11: cts= catches finkey= 'finally' trybl= block
                            {
                            pushFollow(FOLLOW_catches_in_statement5944);
                            cts=catches();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, cts.getTree());
                            finkey=(Token)match(input,105,FOLLOW_105_in_statement5948); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            finkey_tree = (Object)adaptor.create(finkey);
                            adaptor.addChild(root_0, finkey_tree);
                            }
                            pushFollow(FOLLOW_block_in_statement5952);
                            trybl=block();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, trybl.getTree());
                            if ( state.backtracking==0 ) {
                              ((TryStatement)retval.element).addAllCatchClauses(cts.element);
                                          ((TryStatement)retval.element).setFinallyClause(new FinallyClause(trybl.element));
                                          setKeyword(retval.element,finkey);
                                         
                            }

                            }
                            break;
                        case 2 :
                            // JavaP.g:1315:11: ctss= catches
                            {
                            pushFollow(FOLLOW_catches_in_statement5979);
                            ctss=catches();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, ctss.getTree());
                            if ( state.backtracking==0 ) {
                              ((TryStatement)retval.element).addAllCatchClauses(ctss.element);
                            }

                            }
                            break;
                        case 3 :
                            // JavaP.g:1316:13: finnkey= 'finally' trybll= block
                            {
                            finnkey=(Token)match(input,105,FOLLOW_105_in_statement5997); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            finnkey_tree = (Object)adaptor.create(finnkey);
                            adaptor.addChild(root_0, finnkey_tree);
                            }
                            pushFollow(FOLLOW_block_in_statement6001);
                            trybll=block();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, trybll.getTree());
                            if ( state.backtracking==0 ) {
                              ((TryStatement)retval.element).setFinallyClause(new FinallyClause(trybll.element));
                                         setKeyword(retval.element,finnkey);
                            }

                            }
                            break;

                    }


                    }
                    break;
                case 8 :
                    // JavaP.g:1320:9: switchkey= 'switch' swexpr= parExpression '{' cases= switchBlockStatementGroups '}'
                    {
                    root_0 = (Object)adaptor.nil();

                    switchkey=(Token)match(input,106,FOLLOW_106_in_statement6037); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    switchkey_tree = (Object)adaptor.create(switchkey);
                    adaptor.addChild(root_0, switchkey_tree);
                    }
                    pushFollow(FOLLOW_parExpression_in_statement6041);
                    swexpr=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, swexpr.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = new SwitchStatement(swexpr.element);
                                setKeyword(retval.element,switchkey);
                    }
                    char_literal162=(Token)match(input,66,FOLLOW_66_in_statement6065); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal162_tree = (Object)adaptor.create(char_literal162);
                    adaptor.addChild(root_0, char_literal162_tree);
                    }
                    pushFollow(FOLLOW_switchBlockStatementGroups_in_statement6069);
                    cases=switchBlockStatementGroups();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cases.getTree());
                    if ( state.backtracking==0 ) {
                      ((SwitchStatement)retval.element).addAllCases(cases.element);
                    }
                    char_literal163=(Token)match(input,67,FOLLOW_67_in_statement6072); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal163_tree = (Object)adaptor.create(char_literal163);
                    adaptor.addChild(root_0, char_literal163_tree);
                    }

                    }
                    break;
                case 9 :
                    // JavaP.g:1324:9: synkey= 'synchronized' synexpr= parExpression synstat= block
                    {
                    root_0 = (Object)adaptor.nil();

                    synkey=(Token)match(input,75,FOLLOW_75_in_statement6084); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    synkey_tree = (Object)adaptor.create(synkey);
                    adaptor.addChild(root_0, synkey_tree);
                    }
                    pushFollow(FOLLOW_parExpression_in_statement6088);
                    synexpr=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, synexpr.getTree());
                    pushFollow(FOLLOW_block_in_statement6092);
                    synstat=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, synstat.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = new SynchronizedStatement(synexpr.element,synstat.element);
                                setKeyword(retval.element,synkey);
                    }

                    }
                    break;
                case 10 :
                    // JavaP.g:1327:9: retkey= 'return' (retex= expression )? ';'
                    {
                    root_0 = (Object)adaptor.nil();

                    retkey=(Token)match(input,107,FOLLOW_107_in_statement6116); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    retkey_tree = (Object)adaptor.create(retkey);
                    adaptor.addChild(root_0, retkey_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new ReturnStatement();
                                   setKeyword(retval.element,retkey);
                    }
                    // JavaP.g:1330:11: (retex= expression )?
                    int alt118=2;
                    int LA118_0 = input.LA(1);

                    if ( (LA118_0==IntegerLiteral||LA118_0==FloatingPointLiteral||(LA118_0>=CharacterLiteral && LA118_0<=StringLiteral)||LA118_0==Identifier||LA118_0==69||(LA118_0>=80 && LA118_0<=87)||(LA118_0>=89 && LA118_0<=90)||(LA118_0>=93 && LA118_0<=96)||(LA118_0>=127 && LA118_0<=128)||(LA118_0>=131 && LA118_0<=135)) ) {
                        alt118=1;
                    }
                    switch (alt118) {
                        case 1 :
                            // JavaP.g:1330:12: retex= expression
                            {
                            pushFollow(FOLLOW_expression_in_statement6145);
                            retex=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, retex.getTree());
                            if ( state.backtracking==0 ) {
                              ((ReturnStatement)retval.element).setExpression(retex.element);
                            }

                            }
                            break;

                    }

                    char_literal164=(Token)match(input,48,FOLLOW_48_in_statement6151); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal164_tree = (Object)adaptor.create(char_literal164);
                    adaptor.addChild(root_0, char_literal164_tree);
                    }

                    }
                    break;
                case 11 :
                    // JavaP.g:1331:9: throwkey= 'throw' threx= expression ';'
                    {
                    root_0 = (Object)adaptor.nil();

                    throwkey=(Token)match(input,108,FOLLOW_108_in_statement6163); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    throwkey_tree = (Object)adaptor.create(throwkey);
                    adaptor.addChild(root_0, throwkey_tree);
                    }
                    pushFollow(FOLLOW_expression_in_statement6167);
                    threx=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, threx.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = new ThrowStatement(threx.element);
                              setKeyword(retval.element,throwkey);
                    }
                    char_literal165=(Token)match(input,48,FOLLOW_48_in_statement6187); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal165_tree = (Object)adaptor.create(char_literal165);
                    adaptor.addChild(root_0, char_literal165_tree);
                    }

                    }
                    break;
                case 12 :
                    // JavaP.g:1335:9: breakkey= 'break' (name= identifierRule )? ';'
                    {
                    root_0 = (Object)adaptor.nil();

                    breakkey=(Token)match(input,109,FOLLOW_109_in_statement6199); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    breakkey_tree = (Object)adaptor.create(breakkey);
                    adaptor.addChild(root_0, breakkey_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new BreakStatement();
                              setKeyword(retval.element,breakkey);
                    }
                    // JavaP.g:1338:9: (name= identifierRule )?
                    int alt119=2;
                    int LA119_0 = input.LA(1);

                    if ( (LA119_0==Identifier) ) {
                        alt119=1;
                    }
                    switch (alt119) {
                        case 1 :
                            // JavaP.g:1338:10: name= identifierRule
                            {
                            pushFollow(FOLLOW_identifierRule_in_statement6222);
                            name=identifierRule();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, name.getTree());
                            if ( state.backtracking==0 ) {
                              ((BreakStatement)retval.element).setLabel((name!=null?input.toString(name.start,name.stop):null));
                            }

                            }
                            break;

                    }

                    char_literal166=(Token)match(input,48,FOLLOW_48_in_statement6228); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal166_tree = (Object)adaptor.create(char_literal166);
                    adaptor.addChild(root_0, char_literal166_tree);
                    }

                    }
                    break;
                case 13 :
                    // JavaP.g:1339:9: continuekey= 'continue' (name= identifierRule )? ';'
                    {
                    root_0 = (Object)adaptor.nil();

                    continuekey=(Token)match(input,110,FOLLOW_110_in_statement6240); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    continuekey_tree = (Object)adaptor.create(continuekey);
                    adaptor.addChild(root_0, continuekey_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new ContinueStatement();
                              setKeyword(retval.element,continuekey);
                    }
                    // JavaP.g:1342:9: (name= identifierRule )?
                    int alt120=2;
                    int LA120_0 = input.LA(1);

                    if ( (LA120_0==Identifier) ) {
                        alt120=1;
                    }
                    switch (alt120) {
                        case 1 :
                            // JavaP.g:1342:10: name= identifierRule
                            {
                            pushFollow(FOLLOW_identifierRule_in_statement6263);
                            name=identifierRule();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, name.getTree());
                            if ( state.backtracking==0 ) {
                              ((ContinueStatement)retval.element).setLabel((name!=null?input.toString(name.start,name.stop):null));
                            }

                            }
                            break;

                    }

                    char_literal167=(Token)match(input,48,FOLLOW_48_in_statement6269); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal167_tree = (Object)adaptor.create(char_literal167);
                    adaptor.addChild(root_0, char_literal167_tree);
                    }

                    }
                    break;
                case 14 :
                    // JavaP.g:1343:9: ';'
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal168=(Token)match(input,48,FOLLOW_48_in_statement6279); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal168_tree = (Object)adaptor.create(char_literal168);
                    adaptor.addChild(root_0, char_literal168_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new EmptyStatement();
                    }

                    }
                    break;
                case 15 :
                    // JavaP.g:1344:9: stattex= statementExpression ';'
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_statementExpression_in_statement6293);
                    stattex=statementExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stattex.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = new StatementExpression(stattex.element);
                    }
                    char_literal169=(Token)match(input,48,FOLLOW_48_in_statement6297); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal169_tree = (Object)adaptor.create(char_literal169);
                    adaptor.addChild(root_0, char_literal169_tree);
                    }

                    }
                    break;
                case 16 :
                    // JavaP.g:1345:9: name= identifierRule ':' labstat= statement
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_identifierRule_in_statement6309);
                    name=identifierRule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name.getTree());
                    char_literal170=(Token)match(input,98,FOLLOW_98_in_statement6311); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal170_tree = (Object)adaptor.create(char_literal170);
                    adaptor.addChild(root_0, char_literal170_tree);
                    }
                    pushFollow(FOLLOW_statement_in_statement6315);
                    labstat=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, labstat.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = new LabeledStatement((name!=null?input.toString(name.start,name.stop):null),labstat.element);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              check_null(retval.element);
              setLocation(retval.element, (CommonToken)retval.start, (CommonToken)retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 95, statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "statement"

    public static class resources_return extends ParserRuleReturnScope {
        public ResourceBlock element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "resources"
    // JavaP.g:1348:1: resources returns [ResourceBlock element] : '(' d= localVariableDeclaration ( ';' decl= localVariableDeclaration )* ( ';' )? ')' ;
    public final Java_JavaP.resources_return resources() throws RecognitionException {
        Java_JavaP.resources_return retval = new Java_JavaP.resources_return();
        retval.start = input.LT(1);
        int resources_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal171=null;
        Token char_literal172=null;
        Token char_literal173=null;
        Token char_literal174=null;
        Java_JavaP.localVariableDeclaration_return d = null;

        Java_JavaP.localVariableDeclaration_return decl = null;


        Object char_literal171_tree=null;
        Object char_literal172_tree=null;
        Object char_literal173_tree=null;
        Object char_literal174_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 96) ) { return retval; }
            // JavaP.g:1349:5: ( '(' d= localVariableDeclaration ( ';' decl= localVariableDeclaration )* ( ';' )? ')' )
            // JavaP.g:1349:7: '(' d= localVariableDeclaration ( ';' decl= localVariableDeclaration )* ( ';' )? ')'
            {
            root_0 = (Object)adaptor.nil();

            char_literal171=(Token)match(input,90,FOLLOW_90_in_resources6338); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal171_tree = (Object)adaptor.create(char_literal171);
            adaptor.addChild(root_0, char_literal171_tree);
            }
            if ( state.backtracking==0 ) {
              retval.element = new ResourceBlock();
            }
            pushFollow(FOLLOW_localVariableDeclaration_in_resources6357);
            d=localVariableDeclaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, d.getTree());
            if ( state.backtracking==0 ) {
              retval.element.addResource((d!=null?d.element:null));
            }
            // JavaP.g:1351:11: ( ';' decl= localVariableDeclaration )*
            loop122:
            do {
                int alt122=2;
                int LA122_0 = input.LA(1);

                if ( (LA122_0==48) ) {
                    int LA122_1 = input.LA(2);

                    if ( (LA122_1==Identifier||LA122_1==57||(LA122_1>=80 && LA122_1<=87)||LA122_1==97) ) {
                        alt122=1;
                    }


                }


                switch (alt122) {
            	case 1 :
            	    // JavaP.g:1351:12: ';' decl= localVariableDeclaration
            	    {
            	    char_literal172=(Token)match(input,48,FOLLOW_48_in_resources6372); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal172_tree = (Object)adaptor.create(char_literal172);
            	    adaptor.addChild(root_0, char_literal172_tree);
            	    }
            	    pushFollow(FOLLOW_localVariableDeclaration_in_resources6378);
            	    decl=localVariableDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, decl.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.element.addResource((decl!=null?decl.element:null));
            	    }

            	    }
            	    break;

            	default :
            	    break loop122;
                }
            } while (true);

            // JavaP.g:1352:11: ( ';' )?
            int alt123=2;
            int LA123_0 = input.LA(1);

            if ( (LA123_0==48) ) {
                alt123=1;
            }
            switch (alt123) {
                case 1 :
                    // JavaP.g:1352:12: ';'
                    {
                    char_literal173=(Token)match(input,48,FOLLOW_48_in_resources6395); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal173_tree = (Object)adaptor.create(char_literal173);
                    adaptor.addChild(root_0, char_literal173_tree);
                    }

                    }
                    break;

            }

            char_literal174=(Token)match(input,91,FOLLOW_91_in_resources6405); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal174_tree = (Object)adaptor.create(char_literal174);
            adaptor.addChild(root_0, char_literal174_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 96, resources_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "resources"

    public static class catches_return extends ParserRuleReturnScope {
        public List<CatchClause> element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "catches"
    // JavaP.g:1356:1: catches returns [List<CatchClause> element] : (ct= catchClause )+ ;
    public final Java_JavaP.catches_return catches() throws RecognitionException {
        Java_JavaP.catches_return retval = new Java_JavaP.catches_return();
        retval.start = input.LT(1);
        int catches_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.catchClause_return ct = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 97) ) { return retval; }
            // JavaP.g:1358:5: ( (ct= catchClause )+ )
            // JavaP.g:1358:9: (ct= catchClause )+
            {
            root_0 = (Object)adaptor.nil();

            if ( state.backtracking==0 ) {
              retval.element = new ArrayList<CatchClause>();
            }
            // JavaP.g:1358:58: (ct= catchClause )+
            int cnt124=0;
            loop124:
            do {
                int alt124=2;
                int LA124_0 = input.LA(1);

                if ( (LA124_0==111) ) {
                    alt124=1;
                }


                switch (alt124) {
            	case 1 :
            	    // JavaP.g:1358:59: ct= catchClause
            	    {
            	    pushFollow(FOLLOW_catchClause_in_catches6437);
            	    ct=catchClause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ct.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.element.add(ct.element);
            	    }

            	    }
            	    break;

            	default :
            	    if ( cnt124 >= 1 ) break loop124;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(124, input);
                        throw eee;
                }
                cnt124++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              assert(retval.element != null);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 97, catches_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "catches"

    public static class catchClause_return extends ParserRuleReturnScope {
        public CatchClause element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "catchClause"
    // JavaP.g:1361:1: catchClause returns [CatchClause element] : catchkey= 'catch' '(' par= catchParameter ')' bl= block ;
    public final Java_JavaP.catchClause_return catchClause() throws RecognitionException {
        Java_JavaP.catchClause_return retval = new Java_JavaP.catchClause_return();
        retval.start = input.LT(1);
        int catchClause_StartIndex = input.index();
        Object root_0 = null;

        Token catchkey=null;
        Token char_literal175=null;
        Token char_literal176=null;
        Java_JavaP.catchParameter_return par = null;

        Java_JavaP.block_return bl = null;


        Object catchkey_tree=null;
        Object char_literal175_tree=null;
        Object char_literal176_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 98) ) { return retval; }
            // JavaP.g:1363:5: (catchkey= 'catch' '(' par= catchParameter ')' bl= block )
            // JavaP.g:1363:9: catchkey= 'catch' '(' par= catchParameter ')' bl= block
            {
            root_0 = (Object)adaptor.nil();

            catchkey=(Token)match(input,111,FOLLOW_111_in_catchClause6470); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            catchkey_tree = (Object)adaptor.create(catchkey);
            adaptor.addChild(root_0, catchkey_tree);
            }
            char_literal175=(Token)match(input,90,FOLLOW_90_in_catchClause6472); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal175_tree = (Object)adaptor.create(char_literal175);
            adaptor.addChild(root_0, char_literal175_tree);
            }
            pushFollow(FOLLOW_catchParameter_in_catchClause6476);
            par=catchParameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, par.getTree());
            char_literal176=(Token)match(input,91,FOLLOW_91_in_catchClause6478); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal176_tree = (Object)adaptor.create(char_literal176);
            adaptor.addChild(root_0, char_literal176_tree);
            }
            pushFollow(FOLLOW_block_in_catchClause6482);
            bl=block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, bl.getTree());
            if ( state.backtracking==0 ) {
              retval.element = new CatchClause(par.element, bl.element);
                      setKeyword(retval.element,catchkey);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              assert(retval.element != null);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 98, catchClause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "catchClause"

    public static class catchParameter_return extends ParserRuleReturnScope {
        public FormalParameter element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "catchParameter"
    // JavaP.g:1370:1: catchParameter returns [FormalParameter element] : mods= variableModifiers tref= possibleUnionType name= variableDeclaratorId ;
    public final Java_JavaP.catchParameter_return catchParameter() throws RecognitionException {
        Java_JavaP.catchParameter_return retval = new Java_JavaP.catchParameter_return();
        retval.start = input.LT(1);
        int catchParameter_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.variableModifiers_return mods = null;

        Java_JavaP.possibleUnionType_return tref = null;

        Java_JavaP.variableDeclaratorId_return name = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 99) ) { return retval; }
            // JavaP.g:1372:5: (mods= variableModifiers tref= possibleUnionType name= variableDeclaratorId )
            // JavaP.g:1372:9: mods= variableModifiers tref= possibleUnionType name= variableDeclaratorId
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_variableModifiers_in_catchParameter6523);
            mods=variableModifiers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mods.getTree());
            pushFollow(FOLLOW_possibleUnionType_in_catchParameter6527);
            tref=possibleUnionType();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, tref.getTree());
            pushFollow(FOLLOW_variableDeclaratorId_in_catchParameter6531);
            name=variableDeclaratorId();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name.getTree());
            if ( state.backtracking==0 ) {
              retval.element = new FormalParameter(name.element.name(), myToArray(tref.element, name.element));
                       setLocation(retval.element, mods.start, name.stop);
                      
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              assert(retval.element != null);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 99, catchParameter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "catchParameter"

    public static class formalParameter_return extends ParserRuleReturnScope {
        public FormalParameter element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "formalParameter"
    // JavaP.g:1380:1: formalParameter returns [FormalParameter element] : mods= variableModifiers tref= type name= variableDeclaratorId ;
    public final Java_JavaP.formalParameter_return formalParameter() throws RecognitionException {
        Java_JavaP.formalParameter_return retval = new Java_JavaP.formalParameter_return();
        retval.start = input.LT(1);
        int formalParameter_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.variableModifiers_return mods = null;

        Java_JavaP.type_return tref = null;

        Java_JavaP.variableDeclaratorId_return name = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 100) ) { return retval; }
            // JavaP.g:1382:5: (mods= variableModifiers tref= type name= variableDeclaratorId )
            // JavaP.g:1382:9: mods= variableModifiers tref= type name= variableDeclaratorId
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_variableModifiers_in_formalParameter6572);
            mods=variableModifiers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mods.getTree());
            pushFollow(FOLLOW_type_in_formalParameter6576);
            tref=type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, tref.getTree());
            pushFollow(FOLLOW_variableDeclaratorId_in_formalParameter6580);
            name=variableDeclaratorId();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name.getTree());
            if ( state.backtracking==0 ) {
              retval.element = new FormalParameter(name.element.name(), myToArray(tref.element, name.element));
                       setLocation(retval.element, mods.start, name.stop);
                      
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              assert(retval.element != null);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 100, formalParameter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "formalParameter"

    public static class switchBlockStatementGroups_return extends ParserRuleReturnScope {
        public List<SwitchCase> element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "switchBlockStatementGroups"
    // JavaP.g:1388:1: switchBlockStatementGroups returns [List<SwitchCase> element] : (cs= switchCase )* ;
    public final Java_JavaP.switchBlockStatementGroups_return switchBlockStatementGroups() throws RecognitionException {
        Java_JavaP.switchBlockStatementGroups_return retval = new Java_JavaP.switchBlockStatementGroups_return();
        retval.start = input.LT(1);
        int switchBlockStatementGroups_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.switchCase_return cs = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 101) ) { return retval; }
            // JavaP.g:1390:5: ( (cs= switchCase )* )
            // JavaP.g:1390:9: (cs= switchCase )*
            {
            root_0 = (Object)adaptor.nil();

            if ( state.backtracking==0 ) {
              retval.element = new ArrayList<SwitchCase>();
            }
            // JavaP.g:1390:56: (cs= switchCase )*
            loop125:
            do {
                int alt125=2;
                int LA125_0 = input.LA(1);

                if ( (LA125_0==78||LA125_0==112) ) {
                    alt125=1;
                }


                switch (alt125) {
            	case 1 :
            	    // JavaP.g:1390:57: cs= switchCase
            	    {
            	    pushFollow(FOLLOW_switchCase_in_switchBlockStatementGroups6621);
            	    cs=switchCase();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, cs.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.element.add(cs.element);
            	    }

            	    }
            	    break;

            	default :
            	    break loop125;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              assert(retval.element != null);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 101, switchBlockStatementGroups_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "switchBlockStatementGroups"

    public static class switchCase_return extends ParserRuleReturnScope {
        public SwitchCase element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "switchCase"
    // JavaP.g:1397:1: switchCase returns [SwitchCase element] : label= switchLabel ( blockStatement )* ;
    public final Java_JavaP.switchCase_return switchCase() throws RecognitionException {
        Java_JavaP.switchCase_return retval = new Java_JavaP.switchCase_return();
        retval.start = input.LT(1);
        int switchCase_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.switchLabel_return label = null;

        Java_JavaP.blockStatement_return blockStatement177 = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 102) ) { return retval; }
            // JavaP.g:1399:5: (label= switchLabel ( blockStatement )* )
            // JavaP.g:1399:9: label= switchLabel ( blockStatement )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_switchLabel_in_switchCase6656);
            label=switchLabel();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, label.getTree());
            if ( state.backtracking==0 ) {
              retval.element = new JavaSwitchCase(label.element);
            }
            // JavaP.g:1399:81: ( blockStatement )*
            loop126:
            do {
                int alt126=2;
                int LA126_0 = input.LA(1);

                if ( (LA126_0==IntegerLiteral||LA126_0==FloatingPointLiteral||(LA126_0>=CharacterLiteral && LA126_0<=StringLiteral)||(LA126_0>=ENUM && LA126_0<=ASSERT)||LA126_0==Identifier||LA126_0==48||LA126_0==50||(LA126_0>=53 && LA126_0<=59)||LA126_0==66||(LA126_0>=68 && LA126_0<=69)||LA126_0==75||(LA126_0>=80 && LA126_0<=87)||(LA126_0>=89 && LA126_0<=90)||(LA126_0>=93 && LA126_0<=97)||LA126_0==99||(LA126_0>=101 && LA126_0<=104)||(LA126_0>=106 && LA126_0<=110)||(LA126_0>=127 && LA126_0<=128)||(LA126_0>=131 && LA126_0<=135)) ) {
                    alt126=1;
                }


                switch (alt126) {
            	case 1 :
            	    // JavaP.g:0:0: blockStatement
            	    {
            	    pushFollow(FOLLOW_blockStatement_in_switchCase6660);
            	    blockStatement177=blockStatement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, blockStatement177.getTree());

            	    }
            	    break;

            	default :
            	    break loop126;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              assert(retval.element != null);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 102, switchCase_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "switchCase"

    public static class switchLabel_return extends ParserRuleReturnScope {
        public SwitchLabel element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "switchLabel"
    // JavaP.g:1402:1: switchLabel returns [SwitchLabel element] : ( 'case' csexpr= constantExpression ':' | 'case' enumname= enumConstantName ':' | 'default' ':' );
    public final Java_JavaP.switchLabel_return switchLabel() throws RecognitionException {
        Java_JavaP.switchLabel_return retval = new Java_JavaP.switchLabel_return();
        retval.start = input.LT(1);
        int switchLabel_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal178=null;
        Token char_literal179=null;
        Token string_literal180=null;
        Token char_literal181=null;
        Token string_literal182=null;
        Token char_literal183=null;
        Java_JavaP.constantExpression_return csexpr = null;

        Java_JavaP.enumConstantName_return enumname = null;


        Object string_literal178_tree=null;
        Object char_literal179_tree=null;
        Object string_literal180_tree=null;
        Object char_literal181_tree=null;
        Object string_literal182_tree=null;
        Object char_literal183_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 103) ) { return retval; }
            // JavaP.g:1404:5: ( 'case' csexpr= constantExpression ':' | 'case' enumname= enumConstantName ':' | 'default' ':' )
            int alt127=3;
            int LA127_0 = input.LA(1);

            if ( (LA127_0==112) ) {
                int LA127_1 = input.LA(2);

                if ( (LA127_1==IntegerLiteral||LA127_1==FloatingPointLiteral||(LA127_1>=CharacterLiteral && LA127_1<=StringLiteral)||LA127_1==69||(LA127_1>=80 && LA127_1<=87)||(LA127_1>=89 && LA127_1<=90)||(LA127_1>=93 && LA127_1<=96)||(LA127_1>=127 && LA127_1<=128)||(LA127_1>=131 && LA127_1<=135)) ) {
                    alt127=1;
                }
                else if ( (LA127_1==Identifier) ) {
                    int LA127_4 = input.LA(3);

                    if ( ((LA127_4>=51 && LA127_4<=52)||LA127_4==62||(LA127_4>=64 && LA127_4<=65)||LA127_4==70||LA127_4==73||LA127_4==79||LA127_4==88||LA127_4==90||(LA127_4>=113 && LA127_4<=132)) ) {
                        alt127=1;
                    }
                    else if ( (LA127_4==98) ) {
                        int LA127_5 = input.LA(4);

                        if ( (synpred177_JavaP()) ) {
                            alt127=1;
                        }
                        else if ( (synpred178_JavaP()) ) {
                            alt127=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 127, 5, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 127, 4, input);

                        throw nvae;
                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 127, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA127_0==78) ) {
                alt127=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 127, 0, input);

                throw nvae;
            }
            switch (alt127) {
                case 1 :
                    // JavaP.g:1404:9: 'case' csexpr= constantExpression ':'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal178=(Token)match(input,112,FOLLOW_112_in_switchLabel6688); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal178_tree = (Object)adaptor.create(string_literal178);
                    adaptor.addChild(root_0, string_literal178_tree);
                    }
                    pushFollow(FOLLOW_constantExpression_in_switchLabel6692);
                    csexpr=constantExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, csexpr.getTree());
                    char_literal179=(Token)match(input,98,FOLLOW_98_in_switchLabel6694); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal179_tree = (Object)adaptor.create(char_literal179);
                    adaptor.addChild(root_0, char_literal179_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new CaseLabel(csexpr.element);
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:1405:9: 'case' enumname= enumConstantName ':'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal180=(Token)match(input,112,FOLLOW_112_in_switchLabel6706); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal180_tree = (Object)adaptor.create(string_literal180);
                    adaptor.addChild(root_0, string_literal180_tree);
                    }
                    pushFollow(FOLLOW_enumConstantName_in_switchLabel6710);
                    enumname=enumConstantName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enumname.getTree());
                    char_literal181=(Token)match(input,98,FOLLOW_98_in_switchLabel6712); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal181_tree = (Object)adaptor.create(char_literal181);
                    adaptor.addChild(root_0, char_literal181_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new EnumLabel(enumname.element);
                    }

                    }
                    break;
                case 3 :
                    // JavaP.g:1406:9: 'default' ':'
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal182=(Token)match(input,78,FOLLOW_78_in_switchLabel6724); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal182_tree = (Object)adaptor.create(string_literal182);
                    adaptor.addChild(root_0, string_literal182_tree);
                    }
                    char_literal183=(Token)match(input,98,FOLLOW_98_in_switchLabel6726); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal183_tree = (Object)adaptor.create(char_literal183);
                    adaptor.addChild(root_0, char_literal183_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new DefaultLabel();
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              assert(retval.element != null);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 103, switchLabel_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "switchLabel"

    public static class forControl_return extends ParserRuleReturnScope {
        public ForControl element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forControl"
    // JavaP.g:1409:1: forControl returns [ForControl element] options {k=3; } : (enh= enhancedForControl | (in= forInit )? ';' (e= expression )? ';' (u= forUpdate )? );
    public final Java_JavaP.forControl_return forControl() throws RecognitionException {
        Java_JavaP.forControl_return retval = new Java_JavaP.forControl_return();
        retval.start = input.LT(1);
        int forControl_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal184=null;
        Token char_literal185=null;
        Java_JavaP.enhancedForControl_return enh = null;

        Java_JavaP.forInit_return in = null;

        Java_JavaP.expression_return e = null;

        Java_JavaP.forUpdate_return u = null;


        Object char_literal184_tree=null;
        Object char_literal185_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 104) ) { return retval; }
            // JavaP.g:1412:5: (enh= enhancedForControl | (in= forInit )? ';' (e= expression )? ';' (u= forUpdate )? )
            int alt131=2;
            alt131 = dfa131.predict(input);
            switch (alt131) {
                case 1 :
                    // JavaP.g:1412:9: enh= enhancedForControl
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_enhancedForControl_in_forControl6764);
                    enh=enhancedForControl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, enh.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element=enh.element;
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:1413:9: (in= forInit )? ';' (e= expression )? ';' (u= forUpdate )?
                    {
                    root_0 = (Object)adaptor.nil();

                    // JavaP.g:1413:11: (in= forInit )?
                    int alt128=2;
                    int LA128_0 = input.LA(1);

                    if ( (LA128_0==IntegerLiteral||LA128_0==FloatingPointLiteral||(LA128_0>=CharacterLiteral && LA128_0<=StringLiteral)||LA128_0==Identifier||LA128_0==57||LA128_0==69||(LA128_0>=80 && LA128_0<=87)||(LA128_0>=89 && LA128_0<=90)||(LA128_0>=93 && LA128_0<=97)||(LA128_0>=127 && LA128_0<=128)||(LA128_0>=131 && LA128_0<=135)) ) {
                        alt128=1;
                    }
                    switch (alt128) {
                        case 1 :
                            // JavaP.g:0:0: in= forInit
                            {
                            pushFollow(FOLLOW_forInit_in_forControl6778);
                            in=forInit();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, in.getTree());

                            }
                            break;

                    }

                    char_literal184=(Token)match(input,48,FOLLOW_48_in_forControl6781); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal184_tree = (Object)adaptor.create(char_literal184);
                    adaptor.addChild(root_0, char_literal184_tree);
                    }
                    // JavaP.g:1413:26: (e= expression )?
                    int alt129=2;
                    int LA129_0 = input.LA(1);

                    if ( (LA129_0==IntegerLiteral||LA129_0==FloatingPointLiteral||(LA129_0>=CharacterLiteral && LA129_0<=StringLiteral)||LA129_0==Identifier||LA129_0==69||(LA129_0>=80 && LA129_0<=87)||(LA129_0>=89 && LA129_0<=90)||(LA129_0>=93 && LA129_0<=96)||(LA129_0>=127 && LA129_0<=128)||(LA129_0>=131 && LA129_0<=135)) ) {
                        alt129=1;
                    }
                    switch (alt129) {
                        case 1 :
                            // JavaP.g:0:0: e= expression
                            {
                            pushFollow(FOLLOW_expression_in_forControl6785);
                            e=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, e.getTree());

                            }
                            break;

                    }

                    char_literal185=(Token)match(input,48,FOLLOW_48_in_forControl6788); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal185_tree = (Object)adaptor.create(char_literal185);
                    adaptor.addChild(root_0, char_literal185_tree);
                    }
                    // JavaP.g:1413:44: (u= forUpdate )?
                    int alt130=2;
                    int LA130_0 = input.LA(1);

                    if ( (LA130_0==IntegerLiteral||LA130_0==FloatingPointLiteral||(LA130_0>=CharacterLiteral && LA130_0<=StringLiteral)||LA130_0==Identifier||LA130_0==69||(LA130_0>=80 && LA130_0<=87)||(LA130_0>=89 && LA130_0<=90)||(LA130_0>=93 && LA130_0<=96)||(LA130_0>=127 && LA130_0<=128)||(LA130_0>=131 && LA130_0<=135)) ) {
                        alt130=1;
                    }
                    switch (alt130) {
                        case 1 :
                            // JavaP.g:0:0: u= forUpdate
                            {
                            pushFollow(FOLLOW_forUpdate_in_forControl6792);
                            u=forUpdate();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, u.getTree());

                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {
                      retval.element = new SimpleForControl((in!=null?in.element:null),(e!=null?e.element:null),(u!=null?u.element:null));
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              assert(retval.element != null);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 104, forControl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "forControl"

    public static class forInit_return extends ParserRuleReturnScope {
        public ForInit element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forInit"
    // JavaP.g:1416:1: forInit returns [ForInit element] : (local= localVariableDeclaration | el= expressionList );
    public final Java_JavaP.forInit_return forInit() throws RecognitionException {
        Java_JavaP.forInit_return retval = new Java_JavaP.forInit_return();
        retval.start = input.LT(1);
        int forInit_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.localVariableDeclaration_return local = null;

        Java_JavaP.expressionList_return el = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 105) ) { return retval; }
            // JavaP.g:1418:5: (local= localVariableDeclaration | el= expressionList )
            int alt132=2;
            alt132 = dfa132.predict(input);
            switch (alt132) {
                case 1 :
                    // JavaP.g:1418:9: local= localVariableDeclaration
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_localVariableDeclaration_in_forInit6824);
                    local=localVariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, local.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element=local.element;
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:1419:9: el= expressionList
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_expressionList_in_forInit6838);
                    el=expressionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, el.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = new StatementExprList(); for(Expression expr: el.element){((StatementExprList)retval.element).addStatement(new StatementExpression(expr));};
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              assert(retval.element != null);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 105, forInit_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "forInit"

    public static class enhancedForControl_return extends ParserRuleReturnScope {
        public ForControl element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "enhancedForControl"
    // JavaP.g:1422:1: enhancedForControl returns [ForControl element] : local= localVariableDeclaration ':' ex= expression ;
    public final Java_JavaP.enhancedForControl_return enhancedForControl() throws RecognitionException {
        Java_JavaP.enhancedForControl_return retval = new Java_JavaP.enhancedForControl_return();
        retval.start = input.LT(1);
        int enhancedForControl_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal186=null;
        Java_JavaP.localVariableDeclaration_return local = null;

        Java_JavaP.expression_return ex = null;


        Object char_literal186_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 106) ) { return retval; }
            // JavaP.g:1424:5: (local= localVariableDeclaration ':' ex= expression )
            // JavaP.g:1424:9: local= localVariableDeclaration ':' ex= expression
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_localVariableDeclaration_in_enhancedForControl6869);
            local=localVariableDeclaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, local.getTree());
            char_literal186=(Token)match(input,98,FOLLOW_98_in_enhancedForControl6871); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal186_tree = (Object)adaptor.create(char_literal186);
            adaptor.addChild(root_0, char_literal186_tree);
            }
            pushFollow(FOLLOW_expression_in_enhancedForControl6875);
            ex=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ex.getTree());
            if ( state.backtracking==0 ) {
              retval.element = new EnhancedForControl(local.element, ex.element);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              assert(retval.element != null);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 106, enhancedForControl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enhancedForControl"

    public static class forUpdate_return extends ParserRuleReturnScope {
        public StatementExprList element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forUpdate"
    // JavaP.g:1427:1: forUpdate returns [StatementExprList element] : el= expressionList ;
    public final Java_JavaP.forUpdate_return forUpdate() throws RecognitionException {
        Java_JavaP.forUpdate_return retval = new Java_JavaP.forUpdate_return();
        retval.start = input.LT(1);
        int forUpdate_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.expressionList_return el = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 107) ) { return retval; }
            // JavaP.g:1428:5: (el= expressionList )
            // JavaP.g:1428:9: el= expressionList
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_expressionList_in_forUpdate6902);
            el=expressionList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, el.getTree());
            if ( state.backtracking==0 ) {
              retval.element = new StatementExprList(); for(Expression expr: el.element){((StatementExprList)retval.element).addStatement(new StatementExpression(expr));};
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 107, forUpdate_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "forUpdate"

    public static class parExpression_return extends ParserRuleReturnScope {
        public Expression element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parExpression"
    // JavaP.g:1433:1: parExpression returns [Expression element] : s= '(' expr= expression e= ')' ;
    public final Java_JavaP.parExpression_return parExpression() throws RecognitionException {
        Java_JavaP.parExpression_return retval = new Java_JavaP.parExpression_return();
        retval.start = input.LT(1);
        int parExpression_StartIndex = input.index();
        Object root_0 = null;

        Token s=null;
        Token e=null;
        Java_JavaP.expression_return expr = null;


        Object s_tree=null;
        Object e_tree=null;


        Token start=null;
        Token stop=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 108) ) { return retval; }
            // JavaP.g:1441:5: (s= '(' expr= expression e= ')' )
            // JavaP.g:1441:9: s= '(' expr= expression e= ')'
            {
            root_0 = (Object)adaptor.nil();

            s=(Token)match(input,90,FOLLOW_90_in_parExpression6939); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            s_tree = (Object)adaptor.create(s);
            adaptor.addChild(root_0, s_tree);
            }
            pushFollow(FOLLOW_expression_in_parExpression6943);
            expr=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expr.getTree());
            if ( state.backtracking==0 ) {
              retval.element = expr.element;
            }
            e=(Token)match(input,91,FOLLOW_91_in_parExpression6949); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            e_tree = (Object)adaptor.create(e);
            adaptor.addChild(root_0, e_tree);
            }
            if ( state.backtracking==0 ) {

                        start = s;
                        stop = e;
                      
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

              setLocation(retval.element,start,stop);

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 108, parExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "parExpression"

    public static class expressionList_return extends ParserRuleReturnScope {
        public List<Expression> element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expressionList"
    // JavaP.g:1448:1: expressionList returns [List<Expression> element] : e= expression ( ',' ex= expression )* ;
    public final Java_JavaP.expressionList_return expressionList() throws RecognitionException {
        Java_JavaP.expressionList_return retval = new Java_JavaP.expressionList_return();
        retval.start = input.LT(1);
        int expressionList_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal187=null;
        Java_JavaP.expression_return e = null;

        Java_JavaP.expression_return ex = null;


        Object char_literal187_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 109) ) { return retval; }
            // JavaP.g:1449:5: (e= expression ( ',' ex= expression )* )
            // JavaP.g:1449:9: e= expression ( ',' ex= expression )*
            {
            root_0 = (Object)adaptor.nil();

            if ( state.backtracking==0 ) {
              retval.element = new ArrayList<Expression>();
            }
            pushFollow(FOLLOW_expression_in_expressionList6986);
            e=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, e.getTree());
            if ( state.backtracking==0 ) {
              if(e.element == null) {System.out.println((e!=null?input.toString(e.start,e.stop):null));throw new RuntimeException("parser error");}
                       retval.element.add(e.element);
            }
            // JavaP.g:1452:10: ( ',' ex= expression )*
            loop133:
            do {
                int alt133=2;
                int LA133_0 = input.LA(1);

                if ( (LA133_0==63) ) {
                    alt133=1;
                }


                switch (alt133) {
            	case 1 :
            	    // JavaP.g:1452:11: ',' ex= expression
            	    {
            	    char_literal187=(Token)match(input,63,FOLLOW_63_in_expressionList7008); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal187_tree = (Object)adaptor.create(char_literal187);
            	    adaptor.addChild(root_0, char_literal187_tree);
            	    }
            	    pushFollow(FOLLOW_expression_in_expressionList7012);
            	    ex=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, ex.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.element.add(ex.element);
            	    }

            	    }
            	    break;

            	default :
            	    break loop133;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 109, expressionList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "expressionList"

    public static class statementExpression_return extends ParserRuleReturnScope {
        public Expression element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "statementExpression"
    // JavaP.g:1455:1: statementExpression returns [Expression element] : e= expression ;
    public final Java_JavaP.statementExpression_return statementExpression() throws RecognitionException {
        Java_JavaP.statementExpression_return retval = new Java_JavaP.statementExpression_return();
        retval.start = input.LT(1);
        int statementExpression_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.expression_return e = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 110) ) { return retval; }
            // JavaP.g:1456:5: (e= expression )
            // JavaP.g:1456:9: e= expression
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_expression_in_statementExpression7041);
            e=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, e.getTree());
            if ( state.backtracking==0 ) {
              retval.element = e.element;
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 110, statementExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "statementExpression"

    public static class constantExpression_return extends ParserRuleReturnScope {
        public Expression element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constantExpression"
    // JavaP.g:1459:1: constantExpression returns [Expression element] : e= expression ;
    public final Java_JavaP.constantExpression_return constantExpression() throws RecognitionException {
        Java_JavaP.constantExpression_return retval = new Java_JavaP.constantExpression_return();
        retval.start = input.LT(1);
        int constantExpression_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.expression_return e = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 111) ) { return retval; }
            // JavaP.g:1460:5: (e= expression )
            // JavaP.g:1460:9: e= expression
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_expression_in_constantExpression7068);
            e=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, e.getTree());
            if ( state.backtracking==0 ) {
              retval.element = e.element;
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 111, constantExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constantExpression"

    public static class expression_return extends ParserRuleReturnScope {
        public Expression element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expression"
    // JavaP.g:1463:1: expression returns [Expression element] : ex= conditionalExpression (op= assignmentOperator exx= expression )? ;
    public final Java_JavaP.expression_return expression() throws RecognitionException {
        Java_JavaP.expression_return retval = new Java_JavaP.expression_return();
        retval.start = input.LT(1);
        int expression_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.conditionalExpression_return ex = null;

        Java_JavaP.assignmentOperator_return op = null;

        Java_JavaP.expression_return exx = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 112) ) { return retval; }
            // JavaP.g:1465:5: (ex= conditionalExpression (op= assignmentOperator exx= expression )? )
            // JavaP.g:1465:9: ex= conditionalExpression (op= assignmentOperator exx= expression )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_conditionalExpression_in_expression7099);
            ex=conditionalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ex.getTree());
            if ( state.backtracking==0 ) {
              retval.element=ex.element;
            }
            // JavaP.g:1465:63: (op= assignmentOperator exx= expression )?
            int alt134=2;
            alt134 = dfa134.predict(input);
            switch (alt134) {
                case 1 :
                    // JavaP.g:1465:64: op= assignmentOperator exx= expression
                    {
                    pushFollow(FOLLOW_assignmentOperator_in_expression7106);
                    op=assignmentOperator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, op.getTree());
                    pushFollow(FOLLOW_expression_in_expression7110);
                    exx=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exx.getTree());
                    if ( state.backtracking==0 ) {
                      String txt = (op!=null?input.toString(op.start,op.stop):null);
                               if(txt.equals("=")) {
                                 retval.element = expressionFactory().createAssignmentExpression(ex.element,exx.element);
                               } else {
                                 retval.element = createInfixOperatorInvocation((op!=null?input.toString(op.start,op.stop):null),ex.element);
                                 ((InfixOperatorInvocation)retval.element).addArgument(exx.element);
                               }
                               //setName(retval.element,op.start,op.stop);
                               setLocation(retval.element,retval.start,exx.stop);
                              
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              check_null(retval.element);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 112, expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "expression"

    public static class assignmentOperator_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "assignmentOperator"
    // JavaP.g:1479:1: assignmentOperator : ( '=' | '+=' | '-=' | '*=' | '/=' | '&=' | '|=' | '^=' | '%=' | ( '<' '<' '=' )=>t1= '<' t2= '<' t3= '=' {...}? | ( '>' '>' '>' '=' )=>t1= '>' t2= '>' t3= '>' t4= '=' {...}? | ( '>' '>' '=' )=>t1= '>' t2= '>' t3= '=' {...}?);
    public final Java_JavaP.assignmentOperator_return assignmentOperator() throws RecognitionException {
        Java_JavaP.assignmentOperator_return retval = new Java_JavaP.assignmentOperator_return();
        retval.start = input.LT(1);
        int assignmentOperator_StartIndex = input.index();
        Object root_0 = null;

        Token t1=null;
        Token t2=null;
        Token t3=null;
        Token t4=null;
        Token char_literal188=null;
        Token string_literal189=null;
        Token string_literal190=null;
        Token string_literal191=null;
        Token string_literal192=null;
        Token string_literal193=null;
        Token string_literal194=null;
        Token string_literal195=null;
        Token string_literal196=null;

        Object t1_tree=null;
        Object t2_tree=null;
        Object t3_tree=null;
        Object t4_tree=null;
        Object char_literal188_tree=null;
        Object string_literal189_tree=null;
        Object string_literal190_tree=null;
        Object string_literal191_tree=null;
        Object string_literal192_tree=null;
        Object string_literal193_tree=null;
        Object string_literal194_tree=null;
        Object string_literal195_tree=null;
        Object string_literal196_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 113) ) { return retval; }
            // JavaP.g:1480:5: ( '=' | '+=' | '-=' | '*=' | '/=' | '&=' | '|=' | '^=' | '%=' | ( '<' '<' '=' )=>t1= '<' t2= '<' t3= '=' {...}? | ( '>' '>' '>' '=' )=>t1= '>' t2= '>' t3= '>' t4= '=' {...}? | ( '>' '>' '=' )=>t1= '>' t2= '>' t3= '=' {...}?)
            int alt135=12;
            alt135 = dfa135.predict(input);
            switch (alt135) {
                case 1 :
                    // JavaP.g:1480:9: '='
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal188=(Token)match(input,73,FOLLOW_73_in_assignmentOperator7150); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal188_tree = (Object)adaptor.create(char_literal188);
                    adaptor.addChild(root_0, char_literal188_tree);
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:1481:9: '+='
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal189=(Token)match(input,113,FOLLOW_113_in_assignmentOperator7160); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal189_tree = (Object)adaptor.create(string_literal189);
                    adaptor.addChild(root_0, string_literal189_tree);
                    }

                    }
                    break;
                case 3 :
                    // JavaP.g:1482:9: '-='
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal190=(Token)match(input,114,FOLLOW_114_in_assignmentOperator7170); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal190_tree = (Object)adaptor.create(string_literal190);
                    adaptor.addChild(root_0, string_literal190_tree);
                    }

                    }
                    break;
                case 4 :
                    // JavaP.g:1483:9: '*='
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal191=(Token)match(input,115,FOLLOW_115_in_assignmentOperator7180); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal191_tree = (Object)adaptor.create(string_literal191);
                    adaptor.addChild(root_0, string_literal191_tree);
                    }

                    }
                    break;
                case 5 :
                    // JavaP.g:1484:9: '/='
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal192=(Token)match(input,116,FOLLOW_116_in_assignmentOperator7190); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal192_tree = (Object)adaptor.create(string_literal192);
                    adaptor.addChild(root_0, string_literal192_tree);
                    }

                    }
                    break;
                case 6 :
                    // JavaP.g:1485:9: '&='
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal193=(Token)match(input,117,FOLLOW_117_in_assignmentOperator7200); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal193_tree = (Object)adaptor.create(string_literal193);
                    adaptor.addChild(root_0, string_literal193_tree);
                    }

                    }
                    break;
                case 7 :
                    // JavaP.g:1486:9: '|='
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal194=(Token)match(input,118,FOLLOW_118_in_assignmentOperator7210); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal194_tree = (Object)adaptor.create(string_literal194);
                    adaptor.addChild(root_0, string_literal194_tree);
                    }

                    }
                    break;
                case 8 :
                    // JavaP.g:1487:9: '^='
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal195=(Token)match(input,119,FOLLOW_119_in_assignmentOperator7220); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal195_tree = (Object)adaptor.create(string_literal195);
                    adaptor.addChild(root_0, string_literal195_tree);
                    }

                    }
                    break;
                case 9 :
                    // JavaP.g:1488:9: '%='
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal196=(Token)match(input,120,FOLLOW_120_in_assignmentOperator7230); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal196_tree = (Object)adaptor.create(string_literal196);
                    adaptor.addChild(root_0, string_literal196_tree);
                    }

                    }
                    break;
                case 10 :
                    // JavaP.g:1489:9: ( '<' '<' '=' )=>t1= '<' t2= '<' t3= '=' {...}?
                    {
                    root_0 = (Object)adaptor.nil();

                    t1=(Token)match(input,62,FOLLOW_62_in_assignmentOperator7251); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t1_tree = (Object)adaptor.create(t1);
                    adaptor.addChild(root_0, t1_tree);
                    }
                    t2=(Token)match(input,62,FOLLOW_62_in_assignmentOperator7255); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t2_tree = (Object)adaptor.create(t2);
                    adaptor.addChild(root_0, t2_tree);
                    }
                    t3=(Token)match(input,73,FOLLOW_73_in_assignmentOperator7259); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t3_tree = (Object)adaptor.create(t3);
                    adaptor.addChild(root_0, t3_tree);
                    }
                    if ( !(( t1.getLine() == t2.getLine() &&
                              t1.getCharPositionInLine() + 1 == t2.getCharPositionInLine() &&
                              t2.getLine() == t3.getLine() &&
                              t2.getCharPositionInLine() + 1 == t3.getCharPositionInLine() )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "assignmentOperator", " $t1.getLine() == $t2.getLine() &&\n          $t1.getCharPositionInLine() + 1 == $t2.getCharPositionInLine() &&\n          $t2.getLine() == $t3.getLine() &&\n          $t2.getCharPositionInLine() + 1 == $t3.getCharPositionInLine() ");
                    }

                    }
                    break;
                case 11 :
                    // JavaP.g:1494:9: ( '>' '>' '>' '=' )=>t1= '>' t2= '>' t3= '>' t4= '=' {...}?
                    {
                    root_0 = (Object)adaptor.nil();

                    t1=(Token)match(input,64,FOLLOW_64_in_assignmentOperator7292); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t1_tree = (Object)adaptor.create(t1);
                    adaptor.addChild(root_0, t1_tree);
                    }
                    t2=(Token)match(input,64,FOLLOW_64_in_assignmentOperator7296); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t2_tree = (Object)adaptor.create(t2);
                    adaptor.addChild(root_0, t2_tree);
                    }
                    t3=(Token)match(input,64,FOLLOW_64_in_assignmentOperator7300); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t3_tree = (Object)adaptor.create(t3);
                    adaptor.addChild(root_0, t3_tree);
                    }
                    t4=(Token)match(input,73,FOLLOW_73_in_assignmentOperator7304); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t4_tree = (Object)adaptor.create(t4);
                    adaptor.addChild(root_0, t4_tree);
                    }
                    if ( !(( t1.getLine() == t2.getLine() &&
                              t1.getCharPositionInLine() + 1 == t2.getCharPositionInLine() &&
                              t2.getLine() == t3.getLine() &&
                              t2.getCharPositionInLine() + 1 == t3.getCharPositionInLine() &&
                              t3.getLine() == t4.getLine() &&
                              t3.getCharPositionInLine() + 1 == t4.getCharPositionInLine() )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "assignmentOperator", " $t1.getLine() == $t2.getLine() &&\n          $t1.getCharPositionInLine() + 1 == $t2.getCharPositionInLine() &&\n          $t2.getLine() == $t3.getLine() &&\n          $t2.getCharPositionInLine() + 1 == $t3.getCharPositionInLine() &&\n          $t3.getLine() == $t4.getLine() &&\n          $t3.getCharPositionInLine() + 1 == $t4.getCharPositionInLine() ");
                    }

                    }
                    break;
                case 12 :
                    // JavaP.g:1501:9: ( '>' '>' '=' )=>t1= '>' t2= '>' t3= '=' {...}?
                    {
                    root_0 = (Object)adaptor.nil();

                    t1=(Token)match(input,64,FOLLOW_64_in_assignmentOperator7335); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t1_tree = (Object)adaptor.create(t1);
                    adaptor.addChild(root_0, t1_tree);
                    }
                    t2=(Token)match(input,64,FOLLOW_64_in_assignmentOperator7339); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t2_tree = (Object)adaptor.create(t2);
                    adaptor.addChild(root_0, t2_tree);
                    }
                    t3=(Token)match(input,73,FOLLOW_73_in_assignmentOperator7343); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t3_tree = (Object)adaptor.create(t3);
                    adaptor.addChild(root_0, t3_tree);
                    }
                    if ( !(( t1.getLine() == t2.getLine() &&
                              t1.getCharPositionInLine() + 1 == t2.getCharPositionInLine() &&
                              t2.getLine() == t3.getLine() &&
                              t2.getCharPositionInLine() + 1 == t3.getCharPositionInLine() )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "assignmentOperator", " $t1.getLine() == $t2.getLine() &&\n          $t1.getCharPositionInLine() + 1 == $t2.getCharPositionInLine() &&\n          $t2.getLine() == $t3.getLine() &&\n          $t2.getCharPositionInLine() + 1 == $t3.getCharPositionInLine() ");
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 113, assignmentOperator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "assignmentOperator"

    public static class conditionalExpression_return extends ParserRuleReturnScope {
        public Expression element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conditionalExpression"
    // JavaP.g:1508:1: conditionalExpression returns [Expression element] : ex= conditionalOrExpression ( '?' exx= expression ':' exxx= expression )? ;
    public final Java_JavaP.conditionalExpression_return conditionalExpression() throws RecognitionException {
        Java_JavaP.conditionalExpression_return retval = new Java_JavaP.conditionalExpression_return();
        retval.start = input.LT(1);
        int conditionalExpression_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal197=null;
        Token char_literal198=null;
        Java_JavaP.conditionalOrExpression_return ex = null;

        Java_JavaP.expression_return exx = null;

        Java_JavaP.expression_return exxx = null;


        Object char_literal197_tree=null;
        Object char_literal198_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 114) ) { return retval; }
            // JavaP.g:1510:5: (ex= conditionalOrExpression ( '?' exx= expression ':' exxx= expression )? )
            // JavaP.g:1510:9: ex= conditionalOrExpression ( '?' exx= expression ':' exxx= expression )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_conditionalOrExpression_in_conditionalExpression7382);
            ex=conditionalOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ex.getTree());
            if ( state.backtracking==0 ) {
              retval.element = ex.element;
            }
            // JavaP.g:1510:66: ( '?' exx= expression ':' exxx= expression )?
            int alt136=2;
            int LA136_0 = input.LA(1);

            if ( (LA136_0==88) ) {
                alt136=1;
            }
            switch (alt136) {
                case 1 :
                    // JavaP.g:1510:68: '?' exx= expression ':' exxx= expression
                    {
                    char_literal197=(Token)match(input,88,FOLLOW_88_in_conditionalExpression7387); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal197_tree = (Object)adaptor.create(char_literal197);
                    adaptor.addChild(root_0, char_literal197_tree);
                    }
                    pushFollow(FOLLOW_expression_in_conditionalExpression7391);
                    exx=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exx.getTree());
                    char_literal198=(Token)match(input,98,FOLLOW_98_in_conditionalExpression7393); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal198_tree = (Object)adaptor.create(char_literal198);
                    adaptor.addChild(root_0, char_literal198_tree);
                    }
                    pushFollow(FOLLOW_expression_in_conditionalExpression7397);
                    exxx=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exxx.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = expressionFactory().createConditionalExpression(retval.element,exx.element,exxx.element);
                               setLocation(retval.element,retval.start,exxx.stop);
                              
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              check_null(retval.element);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 114, conditionalExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "conditionalExpression"

    public static class conditionalOrExpression_return extends ParserRuleReturnScope {
        public Expression element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conditionalOrExpression"
    // JavaP.g:1517:1: conditionalOrExpression returns [Expression element] : ex= conditionalAndExpression ( '||' exx= conditionalAndExpression )* ;
    public final Java_JavaP.conditionalOrExpression_return conditionalOrExpression() throws RecognitionException {
        Java_JavaP.conditionalOrExpression_return retval = new Java_JavaP.conditionalOrExpression_return();
        retval.start = input.LT(1);
        int conditionalOrExpression_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal199=null;
        Java_JavaP.conditionalAndExpression_return ex = null;

        Java_JavaP.conditionalAndExpression_return exx = null;


        Object string_literal199_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 115) ) { return retval; }
            // JavaP.g:1519:5: (ex= conditionalAndExpression ( '||' exx= conditionalAndExpression )* )
            // JavaP.g:1519:9: ex= conditionalAndExpression ( '||' exx= conditionalAndExpression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_conditionalAndExpression_in_conditionalOrExpression7443);
            ex=conditionalAndExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ex.getTree());
            if ( state.backtracking==0 ) {
              retval.element = ex.element;
            }
            // JavaP.g:1519:68: ( '||' exx= conditionalAndExpression )*
            loop137:
            do {
                int alt137=2;
                int LA137_0 = input.LA(1);

                if ( (LA137_0==121) ) {
                    alt137=1;
                }


                switch (alt137) {
            	case 1 :
            	    // JavaP.g:1519:70: '||' exx= conditionalAndExpression
            	    {
            	    string_literal199=(Token)match(input,121,FOLLOW_121_in_conditionalOrExpression7449); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal199_tree = (Object)adaptor.create(string_literal199);
            	    adaptor.addChild(root_0, string_literal199_tree);
            	    }
            	    pushFollow(FOLLOW_conditionalAndExpression_in_conditionalOrExpression7453);
            	    exx=conditionalAndExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, exx.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.element = new ConditionalOrExpression(retval.element, exx.element);
            	               setLocation(retval.element,retval.start,exx.stop);
            	              
            	    }

            	    }
            	    break;

            	default :
            	    break loop137;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              check_null(retval.element);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 115, conditionalOrExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "conditionalOrExpression"

    public static class conditionalAndExpression_return extends ParserRuleReturnScope {
        public Expression element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "conditionalAndExpression"
    // JavaP.g:1525:1: conditionalAndExpression returns [Expression element] : ex= inclusiveOrExpression ( '&&' exx= inclusiveOrExpression )* ;
    public final Java_JavaP.conditionalAndExpression_return conditionalAndExpression() throws RecognitionException {
        Java_JavaP.conditionalAndExpression_return retval = new Java_JavaP.conditionalAndExpression_return();
        retval.start = input.LT(1);
        int conditionalAndExpression_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal200=null;
        Java_JavaP.inclusiveOrExpression_return ex = null;

        Java_JavaP.inclusiveOrExpression_return exx = null;


        Object string_literal200_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 116) ) { return retval; }
            // JavaP.g:1527:5: (ex= inclusiveOrExpression ( '&&' exx= inclusiveOrExpression )* )
            // JavaP.g:1527:9: ex= inclusiveOrExpression ( '&&' exx= inclusiveOrExpression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_inclusiveOrExpression_in_conditionalAndExpression7494);
            ex=inclusiveOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ex.getTree());
            if ( state.backtracking==0 ) {
              retval.element = ex.element;
            }
            // JavaP.g:1527:65: ( '&&' exx= inclusiveOrExpression )*
            loop138:
            do {
                int alt138=2;
                int LA138_0 = input.LA(1);

                if ( (LA138_0==122) ) {
                    alt138=1;
                }


                switch (alt138) {
            	case 1 :
            	    // JavaP.g:1527:67: '&&' exx= inclusiveOrExpression
            	    {
            	    string_literal200=(Token)match(input,122,FOLLOW_122_in_conditionalAndExpression7500); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    string_literal200_tree = (Object)adaptor.create(string_literal200);
            	    adaptor.addChild(root_0, string_literal200_tree);
            	    }
            	    pushFollow(FOLLOW_inclusiveOrExpression_in_conditionalAndExpression7504);
            	    exx=inclusiveOrExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, exx.getTree());
            	    if ( state.backtracking==0 ) {
            	      retval.element = new ConditionalAndExpression(retval.element, exx.element);
            	               setLocation(retval.element,retval.start,exx.stop);
            	              
            	    }

            	    }
            	    break;

            	default :
            	    break loop138;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              check_null(retval.element);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 116, conditionalAndExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "conditionalAndExpression"

    public static class inclusiveOrExpression_return extends ParserRuleReturnScope {
        public Expression element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inclusiveOrExpression"
    // JavaP.g:1533:1: inclusiveOrExpression returns [Expression element] : ex= exclusiveOrExpression ( '|' exx= exclusiveOrExpression )* ;
    public final Java_JavaP.inclusiveOrExpression_return inclusiveOrExpression() throws RecognitionException {
        Java_JavaP.inclusiveOrExpression_return retval = new Java_JavaP.inclusiveOrExpression_return();
        retval.start = input.LT(1);
        int inclusiveOrExpression_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal201=null;
        Java_JavaP.exclusiveOrExpression_return ex = null;

        Java_JavaP.exclusiveOrExpression_return exx = null;


        Object char_literal201_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 117) ) { return retval; }
            // JavaP.g:1535:5: (ex= exclusiveOrExpression ( '|' exx= exclusiveOrExpression )* )
            // JavaP.g:1535:9: ex= exclusiveOrExpression ( '|' exx= exclusiveOrExpression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression7545);
            ex=exclusiveOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ex.getTree());
            if ( state.backtracking==0 ) {
              retval.element = ex.element;
            }
            // JavaP.g:1535:65: ( '|' exx= exclusiveOrExpression )*
            loop139:
            do {
                int alt139=2;
                int LA139_0 = input.LA(1);

                if ( (LA139_0==79) ) {
                    alt139=1;
                }


                switch (alt139) {
            	case 1 :
            	    // JavaP.g:1535:67: '|' exx= exclusiveOrExpression
            	    {
            	    char_literal201=(Token)match(input,79,FOLLOW_79_in_inclusiveOrExpression7551); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal201_tree = (Object)adaptor.create(char_literal201);
            	    adaptor.addChild(root_0, char_literal201_tree);
            	    }
            	    pushFollow(FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression7555);
            	    exx=exclusiveOrExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, exx.getTree());
            	    if ( state.backtracking==0 ) {

            	               retval.element = createInfixOperatorInvocation("|", retval.element);
            	               ((InfixOperatorInvocation)retval.element).addArgument(exx.element);
            	               setLocation(retval.element,retval.start,exx.stop);
            	              
            	    }

            	    }
            	    break;

            	default :
            	    break loop139;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              check_null(retval.element);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 117, inclusiveOrExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inclusiveOrExpression"

    public static class exclusiveOrExpression_return extends ParserRuleReturnScope {
        public Expression element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "exclusiveOrExpression"
    // JavaP.g:1543:1: exclusiveOrExpression returns [Expression element] : ex= andExpression ( '^' exx= andExpression )* ;
    public final Java_JavaP.exclusiveOrExpression_return exclusiveOrExpression() throws RecognitionException {
        Java_JavaP.exclusiveOrExpression_return retval = new Java_JavaP.exclusiveOrExpression_return();
        retval.start = input.LT(1);
        int exclusiveOrExpression_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal202=null;
        Java_JavaP.andExpression_return ex = null;

        Java_JavaP.andExpression_return exx = null;


        Object char_literal202_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 118) ) { return retval; }
            // JavaP.g:1545:5: (ex= andExpression ( '^' exx= andExpression )* )
            // JavaP.g:1545:9: ex= andExpression ( '^' exx= andExpression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_andExpression_in_exclusiveOrExpression7596);
            ex=andExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ex.getTree());
            if ( state.backtracking==0 ) {
              retval.element = ex.element;
            }
            // JavaP.g:1545:57: ( '^' exx= andExpression )*
            loop140:
            do {
                int alt140=2;
                int LA140_0 = input.LA(1);

                if ( (LA140_0==123) ) {
                    alt140=1;
                }


                switch (alt140) {
            	case 1 :
            	    // JavaP.g:1545:59: '^' exx= andExpression
            	    {
            	    char_literal202=(Token)match(input,123,FOLLOW_123_in_exclusiveOrExpression7602); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal202_tree = (Object)adaptor.create(char_literal202);
            	    adaptor.addChild(root_0, char_literal202_tree);
            	    }
            	    pushFollow(FOLLOW_andExpression_in_exclusiveOrExpression7606);
            	    exx=andExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, exx.getTree());
            	    if ( state.backtracking==0 ) {

            	               retval.element = createInfixOperatorInvocation("^", retval.element);
            	               ((InfixOperatorInvocation)retval.element).addArgument(exx.element);
            	               setLocation(retval.element,retval.start,exx.stop);
            	              
            	    }

            	    }
            	    break;

            	default :
            	    break loop140;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              check_null(retval.element);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 118, exclusiveOrExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "exclusiveOrExpression"

    public static class andExpression_return extends ParserRuleReturnScope {
        public Expression element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "andExpression"
    // JavaP.g:1553:1: andExpression returns [Expression element] : ex= equalityExpression ( '&' exx= equalityExpression )* ;
    public final Java_JavaP.andExpression_return andExpression() throws RecognitionException {
        Java_JavaP.andExpression_return retval = new Java_JavaP.andExpression_return();
        retval.start = input.LT(1);
        int andExpression_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal203=null;
        Java_JavaP.equalityExpression_return ex = null;

        Java_JavaP.equalityExpression_return exx = null;


        Object char_literal203_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 119) ) { return retval; }
            // JavaP.g:1555:5: (ex= equalityExpression ( '&' exx= equalityExpression )* )
            // JavaP.g:1555:9: ex= equalityExpression ( '&' exx= equalityExpression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_equalityExpression_in_andExpression7644);
            ex=equalityExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ex.getTree());
            if ( state.backtracking==0 ) {
              retval.element = ex.element;
            }
            // JavaP.g:1555:62: ( '&' exx= equalityExpression )*
            loop141:
            do {
                int alt141=2;
                int LA141_0 = input.LA(1);

                if ( (LA141_0==65) ) {
                    alt141=1;
                }


                switch (alt141) {
            	case 1 :
            	    // JavaP.g:1555:64: '&' exx= equalityExpression
            	    {
            	    char_literal203=(Token)match(input,65,FOLLOW_65_in_andExpression7650); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal203_tree = (Object)adaptor.create(char_literal203);
            	    adaptor.addChild(root_0, char_literal203_tree);
            	    }
            	    pushFollow(FOLLOW_equalityExpression_in_andExpression7654);
            	    exx=equalityExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, exx.getTree());
            	    if ( state.backtracking==0 ) {

            	               retval.element = createInfixOperatorInvocation("&", retval.element);
            	               ((InfixOperatorInvocation)retval.element).addArgument(exx.element);
            	               setLocation(retval.element,retval.start,exx.stop);
            	              
            	    }

            	    }
            	    break;

            	default :
            	    break loop141;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              check_null(retval.element);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 119, andExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "andExpression"

    public static class equalityExpression_return extends ParserRuleReturnScope {
        public Expression element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "equalityExpression"
    // JavaP.g:1563:1: equalityExpression returns [Expression element] : ex= instanceOfExpression ( ( '==' | '!=' ) exx= instanceOfExpression )* ;
    public final Java_JavaP.equalityExpression_return equalityExpression() throws RecognitionException {
        Java_JavaP.equalityExpression_return retval = new Java_JavaP.equalityExpression_return();
        retval.start = input.LT(1);
        int equalityExpression_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal204=null;
        Token string_literal205=null;
        Java_JavaP.instanceOfExpression_return ex = null;

        Java_JavaP.instanceOfExpression_return exx = null;


        Object string_literal204_tree=null;
        Object string_literal205_tree=null;

        String op=null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 120) ) { return retval; }
            // JavaP.g:1566:5: (ex= instanceOfExpression ( ( '==' | '!=' ) exx= instanceOfExpression )* )
            // JavaP.g:1566:9: ex= instanceOfExpression ( ( '==' | '!=' ) exx= instanceOfExpression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_instanceOfExpression_in_equalityExpression7696);
            ex=instanceOfExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ex.getTree());
            if ( state.backtracking==0 ) {
              retval.element = ex.element;
            }
            // JavaP.g:1567:11: ( ( '==' | '!=' ) exx= instanceOfExpression )*
            loop143:
            do {
                int alt143=2;
                int LA143_0 = input.LA(1);

                if ( ((LA143_0>=124 && LA143_0<=125)) ) {
                    alt143=1;
                }


                switch (alt143) {
            	case 1 :
            	    // JavaP.g:1567:13: ( '==' | '!=' ) exx= instanceOfExpression
            	    {
            	    // JavaP.g:1567:13: ( '==' | '!=' )
            	    int alt142=2;
            	    int LA142_0 = input.LA(1);

            	    if ( (LA142_0==124) ) {
            	        alt142=1;
            	    }
            	    else if ( (LA142_0==125) ) {
            	        alt142=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 142, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt142) {
            	        case 1 :
            	            // JavaP.g:1567:14: '=='
            	            {
            	            string_literal204=(Token)match(input,124,FOLLOW_124_in_equalityExpression7714); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            string_literal204_tree = (Object)adaptor.create(string_literal204);
            	            adaptor.addChild(root_0, string_literal204_tree);
            	            }
            	            if ( state.backtracking==0 ) {
            	              op="==";
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // JavaP.g:1567:32: '!='
            	            {
            	            string_literal205=(Token)match(input,125,FOLLOW_125_in_equalityExpression7720); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            string_literal205_tree = (Object)adaptor.create(string_literal205);
            	            adaptor.addChild(root_0, string_literal205_tree);
            	            }
            	            if ( state.backtracking==0 ) {
            	              op="!=";
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_instanceOfExpression_in_equalityExpression7727);
            	    exx=instanceOfExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, exx.getTree());
            	    if ( state.backtracking==0 ) {

            	               /*
            	               if(op.equals("==")) {
            	                 retval.element = new EqualityExpression(ex.element, exx.element);
            	               } else {
            	                 retval.element = new NonEqualityExpression(ex.element, exx.element);
            	               }
            	               */

            	               retval.element = createInfixOperatorInvocation(op, retval.element);
            	               ((InfixOperatorInvocation)retval.element).addArgument(exx.element);

            	               setLocation(retval.element,retval.start,exx.stop);

            	              
            	    }

            	    }
            	    break;

            	default :
            	    break loop143;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              check_null(retval.element);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 120, equalityExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "equalityExpression"

    public static class instanceOfExpression_return extends ParserRuleReturnScope {
        public Expression element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "instanceOfExpression"
    // JavaP.g:1585:1: instanceOfExpression returns [Expression element] : ex= relationalExpression ( 'instanceof' tref= type )? ;
    public final Java_JavaP.instanceOfExpression_return instanceOfExpression() throws RecognitionException {
        Java_JavaP.instanceOfExpression_return retval = new Java_JavaP.instanceOfExpression_return();
        retval.start = input.LT(1);
        int instanceOfExpression_StartIndex = input.index();
        Object root_0 = null;

        Token string_literal206=null;
        Java_JavaP.relationalExpression_return ex = null;

        Java_JavaP.type_return tref = null;


        Object string_literal206_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 121) ) { return retval; }
            // JavaP.g:1587:5: (ex= relationalExpression ( 'instanceof' tref= type )? )
            // JavaP.g:1587:9: ex= relationalExpression ( 'instanceof' tref= type )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_relationalExpression_in_instanceOfExpression7769);
            ex=relationalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ex.getTree());
            if ( state.backtracking==0 ) {

                          //if(ex.element == null) {throw new Error("retval is null");}
                          retval.element = ex.element;
            }
            // JavaP.g:1590:8: ( 'instanceof' tref= type )?
            int alt144=2;
            int LA144_0 = input.LA(1);

            if ( (LA144_0==126) ) {
                alt144=1;
            }
            switch (alt144) {
                case 1 :
                    // JavaP.g:1590:9: 'instanceof' tref= type
                    {
                    string_literal206=(Token)match(input,126,FOLLOW_126_in_instanceOfExpression7781); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal206_tree = (Object)adaptor.create(string_literal206);
                    adaptor.addChild(root_0, string_literal206_tree);
                    }
                    pushFollow(FOLLOW_type_in_instanceOfExpression7785);
                    tref=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, tref.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = new InstanceofExpression(ex.element, tref.element);
                               setLocation(retval.element,ex.start,tref.stop);
                             
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              check_null(retval.element);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 121, instanceOfExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "instanceOfExpression"

    public static class relationalExpression_return extends ParserRuleReturnScope {
        public Expression element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "relationalExpression"
    // JavaP.g:1596:1: relationalExpression returns [Expression element] : ex= shiftExpression (op= relationalOp exx= shiftExpression )* ;
    public final Java_JavaP.relationalExpression_return relationalExpression() throws RecognitionException {
        Java_JavaP.relationalExpression_return retval = new Java_JavaP.relationalExpression_return();
        retval.start = input.LT(1);
        int relationalExpression_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.shiftExpression_return ex = null;

        Java_JavaP.relationalOp_return op = null;

        Java_JavaP.shiftExpression_return exx = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 122) ) { return retval; }
            // JavaP.g:1597:5: (ex= shiftExpression (op= relationalOp exx= shiftExpression )* )
            // JavaP.g:1597:9: ex= shiftExpression (op= relationalOp exx= shiftExpression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_shiftExpression_in_relationalExpression7822);
            ex=shiftExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ex.getTree());
            if ( state.backtracking==0 ) {

                            //if(ex.element == null) {throw new Error("retval is null");}
                            retval.element = ex.element;
            }
            // JavaP.g:1599:45: (op= relationalOp exx= shiftExpression )*
            loop145:
            do {
                int alt145=2;
                int LA145_0 = input.LA(1);

                if ( (LA145_0==62) ) {
                    int LA145_2 = input.LA(2);

                    if ( (LA145_2==IntegerLiteral||LA145_2==FloatingPointLiteral||(LA145_2>=CharacterLiteral && LA145_2<=StringLiteral)||LA145_2==Identifier||LA145_2==69||LA145_2==73||(LA145_2>=80 && LA145_2<=87)||(LA145_2>=89 && LA145_2<=90)||(LA145_2>=93 && LA145_2<=96)||(LA145_2>=127 && LA145_2<=128)||(LA145_2>=131 && LA145_2<=135)) ) {
                        alt145=1;
                    }


                }
                else if ( (LA145_0==64) ) {
                    int LA145_3 = input.LA(2);

                    if ( (LA145_3==IntegerLiteral||LA145_3==FloatingPointLiteral||(LA145_3>=CharacterLiteral && LA145_3<=StringLiteral)||LA145_3==Identifier||LA145_3==69||LA145_3==73||(LA145_3>=80 && LA145_3<=87)||(LA145_3>=89 && LA145_3<=90)||(LA145_3>=93 && LA145_3<=96)||(LA145_3>=127 && LA145_3<=128)||(LA145_3>=131 && LA145_3<=135)) ) {
                        alt145=1;
                    }


                }


                switch (alt145) {
            	case 1 :
            	    // JavaP.g:1599:47: op= relationalOp exx= shiftExpression
            	    {
            	    pushFollow(FOLLOW_relationalOp_in_relationalExpression7830);
            	    op=relationalOp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, op.getTree());
            	    pushFollow(FOLLOW_shiftExpression_in_relationalExpression7834);
            	    exx=shiftExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, exx.getTree());
            	    if ( state.backtracking==0 ) {

            	               retval.element = createInfixOperatorInvocation((op!=null?input.toString(op.start,op.stop):null), retval.element);
            	               ((InfixOperatorInvocation)retval.element).addArgument(exx.element);
            	               setLocation(retval.element,ex.start,exx.stop);
            	              
            	    }

            	    }
            	    break;

            	default :
            	    break loop145;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 122, relationalExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "relationalExpression"

    public static class relationalOp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "relationalOp"
    // JavaP.g:1608:1: relationalOp : ( ( '<' '=' )=>t1= '<' t2= '=' {...}? | ( '>' '=' )=>t1= '>' t2= '=' {...}? | '<' | '>' );
    public final Java_JavaP.relationalOp_return relationalOp() throws RecognitionException {
        Java_JavaP.relationalOp_return retval = new Java_JavaP.relationalOp_return();
        retval.start = input.LT(1);
        int relationalOp_StartIndex = input.index();
        Object root_0 = null;

        Token t1=null;
        Token t2=null;
        Token char_literal207=null;
        Token char_literal208=null;

        Object t1_tree=null;
        Object t2_tree=null;
        Object char_literal207_tree=null;
        Object char_literal208_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 123) ) { return retval; }
            // JavaP.g:1609:5: ( ( '<' '=' )=>t1= '<' t2= '=' {...}? | ( '>' '=' )=>t1= '>' t2= '=' {...}? | '<' | '>' )
            int alt146=4;
            int LA146_0 = input.LA(1);

            if ( (LA146_0==62) ) {
                int LA146_1 = input.LA(2);

                if ( (LA146_1==73) && (synpred208_JavaP())) {
                    alt146=1;
                }
                else if ( (LA146_1==IntegerLiteral||LA146_1==FloatingPointLiteral||(LA146_1>=CharacterLiteral && LA146_1<=StringLiteral)||LA146_1==Identifier||LA146_1==69||(LA146_1>=80 && LA146_1<=87)||(LA146_1>=89 && LA146_1<=90)||(LA146_1>=93 && LA146_1<=96)||(LA146_1>=127 && LA146_1<=128)||(LA146_1>=131 && LA146_1<=135)) ) {
                    alt146=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 146, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA146_0==64) ) {
                int LA146_2 = input.LA(2);

                if ( (LA146_2==73) && (synpred209_JavaP())) {
                    alt146=2;
                }
                else if ( (LA146_2==IntegerLiteral||LA146_2==FloatingPointLiteral||(LA146_2>=CharacterLiteral && LA146_2<=StringLiteral)||LA146_2==Identifier||LA146_2==69||(LA146_2>=80 && LA146_2<=87)||(LA146_2>=89 && LA146_2<=90)||(LA146_2>=93 && LA146_2<=96)||(LA146_2>=127 && LA146_2<=128)||(LA146_2>=131 && LA146_2<=135)) ) {
                    alt146=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 146, 2, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 146, 0, input);

                throw nvae;
            }
            switch (alt146) {
                case 1 :
                    // JavaP.g:1609:9: ( '<' '=' )=>t1= '<' t2= '=' {...}?
                    {
                    root_0 = (Object)adaptor.nil();

                    t1=(Token)match(input,62,FOLLOW_62_in_relationalOp7879); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t1_tree = (Object)adaptor.create(t1);
                    adaptor.addChild(root_0, t1_tree);
                    }
                    t2=(Token)match(input,73,FOLLOW_73_in_relationalOp7883); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t2_tree = (Object)adaptor.create(t2);
                    adaptor.addChild(root_0, t2_tree);
                    }
                    if ( !(( t1.getLine() == t2.getLine() &&
                              t1.getCharPositionInLine() + 1 == t2.getCharPositionInLine() )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "relationalOp", " $t1.getLine() == $t2.getLine() &&\n          $t1.getCharPositionInLine() + 1 == $t2.getCharPositionInLine() ");
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:1612:9: ( '>' '=' )=>t1= '>' t2= '=' {...}?
                    {
                    root_0 = (Object)adaptor.nil();

                    t1=(Token)match(input,64,FOLLOW_64_in_relationalOp7912); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t1_tree = (Object)adaptor.create(t1);
                    adaptor.addChild(root_0, t1_tree);
                    }
                    t2=(Token)match(input,73,FOLLOW_73_in_relationalOp7916); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t2_tree = (Object)adaptor.create(t2);
                    adaptor.addChild(root_0, t2_tree);
                    }
                    if ( !(( t1.getLine() == t2.getLine() &&
                              t1.getCharPositionInLine() + 1 == t2.getCharPositionInLine() )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "relationalOp", " $t1.getLine() == $t2.getLine() &&\n          $t1.getCharPositionInLine() + 1 == $t2.getCharPositionInLine() ");
                    }

                    }
                    break;
                case 3 :
                    // JavaP.g:1615:9: '<'
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal207=(Token)match(input,62,FOLLOW_62_in_relationalOp7936); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal207_tree = (Object)adaptor.create(char_literal207);
                    adaptor.addChild(root_0, char_literal207_tree);
                    }

                    }
                    break;
                case 4 :
                    // JavaP.g:1616:9: '>'
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal208=(Token)match(input,64,FOLLOW_64_in_relationalOp7946); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal208_tree = (Object)adaptor.create(char_literal208);
                    adaptor.addChild(root_0, char_literal208_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 123, relationalOp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "relationalOp"

    public static class shiftExpression_return extends ParserRuleReturnScope {
        public Expression element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "shiftExpression"
    // JavaP.g:1619:1: shiftExpression returns [Expression element] : ex= additiveExpression (op= shiftOp exx= additiveExpression )* ;
    public final Java_JavaP.shiftExpression_return shiftExpression() throws RecognitionException {
        Java_JavaP.shiftExpression_return retval = new Java_JavaP.shiftExpression_return();
        retval.start = input.LT(1);
        int shiftExpression_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.additiveExpression_return ex = null;

        Java_JavaP.shiftOp_return op = null;

        Java_JavaP.additiveExpression_return exx = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 124) ) { return retval; }
            // JavaP.g:1620:5: (ex= additiveExpression (op= shiftOp exx= additiveExpression )* )
            // JavaP.g:1620:9: ex= additiveExpression (op= shiftOp exx= additiveExpression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_additiveExpression_in_shiftExpression7971);
            ex=additiveExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ex.getTree());
            if ( state.backtracking==0 ) {
              check_null(ex.element); retval.element = ex.element;
            }
            // JavaP.g:1620:86: (op= shiftOp exx= additiveExpression )*
            loop147:
            do {
                int alt147=2;
                int LA147_0 = input.LA(1);

                if ( (LA147_0==62) ) {
                    int LA147_1 = input.LA(2);

                    if ( (LA147_1==62) ) {
                        int LA147_4 = input.LA(3);

                        if ( (LA147_4==IntegerLiteral||LA147_4==FloatingPointLiteral||(LA147_4>=CharacterLiteral && LA147_4<=StringLiteral)||LA147_4==Identifier||LA147_4==69||(LA147_4>=80 && LA147_4<=87)||(LA147_4>=89 && LA147_4<=90)||(LA147_4>=93 && LA147_4<=96)||(LA147_4>=127 && LA147_4<=128)||(LA147_4>=131 && LA147_4<=135)) ) {
                            alt147=1;
                        }


                    }


                }
                else if ( (LA147_0==64) ) {
                    int LA147_2 = input.LA(2);

                    if ( (LA147_2==64) ) {
                        int LA147_5 = input.LA(3);

                        if ( (LA147_5==64) ) {
                            int LA147_7 = input.LA(4);

                            if ( (LA147_7==IntegerLiteral||LA147_7==FloatingPointLiteral||(LA147_7>=CharacterLiteral && LA147_7<=StringLiteral)||LA147_7==Identifier||LA147_7==69||(LA147_7>=80 && LA147_7<=87)||(LA147_7>=89 && LA147_7<=90)||(LA147_7>=93 && LA147_7<=96)||(LA147_7>=127 && LA147_7<=128)||(LA147_7>=131 && LA147_7<=135)) ) {
                                alt147=1;
                            }


                        }
                        else if ( (LA147_5==IntegerLiteral||LA147_5==FloatingPointLiteral||(LA147_5>=CharacterLiteral && LA147_5<=StringLiteral)||LA147_5==Identifier||LA147_5==69||(LA147_5>=80 && LA147_5<=87)||(LA147_5>=89 && LA147_5<=90)||(LA147_5>=93 && LA147_5<=96)||(LA147_5>=127 && LA147_5<=128)||(LA147_5>=131 && LA147_5<=135)) ) {
                            alt147=1;
                        }


                    }


                }


                switch (alt147) {
            	case 1 :
            	    // JavaP.g:1620:88: op= shiftOp exx= additiveExpression
            	    {
            	    pushFollow(FOLLOW_shiftOp_in_shiftExpression7979);
            	    op=shiftOp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, op.getTree());
            	    pushFollow(FOLLOW_additiveExpression_in_shiftExpression7983);
            	    exx=additiveExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, exx.getTree());
            	    if ( state.backtracking==0 ) {

            	               retval.element = createInfixOperatorInvocation((op!=null?input.toString(op.start,op.stop):null), retval.element);
            	               ((InfixOperatorInvocation)retval.element).addArgument(exx.element);
            	               setLocation(retval.element,ex.start,exx.stop);
            	              
            	    }

            	    }
            	    break;

            	default :
            	    break loop147;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 124, shiftExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "shiftExpression"

    public static class shiftOp_return extends ParserRuleReturnScope {
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "shiftOp"
    // JavaP.g:1629:1: shiftOp : ( ( '<' '<' )=>t1= '<' t2= '<' {...}? | ( '>' '>' '>' )=>t1= '>' t2= '>' t3= '>' {...}? | ( '>' '>' )=>t1= '>' t2= '>' {...}?);
    public final Java_JavaP.shiftOp_return shiftOp() throws RecognitionException {
        Java_JavaP.shiftOp_return retval = new Java_JavaP.shiftOp_return();
        retval.start = input.LT(1);
        int shiftOp_StartIndex = input.index();
        Object root_0 = null;

        Token t1=null;
        Token t2=null;
        Token t3=null;

        Object t1_tree=null;
        Object t2_tree=null;
        Object t3_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 125) ) { return retval; }
            // JavaP.g:1630:5: ( ( '<' '<' )=>t1= '<' t2= '<' {...}? | ( '>' '>' '>' )=>t1= '>' t2= '>' t3= '>' {...}? | ( '>' '>' )=>t1= '>' t2= '>' {...}?)
            int alt148=3;
            alt148 = dfa148.predict(input);
            switch (alt148) {
                case 1 :
                    // JavaP.g:1630:9: ( '<' '<' )=>t1= '<' t2= '<' {...}?
                    {
                    root_0 = (Object)adaptor.nil();

                    t1=(Token)match(input,62,FOLLOW_62_in_shiftOp8024); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t1_tree = (Object)adaptor.create(t1);
                    adaptor.addChild(root_0, t1_tree);
                    }
                    t2=(Token)match(input,62,FOLLOW_62_in_shiftOp8028); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t2_tree = (Object)adaptor.create(t2);
                    adaptor.addChild(root_0, t2_tree);
                    }
                    if ( !(( t1.getLine() == t2.getLine() &&
                              t1.getCharPositionInLine() + 1 == t2.getCharPositionInLine() )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "shiftOp", " $t1.getLine() == $t2.getLine() &&\n          $t1.getCharPositionInLine() + 1 == $t2.getCharPositionInLine() ");
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:1633:9: ( '>' '>' '>' )=>t1= '>' t2= '>' t3= '>' {...}?
                    {
                    root_0 = (Object)adaptor.nil();

                    t1=(Token)match(input,64,FOLLOW_64_in_shiftOp8059); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t1_tree = (Object)adaptor.create(t1);
                    adaptor.addChild(root_0, t1_tree);
                    }
                    t2=(Token)match(input,64,FOLLOW_64_in_shiftOp8063); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t2_tree = (Object)adaptor.create(t2);
                    adaptor.addChild(root_0, t2_tree);
                    }
                    t3=(Token)match(input,64,FOLLOW_64_in_shiftOp8067); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t3_tree = (Object)adaptor.create(t3);
                    adaptor.addChild(root_0, t3_tree);
                    }
                    if ( !(( t1.getLine() == t2.getLine() &&
                              t1.getCharPositionInLine() + 1 == t2.getCharPositionInLine() &&
                              t2.getLine() == t3.getLine() &&
                              t2.getCharPositionInLine() + 1 == t3.getCharPositionInLine() )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "shiftOp", " $t1.getLine() == $t2.getLine() &&\n          $t1.getCharPositionInLine() + 1 == $t2.getCharPositionInLine() &&\n          $t2.getLine() == $t3.getLine() &&\n          $t2.getCharPositionInLine() + 1 == $t3.getCharPositionInLine() ");
                    }

                    }
                    break;
                case 3 :
                    // JavaP.g:1638:9: ( '>' '>' )=>t1= '>' t2= '>' {...}?
                    {
                    root_0 = (Object)adaptor.nil();

                    t1=(Token)match(input,64,FOLLOW_64_in_shiftOp8096); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t1_tree = (Object)adaptor.create(t1);
                    adaptor.addChild(root_0, t1_tree);
                    }
                    t2=(Token)match(input,64,FOLLOW_64_in_shiftOp8100); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    t2_tree = (Object)adaptor.create(t2);
                    adaptor.addChild(root_0, t2_tree);
                    }
                    if ( !(( t1.getLine() == t2.getLine() &&
                              t1.getCharPositionInLine() + 1 == t2.getCharPositionInLine() )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "shiftOp", " $t1.getLine() == $t2.getLine() &&\n          $t1.getCharPositionInLine() + 1 == $t2.getCharPositionInLine() ");
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 125, shiftOp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "shiftOp"

    public static class additiveExpression_return extends ParserRuleReturnScope {
        public Expression element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "additiveExpression"
    // JavaP.g:1644:1: additiveExpression returns [Expression element] : ex= multiplicativeExpression ( ( '+' | '-' ) exx= multiplicativeExpression )* ;
    public final Java_JavaP.additiveExpression_return additiveExpression() throws RecognitionException {
        Java_JavaP.additiveExpression_return retval = new Java_JavaP.additiveExpression_return();
        retval.start = input.LT(1);
        int additiveExpression_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal209=null;
        Token char_literal210=null;
        Java_JavaP.multiplicativeExpression_return ex = null;

        Java_JavaP.multiplicativeExpression_return exx = null;


        Object char_literal209_tree=null;
        Object char_literal210_tree=null;

        String op = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 126) ) { return retval; }
            // JavaP.g:1646:5: (ex= multiplicativeExpression ( ( '+' | '-' ) exx= multiplicativeExpression )* )
            // JavaP.g:1646:9: ex= multiplicativeExpression ( ( '+' | '-' ) exx= multiplicativeExpression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression8140);
            ex=multiplicativeExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ex.getTree());
            if ( state.backtracking==0 ) {
              check_null(ex.element); retval.element = ex.element;
            }
            // JavaP.g:1646:92: ( ( '+' | '-' ) exx= multiplicativeExpression )*
            loop150:
            do {
                int alt150=2;
                int LA150_0 = input.LA(1);

                if ( ((LA150_0>=127 && LA150_0<=128)) ) {
                    alt150=1;
                }


                switch (alt150) {
            	case 1 :
            	    // JavaP.g:1646:94: ( '+' | '-' ) exx= multiplicativeExpression
            	    {
            	    // JavaP.g:1646:94: ( '+' | '-' )
            	    int alt149=2;
            	    int LA149_0 = input.LA(1);

            	    if ( (LA149_0==127) ) {
            	        alt149=1;
            	    }
            	    else if ( (LA149_0==128) ) {
            	        alt149=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 149, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt149) {
            	        case 1 :
            	            // JavaP.g:1646:95: '+'
            	            {
            	            char_literal209=(Token)match(input,127,FOLLOW_127_in_additiveExpression8147); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            char_literal209_tree = (Object)adaptor.create(char_literal209);
            	            adaptor.addChild(root_0, char_literal209_tree);
            	            }
            	            if ( state.backtracking==0 ) {
            	              op="+";
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // JavaP.g:1646:111: '-'
            	            {
            	            char_literal210=(Token)match(input,128,FOLLOW_128_in_additiveExpression8153); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            char_literal210_tree = (Object)adaptor.create(char_literal210);
            	            adaptor.addChild(root_0, char_literal210_tree);
            	            }
            	            if ( state.backtracking==0 ) {
            	              op="-";
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression8160);
            	    exx=multiplicativeExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, exx.getTree());
            	    if ( state.backtracking==0 ) {

            	               retval.element = createInfixOperatorInvocation(op, retval.element);
            	               ((InfixOperatorInvocation)retval.element).addArgument(exx.element);
            	               setLocation(retval.element,ex.start,exx.stop);
            	              
            	    }

            	    }
            	    break;

            	default :
            	    break loop150;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 126, additiveExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "additiveExpression"

    public static class multiplicativeExpression_return extends ParserRuleReturnScope {
        public Expression element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiplicativeExpression"
    // JavaP.g:1654:1: multiplicativeExpression returns [Expression element] : ex= unaryExpression ( ( '*' | '/' | '%' ) exx= unaryExpression )* ;
    public final Java_JavaP.multiplicativeExpression_return multiplicativeExpression() throws RecognitionException {
        Java_JavaP.multiplicativeExpression_return retval = new Java_JavaP.multiplicativeExpression_return();
        retval.start = input.LT(1);
        int multiplicativeExpression_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal211=null;
        Token char_literal212=null;
        Token char_literal213=null;
        Java_JavaP.unaryExpression_return ex = null;

        Java_JavaP.unaryExpression_return exx = null;


        Object char_literal211_tree=null;
        Object char_literal212_tree=null;
        Object char_literal213_tree=null;

        String op = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 127) ) { return retval; }
            // JavaP.g:1656:5: (ex= unaryExpression ( ( '*' | '/' | '%' ) exx= unaryExpression )* )
            // JavaP.g:1656:9: ex= unaryExpression ( ( '*' | '/' | '%' ) exx= unaryExpression )*
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression8197);
            ex=unaryExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ex.getTree());
            if ( state.backtracking==0 ) {
              check_null(ex.element); retval.element = ex.element;
            }
            // JavaP.g:1656:83: ( ( '*' | '/' | '%' ) exx= unaryExpression )*
            loop152:
            do {
                int alt152=2;
                int LA152_0 = input.LA(1);

                if ( (LA152_0==52||(LA152_0>=129 && LA152_0<=130)) ) {
                    alt152=1;
                }


                switch (alt152) {
            	case 1 :
            	    // JavaP.g:1656:85: ( '*' | '/' | '%' ) exx= unaryExpression
            	    {
            	    // JavaP.g:1656:85: ( '*' | '/' | '%' )
            	    int alt151=3;
            	    switch ( input.LA(1) ) {
            	    case 52:
            	        {
            	        alt151=1;
            	        }
            	        break;
            	    case 129:
            	        {
            	        alt151=2;
            	        }
            	        break;
            	    case 130:
            	        {
            	        alt151=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 151, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt151) {
            	        case 1 :
            	            // JavaP.g:1656:87: '*'
            	            {
            	            char_literal211=(Token)match(input,52,FOLLOW_52_in_multiplicativeExpression8205); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            char_literal211_tree = (Object)adaptor.create(char_literal211);
            	            adaptor.addChild(root_0, char_literal211_tree);
            	            }
            	            if ( state.backtracking==0 ) {
            	              op="*";
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // JavaP.g:1656:103: '/'
            	            {
            	            char_literal212=(Token)match(input,129,FOLLOW_129_in_multiplicativeExpression8211); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            char_literal212_tree = (Object)adaptor.create(char_literal212);
            	            adaptor.addChild(root_0, char_literal212_tree);
            	            }
            	            if ( state.backtracking==0 ) {
            	              op="/";
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // JavaP.g:1656:119: '%'
            	            {
            	            char_literal213=(Token)match(input,130,FOLLOW_130_in_multiplicativeExpression8217); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            char_literal213_tree = (Object)adaptor.create(char_literal213);
            	            adaptor.addChild(root_0, char_literal213_tree);
            	            }
            	            if ( state.backtracking==0 ) {
            	              op="%";
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression8224);
            	    exx=unaryExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, exx.getTree());
            	    if ( state.backtracking==0 ) {

            	               retval.element = createInfixOperatorInvocation(op, retval.element);
            	               ((InfixOperatorInvocation)retval.element).addArgument(exx.element);
            	               setLocation(retval.element,ex.start,exx.stop);
            	              
            	    }

            	    }
            	    break;

            	default :
            	    break loop152;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 127, multiplicativeExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "multiplicativeExpression"

    public static class unaryExpression_return extends ParserRuleReturnScope {
        public Expression element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unaryExpression"
    // JavaP.g:1664:1: unaryExpression returns [Expression element] : ( '+' ex= unaryExpression | '-' exx= unaryExpression | '++' exxx= unaryExpression | '--' exxxx= unaryExpression | eks= unaryExpressionNotPlusMinus );
    public final Java_JavaP.unaryExpression_return unaryExpression() throws RecognitionException {
        Java_JavaP.unaryExpression_return retval = new Java_JavaP.unaryExpression_return();
        retval.start = input.LT(1);
        int unaryExpression_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal214=null;
        Token char_literal215=null;
        Token string_literal216=null;
        Token string_literal217=null;
        Java_JavaP.unaryExpression_return ex = null;

        Java_JavaP.unaryExpression_return exx = null;

        Java_JavaP.unaryExpression_return exxx = null;

        Java_JavaP.unaryExpression_return exxxx = null;

        Java_JavaP.unaryExpressionNotPlusMinus_return eks = null;


        Object char_literal214_tree=null;
        Object char_literal215_tree=null;
        Object string_literal216_tree=null;
        Object string_literal217_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 128) ) { return retval; }
            // JavaP.g:1665:5: ( '+' ex= unaryExpression | '-' exx= unaryExpression | '++' exxx= unaryExpression | '--' exxxx= unaryExpression | eks= unaryExpressionNotPlusMinus )
            int alt153=5;
            switch ( input.LA(1) ) {
            case 127:
                {
                alt153=1;
                }
                break;
            case 128:
                {
                alt153=2;
                }
                break;
            case 131:
                {
                alt153=3;
                }
                break;
            case 132:
                {
                alt153=4;
                }
                break;
            case IntegerLiteral:
            case FloatingPointLiteral:
            case CharacterLiteral:
            case StringLiteral:
            case Identifier:
            case 69:
            case 80:
            case 81:
            case 82:
            case 83:
            case 84:
            case 85:
            case 86:
            case 87:
            case 89:
            case 90:
            case 93:
            case 94:
            case 95:
            case 96:
            case 133:
            case 134:
            case 135:
                {
                alt153=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 153, 0, input);

                throw nvae;
            }

            switch (alt153) {
                case 1 :
                    // JavaP.g:1665:9: '+' ex= unaryExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal214=(Token)match(input,127,FOLLOW_127_in_unaryExpression8255); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal214_tree = (Object)adaptor.create(char_literal214);
                    adaptor.addChild(root_0, char_literal214_tree);
                    }
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression8259);
                    ex=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ex.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = createPrefixOperatorInvocation("+",ex.element);
                      	setLocation(retval.element,retval.start,ex.stop);
                          
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:1668:9: '-' exx= unaryExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal215=(Token)match(input,128,FOLLOW_128_in_unaryExpression8271); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal215_tree = (Object)adaptor.create(char_literal215);
                    adaptor.addChild(root_0, char_literal215_tree);
                    }
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression8275);
                    exx=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exx.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = createPrefixOperatorInvocation("-",exx.element);
                      	setLocation(retval.element,retval.start,exx.stop);
                          
                    }

                    }
                    break;
                case 3 :
                    // JavaP.g:1671:9: '++' exxx= unaryExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal216=(Token)match(input,131,FOLLOW_131_in_unaryExpression8287); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal216_tree = (Object)adaptor.create(string_literal216);
                    adaptor.addChild(root_0, string_literal216_tree);
                    }
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression8291);
                    exxx=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exxx.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = createPrefixOperatorInvocation("++",exxx.element);
                      	setLocation(retval.element,retval.start,exxx.stop);
                          
                    }

                    }
                    break;
                case 4 :
                    // JavaP.g:1674:9: '--' exxxx= unaryExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    string_literal217=(Token)match(input,132,FOLLOW_132_in_unaryExpression8303); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal217_tree = (Object)adaptor.create(string_literal217);
                    adaptor.addChild(root_0, string_literal217_tree);
                    }
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression8307);
                    exxxx=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exxxx.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = createPrefixOperatorInvocation("--",exxxx.element);
                      	setLocation(retval.element,retval.start,exxxx.stop);
                          
                    }

                    }
                    break;
                case 5 :
                    // JavaP.g:1677:9: eks= unaryExpressionNotPlusMinus
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_unaryExpression8321);
                    eks=unaryExpressionNotPlusMinus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eks.getTree());
                    if ( state.backtracking==0 ) {
                      check_null(eks.element); retval.element = eks.element;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 128, unaryExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unaryExpression"

    public static class unaryExpressionNotPlusMinus_return extends ParserRuleReturnScope {
        public Expression element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unaryExpressionNotPlusMinus"
    // JavaP.g:1680:1: unaryExpressionNotPlusMinus returns [Expression element] : (a= '~' ex= unaryExpression | b= '!' exx= unaryExpression | castex= castExpression | prim= primary (sel= selector )* (c= '++' | d= '--' )? );
    public final Java_JavaP.unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus() throws RecognitionException {
        TargetScope_stack.push(new TargetScope_scope());

        Java_JavaP.unaryExpressionNotPlusMinus_return retval = new Java_JavaP.unaryExpressionNotPlusMinus_return();
        retval.start = input.LT(1);
        int unaryExpressionNotPlusMinus_StartIndex = input.index();
        Object root_0 = null;

        Token a=null;
        Token b=null;
        Token c=null;
        Token d=null;
        Java_JavaP.unaryExpression_return ex = null;

        Java_JavaP.unaryExpression_return exx = null;

        Java_JavaP.castExpression_return castex = null;

        Java_JavaP.primary_return prim = null;

        Java_JavaP.selector_return sel = null;


        Object a_tree=null;
        Object b_tree=null;
        Object c_tree=null;
        Object d_tree=null;


        Token start=null;
        Token stop=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 129) ) { return retval; }
            // JavaP.g:1686:5: (a= '~' ex= unaryExpression | b= '!' exx= unaryExpression | castex= castExpression | prim= primary (sel= selector )* (c= '++' | d= '--' )? )
            int alt156=4;
            alt156 = dfa156.predict(input);
            switch (alt156) {
                case 1 :
                    // JavaP.g:1686:9: a= '~' ex= unaryExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    a=(Token)match(input,133,FOLLOW_133_in_unaryExpressionNotPlusMinus8357); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    a_tree = (Object)adaptor.create(a);
                    adaptor.addChild(root_0, a_tree);
                    }
                    if ( state.backtracking==0 ) {
                      start=a;
                    }
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus8363);
                    ex=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ex.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = createPrefixOperatorInvocation("~",ex.element);
                               stop=ex.stop;
                               setLocation(retval.element,start,stop);
                              
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:1691:9: b= '!' exx= unaryExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    b=(Token)match(input,134,FOLLOW_134_in_unaryExpressionNotPlusMinus8385); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    b_tree = (Object)adaptor.create(b);
                    adaptor.addChild(root_0, b_tree);
                    }
                    if ( state.backtracking==0 ) {
                      start=b;
                    }
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus8391);
                    exx=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exx.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = createPrefixOperatorInvocation("!",exx.element);
                               stop=exx.stop;
                               setLocation(retval.element,start,stop);
                              
                    }

                    }
                    break;
                case 3 :
                    // JavaP.g:1696:9: castex= castExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_castExpression_in_unaryExpressionNotPlusMinus8413);
                    castex=castExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, castex.getTree());
                    if ( state.backtracking==0 ) {
                      check_null(castex.element); retval.element = castex.element;
                    }

                    }
                    break;
                case 4 :
                    // JavaP.g:1697:9: prim= primary (sel= selector )* (c= '++' | d= '--' )?
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_primary_in_unaryExpressionNotPlusMinus8427);
                    prim=primary();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prim.getTree());
                    if ( state.backtracking==0 ) {
                      check_null((prim!=null?prim.element:null));
                                  ((TargetScope_scope)TargetScope_stack.peek()).target =(prim!=null?prim.element:null);
                                  retval.element=(prim!=null?prim.element:null);
                                  start=prim.start;
                                  ((TargetScope_scope)TargetScope_stack.peek()).start = start;
                                 
                    }
                    // JavaP.g:1704:9: (sel= selector )*
                    loop154:
                    do {
                        int alt154=2;
                        int LA154_0 = input.LA(1);

                        if ( (LA154_0==51||LA154_0==70) ) {
                            alt154=1;
                        }


                        switch (alt154) {
                    	case 1 :
                    	    // JavaP.g:1704:10: sel= selector
                    	    {
                    	    pushFollow(FOLLOW_selector_in_unaryExpressionNotPlusMinus8453);
                    	    sel=selector();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sel.getTree());
                    	    if ( state.backtracking==0 ) {
                    	      check_null(sel.element);
                    	                  ((TargetScope_scope)TargetScope_stack.peek()).target =(sel!=null?sel.element:null);
                    	                  retval.element = (sel!=null?sel.element:null);
                    	                  stop=sel.stop;
                    	                  setLocation(retval.element,start,stop);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop154;
                        }
                    } while (true);

                    // JavaP.g:1711:9: (c= '++' | d= '--' )?
                    int alt155=3;
                    int LA155_0 = input.LA(1);

                    if ( (LA155_0==131) ) {
                        alt155=1;
                    }
                    else if ( (LA155_0==132) ) {
                        alt155=2;
                    }
                    switch (alt155) {
                        case 1 :
                            // JavaP.g:1712:12: c= '++'
                            {
                            c=(Token)match(input,131,FOLLOW_131_in_unaryExpressionNotPlusMinus8502); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            c_tree = (Object)adaptor.create(c);
                            adaptor.addChild(root_0, c_tree);
                            }
                            if ( state.backtracking==0 ) {
                              retval.element = createPostfixOperatorInvocation("++", retval.element);
                              		   stop=c;
                              		   setLocation(retval.element,start,stop);
                            }

                            }
                            break;
                        case 2 :
                            // JavaP.g:1715:12: d= '--'
                            {
                            d=(Token)match(input,132,FOLLOW_132_in_unaryExpressionNotPlusMinus8519); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            d_tree = (Object)adaptor.create(d);
                            adaptor.addChild(root_0, d_tree);
                            }
                            if ( state.backtracking==0 ) {
                              retval.element = createPostfixOperatorInvocation("--", retval.element);
                                        	   stop=d;
                                        	   setLocation(retval.element,start,stop);
                            }

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 129, unaryExpressionNotPlusMinus_StartIndex); }
            TargetScope_stack.pop();

        }
        return retval;
    }
    // $ANTLR end "unaryExpressionNotPlusMinus"

    public static class selector_return extends ParserRuleReturnScope {
        public Expression element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selector"
    // JavaP.g:1724:1: selector returns [Expression element] : ( '.' name= identifierRule (args= arguments )? | '.' thiskw= 'this' | '.' spkw= 'super' supsuf= superSuffix | '.' newkw= 'new' in= innerCreator | '[' arrex= expression bracket= ']' );
    public final Java_JavaP.selector_return selector() throws RecognitionException {
        Java_JavaP.selector_return retval = new Java_JavaP.selector_return();
        retval.start = input.LT(1);
        int selector_StartIndex = input.index();
        Object root_0 = null;

        Token thiskw=null;
        Token spkw=null;
        Token newkw=null;
        Token bracket=null;
        Token char_literal218=null;
        Token char_literal219=null;
        Token char_literal220=null;
        Token char_literal221=null;
        Token char_literal222=null;
        Java_JavaP.identifierRule_return name = null;

        Java_JavaP.arguments_return args = null;

        Java_JavaP.superSuffix_return supsuf = null;

        Java_JavaP.innerCreator_return in = null;

        Java_JavaP.expression_return arrex = null;


        Object thiskw_tree=null;
        Object spkw_tree=null;
        Object newkw_tree=null;
        Object bracket_tree=null;
        Object char_literal218_tree=null;
        Object char_literal219_tree=null;
        Object char_literal220_tree=null;
        Object char_literal221_tree=null;
        Object char_literal222_tree=null;


        Token start=((TargetScope_scope)TargetScope_stack.peek()).start;
        Token stop=null;
        CrossReferenceTarget old = ((TargetScope_scope)TargetScope_stack.peek()).target;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 130) ) { return retval; }
            // JavaP.g:1730:2: ( '.' name= identifierRule (args= arguments )? | '.' thiskw= 'this' | '.' spkw= 'super' supsuf= superSuffix | '.' newkw= 'new' in= innerCreator | '[' arrex= expression bracket= ']' )
            int alt158=5;
            int LA158_0 = input.LA(1);

            if ( (LA158_0==51) ) {
                switch ( input.LA(2) ) {
                case 93:
                    {
                    alt158=2;
                    }
                    break;
                case 89:
                    {
                    alt158=3;
                    }
                    break;
                case 135:
                    {
                    alt158=4;
                    }
                    break;
                case Identifier:
                    {
                    alt158=1;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 158, 1, input);

                    throw nvae;
                }

            }
            else if ( (LA158_0==70) ) {
                alt158=5;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 158, 0, input);

                throw nvae;
            }
            switch (alt158) {
                case 1 :
                    // JavaP.g:1731:2: '.' name= identifierRule (args= arguments )?
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal218=(Token)match(input,51,FOLLOW_51_in_selector8558); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal218_tree = (Object)adaptor.create(char_literal218);
                    adaptor.addChild(root_0, char_literal218_tree);
                    }
                    pushFollow(FOLLOW_identifierRule_in_selector8562);
                    name=identifierRule();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, name.getTree());
                    if ( state.backtracking==0 ) {

                      	         retval.element = expressionFactory().createNameExpression((name!=null?input.toString(name.start,name.stop):null),cloneTarget(((TargetScope_scope)TargetScope_stack.peek()).target));
                      	         stop=name.start;
                      	        
                    }
                    // JavaP.g:1736:6: (args= arguments )?
                    int alt157=2;
                    int LA157_0 = input.LA(1);

                    if ( (LA157_0==90) ) {
                        alt157=1;
                    }
                    switch (alt157) {
                        case 1 :
                            // JavaP.g:1736:7: args= arguments
                            {
                            pushFollow(FOLLOW_arguments_in_selector8583);
                            args=arguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, args.getTree());
                            if ( state.backtracking==0 ) {
                              retval.element = invocation((name!=null?input.toString(name.start,name.stop):null), ((TargetScope_scope)TargetScope_stack.peek()).target);
                              	         ((MethodInvocation)retval.element).addAllArguments(args.element);
                              	         stop=args.stop;
                              	        
                            }

                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {
                      setLocation(retval.element,start,stop);
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:1742:9: '.' thiskw= 'this'
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal219=(Token)match(input,51,FOLLOW_51_in_selector8617); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal219_tree = (Object)adaptor.create(char_literal219);
                    adaptor.addChild(root_0, char_literal219_tree);
                    }
                    thiskw=(Token)match(input,93,FOLLOW_93_in_selector8621); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    thiskw_tree = (Object)adaptor.create(thiskw);
                    adaptor.addChild(root_0, thiskw_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new ThisLiteral(createTypeReference((NamedTarget)((TargetScope_scope)TargetScope_stack.peek()).target));setLocation(retval.element,start,spkw);
                    }

                    }
                    break;
                case 3 :
                    // JavaP.g:1743:9: '.' spkw= 'super' supsuf= superSuffix
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal220=(Token)match(input,51,FOLLOW_51_in_selector8633); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal220_tree = (Object)adaptor.create(char_literal220);
                    adaptor.addChild(root_0, char_literal220_tree);
                    }
                    spkw=(Token)match(input,89,FOLLOW_89_in_selector8637); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    spkw_tree = (Object)adaptor.create(spkw);
                    adaptor.addChild(root_0, spkw_tree);
                    }
                    pushFollow(FOLLOW_superSuffix_in_selector8653);
                    supsuf=superSuffix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, supsuf.getTree());
                    if ( state.backtracking==0 ) {

                                    check_null(supsuf.element);
                                    retval.element = supsuf.element;
                                    CrossReferenceTarget tar = new SuperTarget(old);
                                    ((TargetedExpression)retval.element).setTarget(tar);
                                    setKeyword(tar,spkw);
                                    setLocation(old,start,spkw);
                                  
                    }

                    }
                    break;
                case 4 :
                    // JavaP.g:1753:9: '.' newkw= 'new' in= innerCreator
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal221=(Token)match(input,51,FOLLOW_51_in_selector8677); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal221_tree = (Object)adaptor.create(char_literal221);
                    adaptor.addChild(root_0, char_literal221_tree);
                    }
                    newkw=(Token)match(input,135,FOLLOW_135_in_selector8681); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    newkw_tree = (Object)adaptor.create(newkw);
                    adaptor.addChild(root_0, newkw_tree);
                    }
                    pushFollow(FOLLOW_innerCreator_in_selector8685);
                    in=innerCreator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, in.getTree());
                    if ( state.backtracking==0 ) {
                      check_null(in.element);
                                                               retval.element = in.element;
                                                               setKeyword(retval.element,newkw);
                    }

                    }
                    break;
                case 5 :
                    // JavaP.g:1756:9: '[' arrex= expression bracket= ']'
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal222=(Token)match(input,70,FOLLOW_70_in_selector8697); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal222_tree = (Object)adaptor.create(char_literal222);
                    adaptor.addChild(root_0, char_literal222_tree);
                    }
                    pushFollow(FOLLOW_expression_in_selector8701);
                    arrex=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrex.getTree());
                    bracket=(Token)match(input,71,FOLLOW_71_in_selector8705); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    bracket_tree = (Object)adaptor.create(bracket);
                    adaptor.addChild(root_0, bracket_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new ArrayAccessExpression((Expression)((TargetScope_scope)TargetScope_stack.peek()).target);
                                 ((ArrayAccessExpression)retval.element).addIndex(new FilledArrayIndex(arrex.element));
                                 setLocation(retval.element, start, bracket);
                                
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 130, selector_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "selector"

    public static class castExpression_return extends ParserRuleReturnScope {
        public Expression element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "castExpression"
    // JavaP.g:1763:1: castExpression returns [Expression element] : ( '(' tref= primitiveType ')' unex= unaryExpression | '(' treff= type ')' unexx= unaryExpressionNotPlusMinus );
    public final Java_JavaP.castExpression_return castExpression() throws RecognitionException {
        Java_JavaP.castExpression_return retval = new Java_JavaP.castExpression_return();
        retval.start = input.LT(1);
        int castExpression_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal223=null;
        Token char_literal224=null;
        Token char_literal225=null;
        Token char_literal226=null;
        Java_JavaP.primitiveType_return tref = null;

        Java_JavaP.unaryExpression_return unex = null;

        Java_JavaP.type_return treff = null;

        Java_JavaP.unaryExpressionNotPlusMinus_return unexx = null;


        Object char_literal223_tree=null;
        Object char_literal224_tree=null;
        Object char_literal225_tree=null;
        Object char_literal226_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 131) ) { return retval; }
            // JavaP.g:1765:5: ( '(' tref= primitiveType ')' unex= unaryExpression | '(' treff= type ')' unexx= unaryExpressionNotPlusMinus )
            int alt159=2;
            int LA159_0 = input.LA(1);

            if ( (LA159_0==90) ) {
                int LA159_1 = input.LA(2);

                if ( (synpred235_JavaP()) ) {
                    alt159=1;
                }
                else if ( (true) ) {
                    alt159=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 159, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 159, 0, input);

                throw nvae;
            }
            switch (alt159) {
                case 1 :
                    // JavaP.g:1765:8: '(' tref= primitiveType ')' unex= unaryExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal223=(Token)match(input,90,FOLLOW_90_in_castExpression8740); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal223_tree = (Object)adaptor.create(char_literal223);
                    adaptor.addChild(root_0, char_literal223_tree);
                    }
                    pushFollow(FOLLOW_primitiveType_in_castExpression8744);
                    tref=primitiveType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, tref.getTree());
                    char_literal224=(Token)match(input,91,FOLLOW_91_in_castExpression8746); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal224_tree = (Object)adaptor.create(char_literal224);
                    adaptor.addChild(root_0, char_literal224_tree);
                    }
                    pushFollow(FOLLOW_unaryExpression_in_castExpression8750);
                    unex=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unex.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = new ClassCastExpression(tref.element,unex.element);
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:1766:8: '(' treff= type ')' unexx= unaryExpressionNotPlusMinus
                    {
                    root_0 = (Object)adaptor.nil();

                    char_literal225=(Token)match(input,90,FOLLOW_90_in_castExpression8761); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal225_tree = (Object)adaptor.create(char_literal225);
                    adaptor.addChild(root_0, char_literal225_tree);
                    }
                    pushFollow(FOLLOW_type_in_castExpression8765);
                    treff=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, treff.getTree());
                    char_literal226=(Token)match(input,91,FOLLOW_91_in_castExpression8767); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal226_tree = (Object)adaptor.create(char_literal226);
                    adaptor.addChild(root_0, char_literal226_tree);
                    }
                    pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_castExpression8771);
                    unexx=unaryExpressionNotPlusMinus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, unexx.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = new ClassCastExpression(treff.element,unexx.element);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              setLocation(retval.element,retval.start,retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 131, castExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "castExpression"

    public static class primary_return extends ParserRuleReturnScope {
        public Expression element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "primary"
    // JavaP.g:1769:1: primary returns [Expression element] : (parex= parExpression | rubex= identifierSuffixRubbush | skw= 'super' supsuf= superSuffix | nt= nonTargetPrimary | nkw= 'new' cr= creator | morerubex= moreidentifierRuleSuffixRubbish | vt= voidType '.' clkw= 'class' | tref= type '.' clkww= 'class' );
    public final Java_JavaP.primary_return primary() throws RecognitionException {
        TargetScope_stack.push(new TargetScope_scope());

        Java_JavaP.primary_return retval = new Java_JavaP.primary_return();
        retval.start = input.LT(1);
        int primary_StartIndex = input.index();
        Object root_0 = null;

        Token skw=null;
        Token nkw=null;
        Token clkw=null;
        Token clkww=null;
        Token char_literal227=null;
        Token char_literal228=null;
        Java_JavaP.parExpression_return parex = null;

        Java_JavaP.identifierSuffixRubbush_return rubex = null;

        Java_JavaP.superSuffix_return supsuf = null;

        Java_JavaP.nonTargetPrimary_return nt = null;

        Java_JavaP.creator_return cr = null;

        Java_JavaP.moreidentifierRuleSuffixRubbish_return morerubex = null;

        Java_JavaP.voidType_return vt = null;

        Java_JavaP.type_return tref = null;


        Object skw_tree=null;
        Object nkw_tree=null;
        Object clkw_tree=null;
        Object clkww_tree=null;
        Object char_literal227_tree=null;
        Object char_literal228_tree=null;


        Token start=null;
        Token stop=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 132) ) { return retval; }
            // JavaP.g:1778:5: (parex= parExpression | rubex= identifierSuffixRubbush | skw= 'super' supsuf= superSuffix | nt= nonTargetPrimary | nkw= 'new' cr= creator | morerubex= moreidentifierRuleSuffixRubbish | vt= voidType '.' clkw= 'class' | tref= type '.' clkww= 'class' )
            int alt160=8;
            alt160 = dfa160.predict(input);
            switch (alt160) {
                case 1 :
                    // JavaP.g:1778:9: parex= parExpression
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_parExpression_in_primary8811);
                    parex=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, parex.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = parex.element;
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:1779:9: rubex= identifierSuffixRubbush
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_identifierSuffixRubbush_in_primary8825);
                    rubex=identifierSuffixRubbush();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rubex.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = rubex.element;
                    }

                    }
                    break;
                case 3 :
                    // JavaP.g:1780:10: skw= 'super' supsuf= superSuffix
                    {
                    root_0 = (Object)adaptor.nil();

                    skw=(Token)match(input,89,FOLLOW_89_in_primary8840); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    skw_tree = (Object)adaptor.create(skw);
                    adaptor.addChild(root_0, skw_tree);
                    }
                    if ( state.backtracking==0 ) {

                                           start=skw; stop=skw;
                                           ((TargetScope_scope)TargetScope_stack.peek()).start =skw;
                                           
                    }
                    pushFollow(FOLLOW_superSuffix_in_primary8854);
                    supsuf=superSuffix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, supsuf.getTree());
                    if ( state.backtracking==0 ) {
                      CrossReferenceTarget tar = new SuperTarget();
                               setKeyword(tar,skw);
                               retval.element = supsuf.element;
                               ((TargetedExpression)retval.element).setTarget(tar);
                              setLocation(tar,start,stop); // put locations on the SuperTarget.
                              
                    }

                    }
                    break;
                case 4 :
                    // JavaP.g:1791:9: nt= nonTargetPrimary
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nonTargetPrimary_in_primary8876);
                    nt=nonTargetPrimary();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nt.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element=nt.element;
                    }

                    }
                    break;
                case 5 :
                    // JavaP.g:1792:9: nkw= 'new' cr= creator
                    {
                    root_0 = (Object)adaptor.nil();

                    nkw=(Token)match(input,135,FOLLOW_135_in_primary8890); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    nkw_tree = (Object)adaptor.create(nkw);
                    adaptor.addChild(root_0, nkw_tree);
                    }
                    if ( state.backtracking==0 ) {
                      start=nkw;
                    }
                    pushFollow(FOLLOW_creator_in_primary8896);
                    cr=creator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cr.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = cr.element;setKeyword(retval.element,nkw);
                    }

                    }
                    break;
                case 6 :
                    // JavaP.g:1793:9: morerubex= moreidentifierRuleSuffixRubbish
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_moreidentifierRuleSuffixRubbish_in_primary8910);
                    morerubex=moreidentifierRuleSuffixRubbish();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, morerubex.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = morerubex.element;
                    }

                    }
                    break;
                case 7 :
                    // JavaP.g:1794:9: vt= voidType '.' clkw= 'class'
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_voidType_in_primary8924);
                    vt=voidType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, vt.getTree());
                    char_literal227=(Token)match(input,51,FOLLOW_51_in_primary8926); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal227_tree = (Object)adaptor.create(char_literal227);
                    adaptor.addChild(root_0, char_literal227_tree);
                    }
                    clkw=(Token)match(input,59,FOLLOW_59_in_primary8930); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    clkw_tree = (Object)adaptor.create(clkw);
                    adaptor.addChild(root_0, clkw_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new ClassLiteral(vt.element); start=vt.start;stop=clkw; setLocation(retval.element,start,stop);
                    }

                    }
                    break;
                case 8 :
                    // JavaP.g:1795:9: tref= type '.' clkww= 'class'
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_type_in_primary8944);
                    tref=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, tref.getTree());
                    char_literal228=(Token)match(input,51,FOLLOW_51_in_primary8946); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal228_tree = (Object)adaptor.create(char_literal228);
                    adaptor.addChild(root_0, char_literal228_tree);
                    }
                    clkww=(Token)match(input,59,FOLLOW_59_in_primary8950); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    clkww_tree = (Object)adaptor.create(clkww);
                    adaptor.addChild(root_0, clkww_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new ClassLiteral(tref.element);start=tref.start;stop=clkww; setLocation(retval.element,start,stop);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                check_null(retval.element);

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 132, primary_StartIndex); }
            TargetScope_stack.pop();

        }
        return retval;
    }
    // $ANTLR end "primary"

    public static class nonTargetPrimary_return extends ParserRuleReturnScope {
        public Expression element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nonTargetPrimary"
    // JavaP.g:1798:1: nonTargetPrimary returns [Expression element] : lit= literal ;
    public final Java_JavaP.nonTargetPrimary_return nonTargetPrimary() throws RecognitionException {
        Java_JavaP.nonTargetPrimary_return retval = new Java_JavaP.nonTargetPrimary_return();
        retval.start = input.LT(1);
        int nonTargetPrimary_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.literal_return lit = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 133) ) { return retval; }
            // JavaP.g:1799:4: (lit= literal )
            // JavaP.g:1800:6: lit= literal
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_literal_in_nonTargetPrimary8979);
            lit=literal();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, lit.getTree());
            if ( state.backtracking==0 ) {
              retval.element = lit.element;
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 133, nonTargetPrimary_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nonTargetPrimary"

    public static class moreidentifierRuleSuffixRubbish_return extends ParserRuleReturnScope {
        public Expression element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "moreidentifierRuleSuffixRubbish"
    // JavaP.g:1803:1: moreidentifierRuleSuffixRubbish returns [Expression element] : id= identifierRule ( '.' idx= identifierRule )* ( ( '[' ']' )+ '.' czkw= 'class' | arr= arrayAccessSuffixRubbish | arg= argumentsSuffixRubbish | '.' clkw= 'class' | '.' gen= explicitGenericInvocation | '.' thiskw= 'this' | '.' supkw= 'super' supsuf= superSuffix | '.' newkw= 'new' in= innerCreator )? ;
    public final Java_JavaP.moreidentifierRuleSuffixRubbish_return moreidentifierRuleSuffixRubbish() throws RecognitionException {
        TargetScope_stack.push(new TargetScope_scope());

        Java_JavaP.moreidentifierRuleSuffixRubbish_return retval = new Java_JavaP.moreidentifierRuleSuffixRubbish_return();
        retval.start = input.LT(1);
        int moreidentifierRuleSuffixRubbish_StartIndex = input.index();
        Object root_0 = null;

        Token czkw=null;
        Token clkw=null;
        Token thiskw=null;
        Token supkw=null;
        Token newkw=null;
        Token char_literal229=null;
        Token char_literal230=null;
        Token char_literal231=null;
        Token char_literal232=null;
        Token char_literal233=null;
        Token char_literal234=null;
        Token char_literal235=null;
        Token char_literal236=null;
        Token char_literal237=null;
        Java_JavaP.identifierRule_return id = null;

        Java_JavaP.identifierRule_return idx = null;

        Java_JavaP.arrayAccessSuffixRubbish_return arr = null;

        Java_JavaP.argumentsSuffixRubbish_return arg = null;

        Java_JavaP.explicitGenericInvocation_return gen = null;

        Java_JavaP.superSuffix_return supsuf = null;

        Java_JavaP.innerCreator_return in = null;


        Object czkw_tree=null;
        Object clkw_tree=null;
        Object thiskw_tree=null;
        Object supkw_tree=null;
        Object newkw_tree=null;
        Object char_literal229_tree=null;
        Object char_literal230_tree=null;
        Object char_literal231_tree=null;
        Object char_literal232_tree=null;
        Object char_literal233_tree=null;
        Object char_literal234_tree=null;
        Object char_literal235_tree=null;
        Object char_literal236_tree=null;
        Object char_literal237_tree=null;


        Token stop = null;
        CrossReferenceTarget scopeTarget = null;
        int zzArrayDimension = 0;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 134) ) { return retval; }
            // JavaP.g:1818:2: (id= identifierRule ( '.' idx= identifierRule )* ( ( '[' ']' )+ '.' czkw= 'class' | arr= arrayAccessSuffixRubbish | arg= argumentsSuffixRubbish | '.' clkw= 'class' | '.' gen= explicitGenericInvocation | '.' thiskw= 'this' | '.' supkw= 'super' supsuf= superSuffix | '.' newkw= 'new' in= innerCreator )? )
            // JavaP.g:1818:4: id= identifierRule ( '.' idx= identifierRule )* ( ( '[' ']' )+ '.' czkw= 'class' | arr= arrayAccessSuffixRubbish | arg= argumentsSuffixRubbish | '.' clkw= 'class' | '.' gen= explicitGenericInvocation | '.' thiskw= 'this' | '.' supkw= 'super' supsuf= superSuffix | '.' newkw= 'new' in= innerCreator )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_identifierRule_in_moreidentifierRuleSuffixRubbish9014);
            id=identifierRule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, id.getTree());
            if ( state.backtracking==0 ) {
              ((TargetScope_scope)TargetScope_stack.peek()).target = expressionFactory().createNamedTarget((id!=null?input.toString(id.start,id.stop):null));
              	            scopeTarget = ((TargetScope_scope)TargetScope_stack.peek()).target;
              	            ((TargetScope_scope)TargetScope_stack.peek()).start =id.start;
              	            stop=id.start;
              	            //setLocation(((TargetScope_scope)TargetScope_stack.peek()).target,((TargetScope_scope)TargetScope_stack.peek()).start,stop);
              	            
            }
            // JavaP.g:1825:4: ( '.' idx= identifierRule )*
            loop161:
            do {
                int alt161=2;
                int LA161_0 = input.LA(1);

                if ( (LA161_0==51) ) {
                    int LA161_2 = input.LA(2);

                    if ( (LA161_2==Identifier) ) {
                        int LA161_3 = input.LA(3);

                        if ( (synpred243_JavaP()) ) {
                            alt161=1;
                        }


                    }


                }


                switch (alt161) {
            	case 1 :
            	    // JavaP.g:1825:5: '.' idx= identifierRule
            	    {
            	    char_literal229=(Token)match(input,51,FOLLOW_51_in_moreidentifierRuleSuffixRubbish9034); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal229_tree = (Object)adaptor.create(char_literal229);
            	    adaptor.addChild(root_0, char_literal229_tree);
            	    }
            	    pushFollow(FOLLOW_identifierRule_in_moreidentifierRuleSuffixRubbish9038);
            	    idx=identifierRule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, idx.getTree());
            	    if ( state.backtracking==0 ) {
            	      ((TargetScope_scope)TargetScope_stack.peek()).target = expressionFactory().createNamedTarget((idx!=null?input.toString(idx.start,idx.stop):null),((TargetScope_scope)TargetScope_stack.peek()).target);
            	      	        scopeTarget = ((TargetScope_scope)TargetScope_stack.peek()).target;
            	      	        stop=idx.start;
            	      	        //setLocation(((TargetScope_scope)TargetScope_stack.peek()).target, ((TargetScope_scope)TargetScope_stack.peek()).start, idx.start);
            	      	       
            	    }

            	    }
            	    break;

            	default :
            	    break loop161;
                }
            } while (true);

            if ( state.backtracking==0 ) {
              retval.element = expressionFactory().createNameExpression(((NamedTarget)((TargetScope_scope)TargetScope_stack.peek()).target).name(),cloneTargetOfTarget(((NamedTarget)((TargetScope_scope)TargetScope_stack.peek()).target)));
              	 //setLocation(retval.element, ((TargetScope_scope)TargetScope_stack.peek()).start, stop);
              	 //The variable reference is only returned if none of the following subrules match.
              	
            }
            // JavaP.g:1836:1: ( ( '[' ']' )+ '.' czkw= 'class' | arr= arrayAccessSuffixRubbish | arg= argumentsSuffixRubbish | '.' clkw= 'class' | '.' gen= explicitGenericInvocation | '.' thiskw= 'this' | '.' supkw= 'super' supsuf= superSuffix | '.' newkw= 'new' in= innerCreator )?
            int alt163=9;
            alt163 = dfa163.predict(input);
            switch (alt163) {
                case 1 :
                    // JavaP.g:1836:9: ( '[' ']' )+ '.' czkw= 'class'
                    {
                    // JavaP.g:1836:9: ( '[' ']' )+
                    int cnt162=0;
                    loop162:
                    do {
                        int alt162=2;
                        int LA162_0 = input.LA(1);

                        if ( (LA162_0==70) ) {
                            alt162=1;
                        }


                        switch (alt162) {
                    	case 1 :
                    	    // JavaP.g:1836:10: '[' ']'
                    	    {
                    	    char_literal230=(Token)match(input,70,FOLLOW_70_in_moreidentifierRuleSuffixRubbish9068); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal230_tree = (Object)adaptor.create(char_literal230);
                    	    adaptor.addChild(root_0, char_literal230_tree);
                    	    }
                    	    char_literal231=(Token)match(input,71,FOLLOW_71_in_moreidentifierRuleSuffixRubbish9070); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal231_tree = (Object)adaptor.create(char_literal231);
                    	    adaptor.addChild(root_0, char_literal231_tree);
                    	    }
                    	    if ( state.backtracking==0 ) {
                    	      zzArrayDimension++; 
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt162 >= 1 ) break loop162;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(162, input);
                                throw eee;
                        }
                        cnt162++;
                    } while (true);

                    char_literal232=(Token)match(input,51,FOLLOW_51_in_moreidentifierRuleSuffixRubbish9077); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal232_tree = (Object)adaptor.create(char_literal232);
                    adaptor.addChild(root_0, char_literal232_tree);
                    }
                    czkw=(Token)match(input,59,FOLLOW_59_in_moreidentifierRuleSuffixRubbish9081); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    czkw_tree = (Object)adaptor.create(czkw);
                    adaptor.addChild(root_0, czkw_tree);
                    }
                    if ( state.backtracking==0 ) {

                      retval.element.removeAllMetadata();
                      retval.element = new ClassLiteral(new ArrayTypeReference(createTypeReference((NamedTarget)((TargetScope_scope)TargetScope_stack.peek()).target), zzArrayDimension));
                      setLocation(retval.element, ((TargetScope_scope)TargetScope_stack.peek()).start, czkw);
                             
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:1842:9: arr= arrayAccessSuffixRubbish
                    {
                    pushFollow(FOLLOW_arrayAccessSuffixRubbish_in_moreidentifierRuleSuffixRubbish9101);
                    arr=arrayAccessSuffixRubbish();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arr.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = arr.element;
                    }

                    }
                    break;
                case 3 :
                    // JavaP.g:1843:9: arg= argumentsSuffixRubbish
                    {
                    pushFollow(FOLLOW_argumentsSuffixRubbish_in_moreidentifierRuleSuffixRubbish9115);
                    arg=argumentsSuffixRubbish();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arg.getTree());
                    if ( state.backtracking==0 ) {

                             //retval.element.removeAllMetadata();
                             retval.element = arg.element;
                    }

                    }
                    break;
                case 4 :
                    // JavaP.g:1846:9: '.' clkw= 'class'
                    {
                    char_literal233=(Token)match(input,51,FOLLOW_51_in_moreidentifierRuleSuffixRubbish9128); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal233_tree = (Object)adaptor.create(char_literal233);
                    adaptor.addChild(root_0, char_literal233_tree);
                    }
                    clkw=(Token)match(input,59,FOLLOW_59_in_moreidentifierRuleSuffixRubbish9132); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    clkw_tree = (Object)adaptor.create(clkw);
                    adaptor.addChild(root_0, clkw_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element.removeAllMetadata();
                               retval.element = new ClassLiteral(createTypeReference((NamedTarget)((TargetScope_scope)TargetScope_stack.peek()).target));
                                setLocation(retval.element, ((TargetScope_scope)TargetScope_stack.peek()).start, clkw);
                               
                    }

                    }
                    break;
                case 5 :
                    // JavaP.g:1851:9: '.' gen= explicitGenericInvocation
                    {
                    char_literal234=(Token)match(input,51,FOLLOW_51_in_moreidentifierRuleSuffixRubbish9153); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal234_tree = (Object)adaptor.create(char_literal234);
                    adaptor.addChild(root_0, char_literal234_tree);
                    }
                    pushFollow(FOLLOW_explicitGenericInvocation_in_moreidentifierRuleSuffixRubbish9157);
                    gen=explicitGenericInvocation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, gen.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element.removeAllMetadata(); retval.element = gen.element;
                    }

                    }
                    break;
                case 6 :
                    // JavaP.g:1852:9: '.' thiskw= 'this'
                    {
                    char_literal235=(Token)match(input,51,FOLLOW_51_in_moreidentifierRuleSuffixRubbish9170); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal235_tree = (Object)adaptor.create(char_literal235);
                    adaptor.addChild(root_0, char_literal235_tree);
                    }
                    thiskw=(Token)match(input,93,FOLLOW_93_in_moreidentifierRuleSuffixRubbish9174); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    thiskw_tree = (Object)adaptor.create(thiskw);
                    adaptor.addChild(root_0, thiskw_tree);
                    }
                    if ( state.backtracking==0 ) {

                                //retval.element.removeAllMetadata();
                                retval.element = new ThisLiteral(createTypeReference((NamedTarget)((TargetScope_scope)TargetScope_stack.peek()).target));
                                setLocation(retval.element, ((TargetScope_scope)TargetScope_stack.peek()).start, thiskw);
                              
                    }

                    }
                    break;
                case 7 :
                    // JavaP.g:1858:9: '.' supkw= 'super' supsuf= superSuffix
                    {
                    char_literal236=(Token)match(input,51,FOLLOW_51_in_moreidentifierRuleSuffixRubbish9194); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal236_tree = (Object)adaptor.create(char_literal236);
                    adaptor.addChild(root_0, char_literal236_tree);
                    }
                    supkw=(Token)match(input,89,FOLLOW_89_in_moreidentifierRuleSuffixRubbish9198); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    supkw_tree = (Object)adaptor.create(supkw);
                    adaptor.addChild(root_0, supkw_tree);
                    }
                    pushFollow(FOLLOW_superSuffix_in_moreidentifierRuleSuffixRubbish9214);
                    supsuf=superSuffix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, supsuf.getTree());
                    if ( state.backtracking==0 ) {

                          //           retval.element.removeAllMetadata();
                                     CrossReferenceTarget tar = new SuperTarget(((TargetScope_scope)TargetScope_stack.peek()).target);
                                     setKeyword(tar,supkw);
                                     setLocation(tar,((TargetScope_scope)TargetScope_stack.peek()).start,supkw);
                                     retval.element = supsuf.element;
                                     ((TargetedExpression)retval.element).setTarget(tar);
                                  
                    }

                    }
                    break;
                case 8 :
                    // JavaP.g:1867:9: '.' newkw= 'new' in= innerCreator
                    {
                    char_literal237=(Token)match(input,51,FOLLOW_51_in_moreidentifierRuleSuffixRubbish9226); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal237_tree = (Object)adaptor.create(char_literal237);
                    adaptor.addChild(root_0, char_literal237_tree);
                    }
                    newkw=(Token)match(input,135,FOLLOW_135_in_moreidentifierRuleSuffixRubbish9230); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    newkw_tree = (Object)adaptor.create(newkw);
                    adaptor.addChild(root_0, newkw_tree);
                    }
                    pushFollow(FOLLOW_innerCreator_in_moreidentifierRuleSuffixRubbish9234);
                    in=innerCreator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, in.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = in.element;setKeyword(retval.element,newkw);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

              //if(! retval.element.descendants().contains(scopeTarget)) {
              //  scopeTarget.removeAllMetadata();
              //  for(Element e: scopeTarget.descendants()) {
              //    e.removeAllMetadata();
              //  }
              //}

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 134, moreidentifierRuleSuffixRubbish_StartIndex); }
            TargetScope_stack.pop();

        }
        return retval;
    }
    // $ANTLR end "moreidentifierRuleSuffixRubbish"

    public static class identifierSuffixRubbush_return extends ParserRuleReturnScope {
        public Expression element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "identifierSuffixRubbush"
    // JavaP.g:1870:1: identifierSuffixRubbush returns [Expression element] : 'this' ( '.' id= identifierRule )* (arr= arrayAccessSuffixRubbish | arg= argumentsSuffixRubbish | '.' 'class' | '.' gen= explicitGenericInvocation | '.' supkw= 'super' supsuf= superSuffix | '.' newkw= 'new' in= innerCreator )? ;
    public final Java_JavaP.identifierSuffixRubbush_return identifierSuffixRubbush() throws RecognitionException {
        TargetScope_stack.push(new TargetScope_scope());

        Java_JavaP.identifierSuffixRubbush_return retval = new Java_JavaP.identifierSuffixRubbush_return();
        retval.start = input.LT(1);
        int identifierSuffixRubbush_StartIndex = input.index();
        Object root_0 = null;

        Token supkw=null;
        Token newkw=null;
        Token string_literal238=null;
        Token char_literal239=null;
        Token char_literal240=null;
        Token string_literal241=null;
        Token char_literal242=null;
        Token char_literal243=null;
        Token char_literal244=null;
        Java_JavaP.identifierRule_return id = null;

        Java_JavaP.arrayAccessSuffixRubbish_return arr = null;

        Java_JavaP.argumentsSuffixRubbish_return arg = null;

        Java_JavaP.explicitGenericInvocation_return gen = null;

        Java_JavaP.superSuffix_return supsuf = null;

        Java_JavaP.innerCreator_return in = null;


        Object supkw_tree=null;
        Object newkw_tree=null;
        Object string_literal238_tree=null;
        Object char_literal239_tree=null;
        Object char_literal240_tree=null;
        Object string_literal241_tree=null;
        Object char_literal242_tree=null;
        Object char_literal243_tree=null;
        Object char_literal244_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 135) ) { return retval; }
            // JavaP.g:1872:2: ( 'this' ( '.' id= identifierRule )* (arr= arrayAccessSuffixRubbish | arg= argumentsSuffixRubbish | '.' 'class' | '.' gen= explicitGenericInvocation | '.' supkw= 'super' supsuf= superSuffix | '.' newkw= 'new' in= innerCreator )? )
            // JavaP.g:1872:4: 'this' ( '.' id= identifierRule )* (arr= arrayAccessSuffixRubbish | arg= argumentsSuffixRubbish | '.' 'class' | '.' gen= explicitGenericInvocation | '.' supkw= 'super' supsuf= superSuffix | '.' newkw= 'new' in= innerCreator )?
            {
            root_0 = (Object)adaptor.nil();

            string_literal238=(Token)match(input,93,FOLLOW_93_in_identifierSuffixRubbush9258); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            string_literal238_tree = (Object)adaptor.create(string_literal238);
            adaptor.addChild(root_0, string_literal238_tree);
            }
            if ( state.backtracking==0 ) {
              ((TargetScope_scope)TargetScope_stack.peek()).target = new ThisLiteral();
            }
            // JavaP.g:1872:54: ( '.' id= identifierRule )*
            loop164:
            do {
                int alt164=2;
                int LA164_0 = input.LA(1);

                if ( (LA164_0==51) ) {
                    int LA164_2 = input.LA(2);

                    if ( (LA164_2==Identifier) ) {
                        int LA164_3 = input.LA(3);

                        if ( (synpred253_JavaP()) ) {
                            alt164=1;
                        }


                    }


                }


                switch (alt164) {
            	case 1 :
            	    // JavaP.g:1872:55: '.' id= identifierRule
            	    {
            	    char_literal239=(Token)match(input,51,FOLLOW_51_in_identifierSuffixRubbush9262); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal239_tree = (Object)adaptor.create(char_literal239);
            	    adaptor.addChild(root_0, char_literal239_tree);
            	    }
            	    pushFollow(FOLLOW_identifierRule_in_identifierSuffixRubbush9266);
            	    id=identifierRule();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, id.getTree());
            	    if ( state.backtracking==0 ) {
            	      ((TargetScope_scope)TargetScope_stack.peek()).target = expressionFactory().createNamedTarget((id!=null?input.toString(id.start,id.stop):null),((TargetScope_scope)TargetScope_stack.peek()).target);
            	    }

            	    }
            	    break;

            	default :
            	    break loop164;
                }
            } while (true);

            if ( state.backtracking==0 ) {
              if(((TargetScope_scope)TargetScope_stack.peek()).target instanceof ThisLiteral) {
              	  retval.element = (ThisLiteral)((TargetScope_scope)TargetScope_stack.peek()).target;
              	 } else {
              	  retval.element = expressionFactory().createNameExpression(((NamedTarget)((TargetScope_scope)TargetScope_stack.peek()).target).name(),cloneTargetOfTarget((NamedTarget)((TargetScope_scope)TargetScope_stack.peek()).target));
              	 }
            }
            // JavaP.g:1878:4: (arr= arrayAccessSuffixRubbish | arg= argumentsSuffixRubbish | '.' 'class' | '.' gen= explicitGenericInvocation | '.' supkw= 'super' supsuf= superSuffix | '.' newkw= 'new' in= innerCreator )?
            int alt165=7;
            alt165 = dfa165.predict(input);
            switch (alt165) {
                case 1 :
                    // JavaP.g:1879:9: arr= arrayAccessSuffixRubbish
                    {
                    pushFollow(FOLLOW_arrayAccessSuffixRubbish_in_identifierSuffixRubbush9290);
                    arr=arrayAccessSuffixRubbish();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arr.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = arr.element;
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:1880:9: arg= argumentsSuffixRubbish
                    {
                    pushFollow(FOLLOW_argumentsSuffixRubbish_in_identifierSuffixRubbush9304);
                    arg=argumentsSuffixRubbish();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arg.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = arg.element;
                    }

                    }
                    break;
                case 3 :
                    // JavaP.g:1881:9: '.' 'class'
                    {
                    char_literal240=(Token)match(input,51,FOLLOW_51_in_identifierSuffixRubbush9316); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal240_tree = (Object)adaptor.create(char_literal240);
                    adaptor.addChild(root_0, char_literal240_tree);
                    }
                    string_literal241=(Token)match(input,59,FOLLOW_59_in_identifierSuffixRubbush9318); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal241_tree = (Object)adaptor.create(string_literal241);
                    adaptor.addChild(root_0, string_literal241_tree);
                    }
                    if ( state.backtracking==0 ) {
                      retval.element = new ClassLiteral(createTypeReference((NamedTarget)((TargetScope_scope)TargetScope_stack.peek()).target));
                    }

                    }
                    break;
                case 4 :
                    // JavaP.g:1882:9: '.' gen= explicitGenericInvocation
                    {
                    char_literal242=(Token)match(input,51,FOLLOW_51_in_identifierSuffixRubbush9330); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal242_tree = (Object)adaptor.create(char_literal242);
                    adaptor.addChild(root_0, char_literal242_tree);
                    }
                    pushFollow(FOLLOW_explicitGenericInvocation_in_identifierSuffixRubbush9334);
                    gen=explicitGenericInvocation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, gen.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = gen.element;
                    }

                    }
                    break;
                case 5 :
                    // JavaP.g:1883:9: '.' supkw= 'super' supsuf= superSuffix
                    {
                    char_literal243=(Token)match(input,51,FOLLOW_51_in_identifierSuffixRubbush9346); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal243_tree = (Object)adaptor.create(char_literal243);
                    adaptor.addChild(root_0, char_literal243_tree);
                    }
                    supkw=(Token)match(input,89,FOLLOW_89_in_identifierSuffixRubbush9350); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    supkw_tree = (Object)adaptor.create(supkw);
                    adaptor.addChild(root_0, supkw_tree);
                    }
                    pushFollow(FOLLOW_superSuffix_in_identifierSuffixRubbush9354);
                    supsuf=superSuffix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, supsuf.getTree());
                    if ( state.backtracking==0 ) {

                                    CrossReferenceTarget tar = new SuperTarget(((TargetScope_scope)TargetScope_stack.peek()).target);
                                    setKeyword(tar,supkw);
                                    setLocation(tar, ((TargetScope_scope)TargetScope_stack.peek()).start,supkw);
                                    retval.element = supsuf.element;
                                     ((TargetedExpression)retval.element).setTarget(tar);
                                   
                    }

                    }
                    break;
                case 6 :
                    // JavaP.g:1890:9: '.' newkw= 'new' in= innerCreator
                    {
                    char_literal244=(Token)match(input,51,FOLLOW_51_in_identifierSuffixRubbush9366); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    char_literal244_tree = (Object)adaptor.create(char_literal244);
                    adaptor.addChild(root_0, char_literal244_tree);
                    }
                    newkw=(Token)match(input,135,FOLLOW_135_in_identifierSuffixRubbush9370); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    newkw_tree = (Object)adaptor.create(newkw);
                    adaptor.addChild(root_0, newkw_tree);
                    }
                    pushFollow(FOLLOW_innerCreator_in_identifierSuffixRubbush9374);
                    in=innerCreator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, in.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = in.element;setKeyword(retval.element,newkw);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 135, identifierSuffixRubbush_StartIndex); }
            TargetScope_stack.pop();

        }
        return retval;
    }
    // $ANTLR end "identifierSuffixRubbush"

    public static class argumentsSuffixRubbish_return extends ParserRuleReturnScope {
        public MethodInvocation element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "argumentsSuffixRubbish"
    // JavaP.g:1895:1: argumentsSuffixRubbish returns [MethodInvocation element] : args= arguments ;
    public final Java_JavaP.argumentsSuffixRubbish_return argumentsSuffixRubbish() throws RecognitionException {
        Java_JavaP.argumentsSuffixRubbish_return retval = new Java_JavaP.argumentsSuffixRubbish_return();
        retval.start = input.LT(1);
        int argumentsSuffixRubbish_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.arguments_return args = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 136) ) { return retval; }
            // JavaP.g:1897:2: (args= arguments )
            // JavaP.g:1897:4: args= arguments
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_arguments_in_argumentsSuffixRubbish9401);
            args=arguments();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, args.getTree());
            if ( state.backtracking==0 ) {

              	         Object tar = ((TargetScope_scope)TargetScope_stack.peek()).target;
              	         ((Element)tar).removeAllMetadata();
              	         if(tar instanceof NamedTarget) {
              	           String name = ((NamedTarget)tar).name();
              	           ((TargetScope_scope)TargetScope_stack.peek()).target = ((NamedTarget)tar).getTarget(); //chop off head
              	           retval.element = invocation(name, ((TargetScope_scope)TargetScope_stack.peek()).target);
              	           retval.element.addAllArguments(args.element);
              	         } else if (tar instanceof ThisLiteral) {
              	           ((TargetScope_scope)TargetScope_stack.peek()).target = ((ThisLiteral)tar).getTypeReference(); //chop off head
              	           retval.element = new ThisConstructorDelegation();
              	           ((ThisConstructorDelegation)retval.element).setTarget(((TargetScope_scope)TargetScope_stack.peek()).target);
                           retval.element.addAllArguments(args.element);
                         }
              	         setLocation(retval.element, ((TargetScope_scope)TargetScope_stack.peek()).start, args.stop);
              	        
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 136, argumentsSuffixRubbish_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "argumentsSuffixRubbish"

    public static class arrayAccessSuffixRubbish_return extends ParserRuleReturnScope {
        public Expression element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arrayAccessSuffixRubbish"
    // JavaP.g:1918:1: arrayAccessSuffixRubbish returns [Expression element] : (open= '[' arrex= expression close= ']' )+ ;
    public final Java_JavaP.arrayAccessSuffixRubbish_return arrayAccessSuffixRubbish() throws RecognitionException {
        Java_JavaP.arrayAccessSuffixRubbish_return retval = new Java_JavaP.arrayAccessSuffixRubbish_return();
        retval.start = input.LT(1);
        int arrayAccessSuffixRubbish_StartIndex = input.index();
        Object root_0 = null;

        Token open=null;
        Token close=null;
        Java_JavaP.expression_return arrex = null;


        Object open_tree=null;
        Object close_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 137) ) { return retval; }
            // JavaP.g:1920:2: ( (open= '[' arrex= expression close= ']' )+ )
            // JavaP.g:1920:4: (open= '[' arrex= expression close= ']' )+
            {
            root_0 = (Object)adaptor.nil();

            if ( state.backtracking==0 ) {
              retval.element = new ArrayAccessExpression(expressionFactory().createNameExpression(((NamedTarget)((TargetScope_scope)TargetScope_stack.peek()).target).name(),cloneTargetOfTarget((NamedTarget)((TargetScope_scope)TargetScope_stack.peek()).target)));
            }
            // JavaP.g:1921:10: (open= '[' arrex= expression close= ']' )+
            int cnt166=0;
            loop166:
            do {
                int alt166=2;
                alt166 = dfa166.predict(input);
                switch (alt166) {
            	case 1 :
            	    // JavaP.g:1921:11: open= '[' arrex= expression close= ']'
            	    {
            	    open=(Token)match(input,70,FOLLOW_70_in_arrayAccessSuffixRubbish9447); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    open_tree = (Object)adaptor.create(open);
            	    adaptor.addChild(root_0, open_tree);
            	    }
            	    pushFollow(FOLLOW_expression_in_arrayAccessSuffixRubbish9451);
            	    arrex=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrex.getTree());
            	    close=(Token)match(input,71,FOLLOW_71_in_arrayAccessSuffixRubbish9455); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    close_tree = (Object)adaptor.create(close);
            	    adaptor.addChild(root_0, close_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	       FilledArrayIndex index = new FilledArrayIndex(arrex.element);
            	      	           ((ArrayAccessExpression)retval.element).addIndex(index);
            	      	           setLocation(index, open, close);
            	      	          
            	    }

            	    }
            	    break;

            	default :
            	    if ( cnt166 >= 1 ) break loop166;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(166, input);
                        throw eee;
                }
                cnt166++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              setLocation(retval.element, ((TargetScope_scope)TargetScope_stack.peek()).start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 137, arrayAccessSuffixRubbish_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "arrayAccessSuffixRubbish"

    public static class creator_return extends ParserRuleReturnScope {
        public Expression element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "creator"
    // JavaP.g:1931:1: creator returns [Expression element] : (targs= nonWildcardTypeArguments tx= createdName (dia= '<' '>' )? restx= classCreatorRest | tt= createdName ( '[' ']' )+ init= arrayInitializer | ttt= createdName ( '[' exx= expression ']' )+ ( '[' ']' )* | t= createdName (diam= '<' '>' )? rest= classCreatorRest );
    public final Java_JavaP.creator_return creator() throws RecognitionException {
        Java_JavaP.creator_return retval = new Java_JavaP.creator_return();
        retval.start = input.LT(1);
        int creator_StartIndex = input.index();
        Object root_0 = null;

        Token dia=null;
        Token diam=null;
        Token char_literal245=null;
        Token char_literal246=null;
        Token char_literal247=null;
        Token char_literal248=null;
        Token char_literal249=null;
        Token char_literal250=null;
        Token char_literal251=null;
        Token char_literal252=null;
        Java_JavaP.nonWildcardTypeArguments_return targs = null;

        Java_JavaP.createdName_return tx = null;

        Java_JavaP.classCreatorRest_return restx = null;

        Java_JavaP.createdName_return tt = null;

        Java_JavaP.arrayInitializer_return init = null;

        Java_JavaP.createdName_return ttt = null;

        Java_JavaP.expression_return exx = null;

        Java_JavaP.createdName_return t = null;

        Java_JavaP.classCreatorRest_return rest = null;


        Object dia_tree=null;
        Object diam_tree=null;
        Object char_literal245_tree=null;
        Object char_literal246_tree=null;
        Object char_literal247_tree=null;
        Object char_literal248_tree=null;
        Object char_literal249_tree=null;
        Object char_literal250_tree=null;
        Object char_literal251_tree=null;
        Object char_literal252_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 138) ) { return retval; }
            // JavaP.g:1934:5: (targs= nonWildcardTypeArguments tx= createdName (dia= '<' '>' )? restx= classCreatorRest | tt= createdName ( '[' ']' )+ init= arrayInitializer | ttt= createdName ( '[' exx= expression ']' )+ ( '[' ']' )* | t= createdName (diam= '<' '>' )? rest= classCreatorRest )
            int alt172=4;
            alt172 = dfa172.predict(input);
            switch (alt172) {
                case 1 :
                    // JavaP.g:1934:9: targs= nonWildcardTypeArguments tx= createdName (dia= '<' '>' )? restx= classCreatorRest
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_nonWildcardTypeArguments_in_creator9510);
                    targs=nonWildcardTypeArguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, targs.getTree());
                    pushFollow(FOLLOW_createdName_in_creator9514);
                    tx=createdName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, tx.getTree());
                    // JavaP.g:1934:55: (dia= '<' '>' )?
                    int alt167=2;
                    int LA167_0 = input.LA(1);

                    if ( (LA167_0==62) ) {
                        alt167=1;
                    }
                    switch (alt167) {
                        case 1 :
                            // JavaP.g:1934:56: dia= '<' '>'
                            {
                            dia=(Token)match(input,62,FOLLOW_62_in_creator9519); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            dia_tree = (Object)adaptor.create(dia);
                            adaptor.addChild(root_0, dia_tree);
                            }
                            char_literal245=(Token)match(input,64,FOLLOW_64_in_creator9520); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal245_tree = (Object)adaptor.create(char_literal245);
                            adaptor.addChild(root_0, char_literal245_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_classCreatorRest_in_creator9526);
                    restx=classCreatorRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, restx.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = new ConstructorInvocation((BasicJavaTypeReference)tx.element,((TargetScope_scope)TargetScope_stack.peek()).target);
                                ((ConstructorInvocation)retval.element).setBody(restx.element.body());
                                ((ConstructorInvocation)retval.element).addAllArguments(restx.element.arguments());
                                ((ConstructorInvocation)retval.element).addAllTypeArguments(targs.element);
                                if(dia != null) {((ConstructorInvocation)retval.element).setDiamond(true);}
                               
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:1941:10: tt= createdName ( '[' ']' )+ init= arrayInitializer
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_createdName_in_creator9550);
                    tt=createdName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, tt.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = new ArrayCreationExpression(tt.element);
                    }
                    // JavaP.g:1942:14: ( '[' ']' )+
                    int cnt168=0;
                    loop168:
                    do {
                        int alt168=2;
                        int LA168_0 = input.LA(1);

                        if ( (LA168_0==70) ) {
                            alt168=1;
                        }


                        switch (alt168) {
                    	case 1 :
                    	    // JavaP.g:1942:15: '[' ']'
                    	    {
                    	    char_literal246=(Token)match(input,70,FOLLOW_70_in_creator9568); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal246_tree = (Object)adaptor.create(char_literal246);
                    	    adaptor.addChild(root_0, char_literal246_tree);
                    	    }
                    	    char_literal247=(Token)match(input,71,FOLLOW_71_in_creator9570); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal247_tree = (Object)adaptor.create(char_literal247);
                    	    adaptor.addChild(root_0, char_literal247_tree);
                    	    }
                    	    if ( state.backtracking==0 ) {
                    	      ((ArrayCreationExpression)retval.element).addDimensionInitializer(new EmptyArrayIndex(1));
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt168 >= 1 ) break loop168;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(168, input);
                                throw eee;
                        }
                        cnt168++;
                    } while (true);

                    pushFollow(FOLLOW_arrayInitializer_in_creator9578);
                    init=arrayInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, init.getTree());
                    if ( state.backtracking==0 ) {
                      ((ArrayCreationExpression)retval.element).setInitializer(init.element);
                    }

                    }
                    break;
                case 3 :
                    // JavaP.g:1944:10: ttt= createdName ( '[' exx= expression ']' )+ ( '[' ']' )*
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_createdName_in_creator9601);
                    ttt=createdName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ttt.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = new ArrayCreationExpression(ttt.element);
                    }
                    // JavaP.g:1945:11: ( '[' exx= expression ']' )+
                    int cnt169=0;
                    loop169:
                    do {
                        int alt169=2;
                        alt169 = dfa169.predict(input);
                        switch (alt169) {
                    	case 1 :
                    	    // JavaP.g:1945:12: '[' exx= expression ']'
                    	    {
                    	    char_literal248=(Token)match(input,70,FOLLOW_70_in_creator9617); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal248_tree = (Object)adaptor.create(char_literal248);
                    	    adaptor.addChild(root_0, char_literal248_tree);
                    	    }
                    	    pushFollow(FOLLOW_expression_in_creator9621);
                    	    exx=expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, exx.getTree());
                    	    char_literal249=(Token)match(input,71,FOLLOW_71_in_creator9623); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal249_tree = (Object)adaptor.create(char_literal249);
                    	    adaptor.addChild(root_0, char_literal249_tree);
                    	    }
                    	    if ( state.backtracking==0 ) {
                    	      ((ArrayCreationExpression)retval.element).addDimensionInitializer(new FilledArrayIndex(exx.element));
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt169 >= 1 ) break loop169;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(169, input);
                                throw eee;
                        }
                        cnt169++;
                    } while (true);

                    // JavaP.g:1946:13: ( '[' ']' )*
                    loop170:
                    do {
                        int alt170=2;
                        int LA170_0 = input.LA(1);

                        if ( (LA170_0==70) ) {
                            int LA170_2 = input.LA(2);

                            if ( (LA170_2==71) ) {
                                alt170=1;
                            }


                        }


                        switch (alt170) {
                    	case 1 :
                    	    // JavaP.g:1946:14: '[' ']'
                    	    {
                    	    char_literal250=(Token)match(input,70,FOLLOW_70_in_creator9642); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal250_tree = (Object)adaptor.create(char_literal250);
                    	    adaptor.addChild(root_0, char_literal250_tree);
                    	    }
                    	    char_literal251=(Token)match(input,71,FOLLOW_71_in_creator9644); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    char_literal251_tree = (Object)adaptor.create(char_literal251);
                    	    adaptor.addChild(root_0, char_literal251_tree);
                    	    }
                    	    if ( state.backtracking==0 ) {
                    	      ((ArrayCreationExpression)retval.element).addDimensionInitializer(new EmptyArrayIndex(1));
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop170;
                        }
                    } while (true);


                    }
                    break;
                case 4 :
                    // JavaP.g:1947:9: t= createdName (diam= '<' '>' )? rest= classCreatorRest
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_createdName_in_creator9660);
                    t=createdName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, t.getTree());
                    // JavaP.g:1947:23: (diam= '<' '>' )?
                    int alt171=2;
                    int LA171_0 = input.LA(1);

                    if ( (LA171_0==62) ) {
                        alt171=1;
                    }
                    switch (alt171) {
                        case 1 :
                            // JavaP.g:1947:24: diam= '<' '>'
                            {
                            diam=(Token)match(input,62,FOLLOW_62_in_creator9665); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            diam_tree = (Object)adaptor.create(diam);
                            adaptor.addChild(root_0, diam_tree);
                            }
                            char_literal252=(Token)match(input,64,FOLLOW_64_in_creator9666); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            char_literal252_tree = (Object)adaptor.create(char_literal252);
                            adaptor.addChild(root_0, char_literal252_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_classCreatorRest_in_creator9672);
                    rest=classCreatorRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rest.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = new ConstructorInvocation((BasicJavaTypeReference)t.element,((TargetScope_scope)TargetScope_stack.peek()).target);
                                ((ConstructorInvocation)retval.element).setBody(rest.element.body());
                                ((ConstructorInvocation)retval.element).addAllArguments(rest.element.arguments());
                                if(diam != null) {((ConstructorInvocation)retval.element).setDiamond(true);}
                               
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
              setLocation(retval.element, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 138, creator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "creator"

    public static class createdName_return extends ParserRuleReturnScope {
        public JavaTypeReference element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createdName"
    // JavaP.g:1956:1: createdName returns [JavaTypeReference element] : (cd= classOrInterfaceType | prim= primitiveType );
    public final Java_JavaP.createdName_return createdName() throws RecognitionException {
        Java_JavaP.createdName_return retval = new Java_JavaP.createdName_return();
        retval.start = input.LT(1);
        int createdName_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.classOrInterfaceType_return cd = null;

        Java_JavaP.primitiveType_return prim = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 139) ) { return retval; }
            // JavaP.g:1957:5: (cd= classOrInterfaceType | prim= primitiveType )
            int alt173=2;
            int LA173_0 = input.LA(1);

            if ( (LA173_0==Identifier) ) {
                alt173=1;
            }
            else if ( ((LA173_0>=80 && LA173_0<=87)) ) {
                alt173=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 173, 0, input);

                throw nvae;
            }
            switch (alt173) {
                case 1 :
                    // JavaP.g:1957:9: cd= classOrInterfaceType
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_classOrInterfaceType_in_createdName9709);
                    cd=classOrInterfaceType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, cd.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = cd.element;
                    }

                    }
                    break;
                case 2 :
                    // JavaP.g:1958:9: prim= primitiveType
                    {
                    root_0 = (Object)adaptor.nil();

                    pushFollow(FOLLOW_primitiveType_in_createdName9723);
                    prim=primitiveType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prim.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = prim.element;
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 139, createdName_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "createdName"

    public static class innerCreator_return extends ParserRuleReturnScope {
        public ConstructorInvocation element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "innerCreator"
    // JavaP.g:1963:1: innerCreator returns [ConstructorInvocation element] : (targs= nonWildcardTypeArguments )? name= identifierRule rest= classCreatorRest ;
    public final Java_JavaP.innerCreator_return innerCreator() throws RecognitionException {
        Java_JavaP.innerCreator_return retval = new Java_JavaP.innerCreator_return();
        retval.start = input.LT(1);
        int innerCreator_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.nonWildcardTypeArguments_return targs = null;

        Java_JavaP.identifierRule_return name = null;

        Java_JavaP.classCreatorRest_return rest = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 140) ) { return retval; }
            // JavaP.g:1964:5: ( (targs= nonWildcardTypeArguments )? name= identifierRule rest= classCreatorRest )
            // JavaP.g:1964:9: (targs= nonWildcardTypeArguments )? name= identifierRule rest= classCreatorRest
            {
            root_0 = (Object)adaptor.nil();

            // JavaP.g:1964:9: (targs= nonWildcardTypeArguments )?
            int alt174=2;
            int LA174_0 = input.LA(1);

            if ( (LA174_0==62) ) {
                alt174=1;
            }
            switch (alt174) {
                case 1 :
                    // JavaP.g:1964:10: targs= nonWildcardTypeArguments
                    {
                    pushFollow(FOLLOW_nonWildcardTypeArguments_in_innerCreator9753);
                    targs=nonWildcardTypeArguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, targs.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_identifierRule_in_innerCreator9767);
            name=identifierRule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name.getTree());
            pushFollow(FOLLOW_classCreatorRest_in_innerCreator9771);
            rest=classCreatorRest();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, rest.getTree());
            if ( state.backtracking==0 ) {
              BasicJavaTypeReference tref = (BasicJavaTypeReference)typeRef((name!=null?input.toString(name.start,name.stop):null));
                       setLocation(tref,name.start,name.start);
                       retval.element = new ConstructorInvocation((BasicJavaTypeReference)tref,((TargetScope_scope)TargetScope_stack.peek()).target);
                       retval.element.setBody(rest.element.body());
                       retval.element.addAllArguments(rest.element.arguments());
                       if(targs != null) {
                         retval.element.addAllTypeArguments(targs.element);
                       }
                      
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 140, innerCreator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "innerCreator"

    public static class classCreatorRest_return extends ParserRuleReturnScope {
        public ClassCreatorRest element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classCreatorRest"
    // JavaP.g:1978:1: classCreatorRest returns [ClassCreatorRest element] : args= arguments (body= classBody )? ;
    public final Java_JavaP.classCreatorRest_return classCreatorRest() throws RecognitionException {
        Java_JavaP.classCreatorRest_return retval = new Java_JavaP.classCreatorRest_return();
        retval.start = input.LT(1);
        int classCreatorRest_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.arguments_return args = null;

        Java_JavaP.classBody_return body = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 141) ) { return retval; }
            // JavaP.g:1979:5: (args= arguments (body= classBody )? )
            // JavaP.g:1979:9: args= arguments (body= classBody )?
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_arguments_in_classCreatorRest9807);
            args=arguments();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, args.getTree());
            if ( state.backtracking==0 ) {
              retval.element = new ClassCreatorRest(args.element);
            }
            // JavaP.g:1979:78: (body= classBody )?
            int alt175=2;
            int LA175_0 = input.LA(1);

            if ( (LA175_0==66) ) {
                alt175=1;
            }
            switch (alt175) {
                case 1 :
                    // JavaP.g:1979:79: body= classBody
                    {
                    pushFollow(FOLLOW_classBody_in_classCreatorRest9813);
                    body=classBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, body.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element.setBody(body.element);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 141, classCreatorRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classCreatorRest"

    public static class explicitGenericInvocation_return extends ParserRuleReturnScope {
        public Expression element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "explicitGenericInvocation"
    // JavaP.g:1983:1: explicitGenericInvocation returns [Expression element] : targs= nonWildcardTypeArguments name= identifierRule args= arguments ;
    public final Java_JavaP.explicitGenericInvocation_return explicitGenericInvocation() throws RecognitionException {
        Java_JavaP.explicitGenericInvocation_return retval = new Java_JavaP.explicitGenericInvocation_return();
        retval.start = input.LT(1);
        int explicitGenericInvocation_StartIndex = input.index();
        Object root_0 = null;

        Java_JavaP.nonWildcardTypeArguments_return targs = null;

        Java_JavaP.identifierRule_return name = null;

        Java_JavaP.arguments_return args = null;



        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 142) ) { return retval; }
            // JavaP.g:1984:5: (targs= nonWildcardTypeArguments name= identifierRule args= arguments )
            // JavaP.g:1984:9: targs= nonWildcardTypeArguments name= identifierRule args= arguments
            {
            root_0 = (Object)adaptor.nil();

            pushFollow(FOLLOW_nonWildcardTypeArguments_in_explicitGenericInvocation9843);
            targs=nonWildcardTypeArguments();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, targs.getTree());
            pushFollow(FOLLOW_identifierRule_in_explicitGenericInvocation9847);
            name=identifierRule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name.getTree());
            pushFollow(FOLLOW_arguments_in_explicitGenericInvocation9851);
            args=arguments();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, args.getTree());
            if ( state.backtracking==0 ) {
              retval.element = invocation((name!=null?input.toString(name.start,name.stop):null),((TargetScope_scope)TargetScope_stack.peek()).target);
                         ((MethodInvocation)retval.element).addAllArguments(args.element);
                         ((MethodInvocation)retval.element).addAllTypeArguments(targs.element);
                        
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 142, explicitGenericInvocation_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "explicitGenericInvocation"

    public static class nonWildcardTypeArguments_return extends ParserRuleReturnScope {
        public List<TypeArgument> element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "nonWildcardTypeArguments"
    // JavaP.g:1991:1: nonWildcardTypeArguments returns [List<TypeArgument> element] : '<' list= typeList '>' ;
    public final Java_JavaP.nonWildcardTypeArguments_return nonWildcardTypeArguments() throws RecognitionException {
        Java_JavaP.nonWildcardTypeArguments_return retval = new Java_JavaP.nonWildcardTypeArguments_return();
        retval.start = input.LT(1);
        int nonWildcardTypeArguments_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal253=null;
        Token char_literal254=null;
        Java_JavaP.typeList_return list = null;


        Object char_literal253_tree=null;
        Object char_literal254_tree=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 143) ) { return retval; }
            // JavaP.g:1992:5: ( '<' list= typeList '>' )
            // JavaP.g:1992:9: '<' list= typeList '>'
            {
            root_0 = (Object)adaptor.nil();

            char_literal253=(Token)match(input,62,FOLLOW_62_in_nonWildcardTypeArguments9886); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal253_tree = (Object)adaptor.create(char_literal253);
            adaptor.addChild(root_0, char_literal253_tree);
            }
            pushFollow(FOLLOW_typeList_in_nonWildcardTypeArguments9890);
            list=typeList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, list.getTree());
            if ( state.backtracking==0 ) {
              retval.element = new ArrayList<TypeArgument>();for(TypeReference tref:list.element){retval.element.add(java().createEqualityTypeArgument(tref));}
            }
            char_literal254=(Token)match(input,64,FOLLOW_64_in_nonWildcardTypeArguments9893); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal254_tree = (Object)adaptor.create(char_literal254);
            adaptor.addChild(root_0, char_literal254_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 143, nonWildcardTypeArguments_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nonWildcardTypeArguments"

    public static class superSuffix_return extends ParserRuleReturnScope {
        public TargetedExpression element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "superSuffix"
    // JavaP.g:1996:1: superSuffix returns [TargetedExpression element] : '.' name= identifierRule (args= arguments )? ;
    public final Java_JavaP.superSuffix_return superSuffix() throws RecognitionException {
        Java_JavaP.superSuffix_return retval = new Java_JavaP.superSuffix_return();
        retval.start = input.LT(1);
        int superSuffix_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal255=null;
        Java_JavaP.identifierRule_return name = null;

        Java_JavaP.arguments_return args = null;


        Object char_literal255_tree=null;


           Token start=null;
           Token stop=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 144) ) { return retval; }
            // JavaP.g:2004:5: ( '.' name= identifierRule (args= arguments )? )
            // JavaP.g:2006:5: '.' name= identifierRule (args= arguments )?
            {
            root_0 = (Object)adaptor.nil();

            char_literal255=(Token)match(input,51,FOLLOW_51_in_superSuffix9939); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal255_tree = (Object)adaptor.create(char_literal255);
            adaptor.addChild(root_0, char_literal255_tree);
            }
            pushFollow(FOLLOW_identifierRule_in_superSuffix9943);
            name=identifierRule();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, name.getTree());
            if ( state.backtracking==0 ) {
              retval.element = expressionFactory().createNameExpression((name!=null?input.toString(name.start,name.stop):null));
                                       start = name.start;
                                       stop = name.start;
            }
            // JavaP.g:2009:9: (args= arguments )?
            int alt176=2;
            int LA176_0 = input.LA(1);

            if ( (LA176_0==90) ) {
                alt176=1;
            }
            switch (alt176) {
                case 1 :
                    // JavaP.g:2009:10: args= arguments
                    {
                    pushFollow(FOLLOW_arguments_in_superSuffix9958);
                    args=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, args.getTree());
                    if ( state.backtracking==0 ) {
                      retval.element = invocation((name!=null?input.toString(name.start,name.stop):null),null);
                                ((MethodInvocation)retval.element).addAllArguments(args.element);
                                stop = args.stop;
                                
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {
              setLocation(retval.element,start,stop);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                check_null(retval.element);

            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 144, superSuffix_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "superSuffix"

    public static class arguments_return extends ParserRuleReturnScope {
        public List<Expression> element;
        Object tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arguments"
    // JavaP.g:2018:1: arguments returns [List<Expression> element] : '(' (list= expressionList )? ')' ;
    public final Java_JavaP.arguments_return arguments() throws RecognitionException {
        Java_JavaP.arguments_return retval = new Java_JavaP.arguments_return();
        retval.start = input.LT(1);
        int arguments_StartIndex = input.index();
        Object root_0 = null;

        Token char_literal256=null;
        Token char_literal257=null;
        Java_JavaP.expressionList_return list = null;


        Object char_literal256_tree=null;
        Object char_literal257_tree=null;

        retval.element = new ArrayList<Expression>();
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 145) ) { return retval; }
            // JavaP.g:2020:5: ( '(' (list= expressionList )? ')' )
            // JavaP.g:2020:9: '(' (list= expressionList )? ')'
            {
            root_0 = (Object)adaptor.nil();

            char_literal256=(Token)match(input,90,FOLLOW_90_in_arguments10018); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal256_tree = (Object)adaptor.create(char_literal256);
            adaptor.addChild(root_0, char_literal256_tree);
            }
            // JavaP.g:2020:13: (list= expressionList )?
            int alt177=2;
            int LA177_0 = input.LA(1);

            if ( (LA177_0==IntegerLiteral||LA177_0==FloatingPointLiteral||(LA177_0>=CharacterLiteral && LA177_0<=StringLiteral)||LA177_0==Identifier||LA177_0==69||(LA177_0>=80 && LA177_0<=87)||(LA177_0>=89 && LA177_0<=90)||(LA177_0>=93 && LA177_0<=96)||(LA177_0>=127 && LA177_0<=128)||(LA177_0>=131 && LA177_0<=135)) ) {
                alt177=1;
            }
            switch (alt177) {
                case 1 :
                    // JavaP.g:2020:14: list= expressionList
                    {
                    pushFollow(FOLLOW_expressionList_in_arguments10023);
                    list=expressionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, list.getTree());
                    if ( state.backtracking==0 ) {
                       for(Expression ex: list.element) {retval.element.add(ex);}
                    }

                    }
                    break;

            }

            char_literal257=(Token)match(input,91,FOLLOW_91_in_arguments10030); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            char_literal257_tree = (Object)adaptor.create(char_literal257);
            adaptor.addChild(root_0, char_literal257_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (Object)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
    	retval.tree = (Object)adaptor.errorNode(input, retval.start, input.LT(-1), re);

        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 145, arguments_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "arguments"

    // $ANTLR start synpred5_JavaP
    public final void synpred5_JavaP_fragment() throws RecognitionException {   
        Java_JavaP.packageDeclaration_return np = null;

        Java_JavaP.importDeclaration_return imp = null;

        Java_JavaP.typeDeclaration_return typech = null;

        Java_JavaP.classOrInterfaceDeclaration_return cd = null;


        // JavaP.g:381:10: ( annotations (np= packageDeclaration (imp= importDeclaration )* (typech= typeDeclaration )* | cd= classOrInterfaceDeclaration (typech= typeDeclaration )* ) )
        // JavaP.g:381:10: annotations (np= packageDeclaration (imp= importDeclaration )* (typech= typeDeclaration )* | cd= classOrInterfaceDeclaration (typech= typeDeclaration )* )
        {
        pushFollow(FOLLOW_annotations_in_synpred5_JavaP126);
        annotations();

        state._fsp--;
        if (state.failed) return ;
        // JavaP.g:382:9: (np= packageDeclaration (imp= importDeclaration )* (typech= typeDeclaration )* | cd= classOrInterfaceDeclaration (typech= typeDeclaration )* )
        int alt183=2;
        int LA183_0 = input.LA(1);

        if ( (LA183_0==47) ) {
            alt183=1;
        }
        else if ( (LA183_0==ENUM||LA183_0==50||(LA183_0>=53 && LA183_0<=59)||LA183_0==68||LA183_0==97) ) {
            alt183=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 183, 0, input);

            throw nvae;
        }
        switch (alt183) {
            case 1 :
                // JavaP.g:382:13: np= packageDeclaration (imp= importDeclaration )* (typech= typeDeclaration )*
                {
                pushFollow(FOLLOW_packageDeclaration_in_synpred5_JavaP142);
                np=packageDeclaration();

                state._fsp--;
                if (state.failed) return ;
                // JavaP.g:386:13: (imp= importDeclaration )*
                loop180:
                do {
                    int alt180=2;
                    int LA180_0 = input.LA(1);

                    if ( (LA180_0==49) ) {
                        alt180=1;
                    }


                    switch (alt180) {
                	case 1 :
                	    // JavaP.g:386:14: imp= importDeclaration
                	    {
                	    pushFollow(FOLLOW_importDeclaration_in_synpred5_JavaP177);
                	    imp=importDeclaration();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    break loop180;
                    }
                } while (true);

                // JavaP.g:387:13: (typech= typeDeclaration )*
                loop181:
                do {
                    int alt181=2;
                    int LA181_0 = input.LA(1);

                    if ( (LA181_0==ENUM||LA181_0==48||LA181_0==50||(LA181_0>=53 && LA181_0<=59)||LA181_0==68||LA181_0==97) ) {
                        alt181=1;
                    }


                    switch (alt181) {
                	case 1 :
                	    // JavaP.g:387:14: typech= typeDeclaration
                	    {
                	    pushFollow(FOLLOW_typeDeclaration_in_synpred5_JavaP197);
                	    typech=typeDeclaration();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    break loop181;
                    }
                } while (true);


                }
                break;
            case 2 :
                // JavaP.g:391:13: cd= classOrInterfaceDeclaration (typech= typeDeclaration )*
                {
                pushFollow(FOLLOW_classOrInterfaceDeclaration_in_synpred5_JavaP246);
                cd=classOrInterfaceDeclaration();

                state._fsp--;
                if (state.failed) return ;
                // JavaP.g:396:13: (typech= typeDeclaration )*
                loop182:
                do {
                    int alt182=2;
                    int LA182_0 = input.LA(1);

                    if ( (LA182_0==ENUM||LA182_0==48||LA182_0==50||(LA182_0>=53 && LA182_0<=59)||LA182_0==68||LA182_0==97) ) {
                        alt182=1;
                    }


                    switch (alt182) {
                	case 1 :
                	    // JavaP.g:396:14: typech= typeDeclaration
                	    {
                	    pushFollow(FOLLOW_typeDeclaration_in_synpred5_JavaP280);
                	    typech=typeDeclaration();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }
                	    break;

                	default :
                	    break loop182;
                    }
                } while (true);


                }
                break;

        }


        }
    }
    // $ANTLR end synpred5_JavaP

    // $ANTLR start synpred52_JavaP
    public final void synpred52_JavaP_fragment() throws RecognitionException {   
        Java_JavaP.methodDeclaration_return method = null;


        // JavaP.g:711:9: (method= methodDeclaration )
        // JavaP.g:711:9: method= methodDeclaration
        {
        pushFollow(FOLLOW_methodDeclaration_in_synpred52_JavaP2285);
        method=methodDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred52_JavaP

    // $ANTLR start synpred60_JavaP
    public final void synpred60_JavaP_fragment() throws RecognitionException {   
        Java_JavaP.interfaceConstant_return cst = null;


        // JavaP.g:771:9: (cst= interfaceConstant )
        // JavaP.g:771:9: cst= interfaceConstant
        {
        pushFollow(FOLLOW_interfaceConstant_in_synpred60_JavaP2695);
        cst=interfaceConstant();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred60_JavaP

    // $ANTLR start synpred92_JavaP
    public final void synpred92_JavaP_fragment() throws RecognitionException {   
        Java_JavaP.classOrInterfaceType_return nttt = null;


        // JavaP.g:1002:14: ( '&' nttt= classOrInterfaceType )
        // JavaP.g:1002:14: '&' nttt= classOrInterfaceType
        {
        match(input,65,FOLLOW_65_in_synpred92_JavaP3943); if (state.failed) return ;
        pushFollow(FOLLOW_classOrInterfaceType_in_synpred92_JavaP3947);
        nttt=classOrInterfaceType();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred92_JavaP

    // $ANTLR start synpred108_JavaP
    public final void synpred108_JavaP_fragment() throws RecognitionException {   
        Java_JavaP.variableModifiers_return mods = null;

        Java_JavaP.type_return t = null;

        Java_JavaP.variableDeclaratorId_return id = null;

        Java_JavaP.formalParameterDecls_return decls = null;


        // JavaP.g:1074:9: (mods= variableModifiers t= type id= variableDeclaratorId ( ',' decls= formalParameterDecls )? )
        // JavaP.g:1074:9: mods= variableModifiers t= type id= variableDeclaratorId ( ',' decls= formalParameterDecls )?
        {
        pushFollow(FOLLOW_variableModifiers_in_synpred108_JavaP4414);
        mods=variableModifiers();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_type_in_synpred108_JavaP4418);
        t=type();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_variableDeclaratorId_in_synpred108_JavaP4422);
        id=variableDeclaratorId();

        state._fsp--;
        if (state.failed) return ;
        // JavaP.g:1075:9: ( ',' decls= formalParameterDecls )?
        int alt190=2;
        int LA190_0 = input.LA(1);

        if ( (LA190_0==63) ) {
            alt190=1;
        }
        switch (alt190) {
            case 1 :
                // JavaP.g:1075:10: ',' decls= formalParameterDecls
                {
                match(input,63,FOLLOW_63_in_synpred108_JavaP4433); if (state.failed) return ;
                pushFollow(FOLLOW_formalParameterDecls_in_synpred108_JavaP4437);
                decls=formalParameterDecls();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred108_JavaP

    // $ANTLR start synpred109_JavaP
    public final void synpred109_JavaP_fragment() throws RecognitionException {   
        Java_JavaP.explicitConstructorInvocation_return inv = null;


        // JavaP.g:1099:11: (inv= explicitConstructorInvocation )
        // JavaP.g:1099:11: inv= explicitConstructorInvocation
        {
        pushFollow(FOLLOW_explicitConstructorInvocation_in_synpred109_JavaP4550);
        inv=explicitConstructorInvocation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred109_JavaP

    // $ANTLR start synpred112_JavaP
    public final void synpred112_JavaP_fragment() throws RecognitionException {   
        Java_JavaP.arguments_return args = null;


        // JavaP.g:1105:9: ( ( nonWildcardTypeArguments )? 'this' args= arguments ';' )
        // JavaP.g:1105:9: ( nonWildcardTypeArguments )? 'this' args= arguments ';'
        {
        // JavaP.g:1105:9: ( nonWildcardTypeArguments )?
        int alt191=2;
        int LA191_0 = input.LA(1);

        if ( (LA191_0==62) ) {
            alt191=1;
        }
        switch (alt191) {
            case 1 :
                // JavaP.g:0:0: nonWildcardTypeArguments
                {
                pushFollow(FOLLOW_nonWildcardTypeArguments_in_synpred112_JavaP4601);
                nonWildcardTypeArguments();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        match(input,93,FOLLOW_93_in_synpred112_JavaP4604); if (state.failed) return ;
        pushFollow(FOLLOW_arguments_in_synpred112_JavaP4608);
        args=arguments();

        state._fsp--;
        if (state.failed) return ;
        match(input,48,FOLLOW_48_in_synpred112_JavaP4610); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred112_JavaP

    // $ANTLR start synpred122_JavaP
    public final void synpred122_JavaP_fragment() throws RecognitionException {   
        Java_JavaP.annotation_return a = null;


        // JavaP.g:1166:10: (a= annotation )
        // JavaP.g:1166:10: a= annotation
        {
        pushFollow(FOLLOW_annotation_in_synpred122_JavaP4894);
        a=annotation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred122_JavaP

    // $ANTLR start synpred145_JavaP
    public final void synpred145_JavaP_fragment() throws RecognitionException {   
        Java_JavaP.localVariableDeclarationStatement_return local = null;


        // JavaP.g:1263:9: (local= localVariableDeclarationStatement )
        // JavaP.g:1263:9: local= localVariableDeclarationStatement
        {
        pushFollow(FOLLOW_localVariableDeclarationStatement_in_synpred145_JavaP5552);
        local=localVariableDeclarationStatement();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred145_JavaP

    // $ANTLR start synpred146_JavaP
    public final void synpred146_JavaP_fragment() throws RecognitionException {   
        Java_JavaP.classOrInterfaceDeclaration_return cd = null;


        // JavaP.g:1264:9: (cd= classOrInterfaceDeclaration )
        // JavaP.g:1264:9: cd= classOrInterfaceDeclaration
        {
        pushFollow(FOLLOW_classOrInterfaceDeclaration_in_synpred146_JavaP5566);
        cd=classOrInterfaceDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred146_JavaP

    // $ANTLR start synpred151_JavaP
    public final void synpred151_JavaP_fragment() throws RecognitionException {   
        Token elsekey=null;
        Java_JavaP.statement_return ifelse = null;


        // JavaP.g:1287:72: (elsekey= 'else' ifelse= statement )
        // JavaP.g:1287:72: elsekey= 'else' ifelse= statement
        {
        elsekey=(Token)match(input,100,FOLLOW_100_in_synpred151_JavaP5782); if (state.failed) return ;
        pushFollow(FOLLOW_statement_in_synpred151_JavaP5786);
        ifelse=statement();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred151_JavaP

    // $ANTLR start synpred157_JavaP
    public final void synpred157_JavaP_fragment() throws RecognitionException {   
        Token finkey=null;
        Java_JavaP.catches_return cts = null;

        Java_JavaP.block_return trybl = null;


        // JavaP.g:1310:11: (cts= catches finkey= 'finally' trybl= block )
        // JavaP.g:1310:11: cts= catches finkey= 'finally' trybl= block
        {
        pushFollow(FOLLOW_catches_in_synpred157_JavaP5944);
        cts=catches();

        state._fsp--;
        if (state.failed) return ;
        finkey=(Token)match(input,105,FOLLOW_105_in_synpred157_JavaP5948); if (state.failed) return ;
        pushFollow(FOLLOW_block_in_synpred157_JavaP5952);
        trybl=block();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred157_JavaP

    // $ANTLR start synpred158_JavaP
    public final void synpred158_JavaP_fragment() throws RecognitionException {   
        Java_JavaP.catches_return ctss = null;


        // JavaP.g:1315:11: (ctss= catches )
        // JavaP.g:1315:11: ctss= catches
        {
        pushFollow(FOLLOW_catches_in_synpred158_JavaP5979);
        ctss=catches();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred158_JavaP

    // $ANTLR start synpred177_JavaP
    public final void synpred177_JavaP_fragment() throws RecognitionException {   
        Java_JavaP.constantExpression_return csexpr = null;


        // JavaP.g:1404:9: ( 'case' csexpr= constantExpression ':' )
        // JavaP.g:1404:9: 'case' csexpr= constantExpression ':'
        {
        match(input,112,FOLLOW_112_in_synpred177_JavaP6688); if (state.failed) return ;
        pushFollow(FOLLOW_constantExpression_in_synpred177_JavaP6692);
        csexpr=constantExpression();

        state._fsp--;
        if (state.failed) return ;
        match(input,98,FOLLOW_98_in_synpred177_JavaP6694); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred177_JavaP

    // $ANTLR start synpred178_JavaP
    public final void synpred178_JavaP_fragment() throws RecognitionException {   
        Java_JavaP.enumConstantName_return enumname = null;


        // JavaP.g:1405:9: ( 'case' enumname= enumConstantName ':' )
        // JavaP.g:1405:9: 'case' enumname= enumConstantName ':'
        {
        match(input,112,FOLLOW_112_in_synpred178_JavaP6706); if (state.failed) return ;
        pushFollow(FOLLOW_enumConstantName_in_synpred178_JavaP6710);
        enumname=enumConstantName();

        state._fsp--;
        if (state.failed) return ;
        match(input,98,FOLLOW_98_in_synpred178_JavaP6712); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred178_JavaP

    // $ANTLR start synpred179_JavaP
    public final void synpred179_JavaP_fragment() throws RecognitionException {   
        Java_JavaP.enhancedForControl_return enh = null;


        // JavaP.g:1412:9: (enh= enhancedForControl )
        // JavaP.g:1412:9: enh= enhancedForControl
        {
        pushFollow(FOLLOW_enhancedForControl_in_synpred179_JavaP6764);
        enh=enhancedForControl();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred179_JavaP

    // $ANTLR start synpred183_JavaP
    public final void synpred183_JavaP_fragment() throws RecognitionException {   
        Java_JavaP.localVariableDeclaration_return local = null;


        // JavaP.g:1418:9: (local= localVariableDeclaration )
        // JavaP.g:1418:9: local= localVariableDeclaration
        {
        pushFollow(FOLLOW_localVariableDeclaration_in_synpred183_JavaP6824);
        local=localVariableDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred183_JavaP

    // $ANTLR start synpred185_JavaP
    public final void synpred185_JavaP_fragment() throws RecognitionException {   
        Java_JavaP.assignmentOperator_return op = null;

        Java_JavaP.expression_return exx = null;


        // JavaP.g:1465:64: (op= assignmentOperator exx= expression )
        // JavaP.g:1465:64: op= assignmentOperator exx= expression
        {
        pushFollow(FOLLOW_assignmentOperator_in_synpred185_JavaP7106);
        op=assignmentOperator();

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred185_JavaP7110);
        exx=expression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred185_JavaP

    // $ANTLR start synpred195_JavaP
    public final void synpred195_JavaP_fragment() throws RecognitionException {   
        // JavaP.g:1489:9: ( '<' '<' '=' )
        // JavaP.g:1489:10: '<' '<' '='
        {
        match(input,62,FOLLOW_62_in_synpred195_JavaP7241); if (state.failed) return ;
        match(input,62,FOLLOW_62_in_synpred195_JavaP7243); if (state.failed) return ;
        match(input,73,FOLLOW_73_in_synpred195_JavaP7245); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred195_JavaP

    // $ANTLR start synpred196_JavaP
    public final void synpred196_JavaP_fragment() throws RecognitionException {   
        // JavaP.g:1494:9: ( '>' '>' '>' '=' )
        // JavaP.g:1494:10: '>' '>' '>' '='
        {
        match(input,64,FOLLOW_64_in_synpred196_JavaP7280); if (state.failed) return ;
        match(input,64,FOLLOW_64_in_synpred196_JavaP7282); if (state.failed) return ;
        match(input,64,FOLLOW_64_in_synpred196_JavaP7284); if (state.failed) return ;
        match(input,73,FOLLOW_73_in_synpred196_JavaP7286); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred196_JavaP

    // $ANTLR start synpred197_JavaP
    public final void synpred197_JavaP_fragment() throws RecognitionException {   
        // JavaP.g:1501:9: ( '>' '>' '=' )
        // JavaP.g:1501:10: '>' '>' '='
        {
        match(input,64,FOLLOW_64_in_synpred197_JavaP7325); if (state.failed) return ;
        match(input,64,FOLLOW_64_in_synpred197_JavaP7327); if (state.failed) return ;
        match(input,73,FOLLOW_73_in_synpred197_JavaP7329); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred197_JavaP

    // $ANTLR start synpred208_JavaP
    public final void synpred208_JavaP_fragment() throws RecognitionException {   
        // JavaP.g:1609:9: ( '<' '=' )
        // JavaP.g:1609:10: '<' '='
        {
        match(input,62,FOLLOW_62_in_synpred208_JavaP7871); if (state.failed) return ;
        match(input,73,FOLLOW_73_in_synpred208_JavaP7873); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred208_JavaP

    // $ANTLR start synpred209_JavaP
    public final void synpred209_JavaP_fragment() throws RecognitionException {   
        // JavaP.g:1612:9: ( '>' '=' )
        // JavaP.g:1612:10: '>' '='
        {
        match(input,64,FOLLOW_64_in_synpred209_JavaP7904); if (state.failed) return ;
        match(input,73,FOLLOW_73_in_synpred209_JavaP7906); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred209_JavaP

    // $ANTLR start synpred212_JavaP
    public final void synpred212_JavaP_fragment() throws RecognitionException {   
        // JavaP.g:1630:9: ( '<' '<' )
        // JavaP.g:1630:10: '<' '<'
        {
        match(input,62,FOLLOW_62_in_synpred212_JavaP8016); if (state.failed) return ;
        match(input,62,FOLLOW_62_in_synpred212_JavaP8018); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred212_JavaP

    // $ANTLR start synpred213_JavaP
    public final void synpred213_JavaP_fragment() throws RecognitionException {   
        // JavaP.g:1633:9: ( '>' '>' '>' )
        // JavaP.g:1633:10: '>' '>' '>'
        {
        match(input,64,FOLLOW_64_in_synpred213_JavaP8049); if (state.failed) return ;
        match(input,64,FOLLOW_64_in_synpred213_JavaP8051); if (state.failed) return ;
        match(input,64,FOLLOW_64_in_synpred213_JavaP8053); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred213_JavaP

    // $ANTLR start synpred214_JavaP
    public final void synpred214_JavaP_fragment() throws RecognitionException {   
        // JavaP.g:1638:9: ( '>' '>' )
        // JavaP.g:1638:10: '>' '>'
        {
        match(input,64,FOLLOW_64_in_synpred214_JavaP8088); if (state.failed) return ;
        match(input,64,FOLLOW_64_in_synpred214_JavaP8090); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred214_JavaP

    // $ANTLR start synpred226_JavaP
    public final void synpred226_JavaP_fragment() throws RecognitionException {   
        Java_JavaP.castExpression_return castex = null;


        // JavaP.g:1696:9: (castex= castExpression )
        // JavaP.g:1696:9: castex= castExpression
        {
        pushFollow(FOLLOW_castExpression_in_synpred226_JavaP8413);
        castex=castExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred226_JavaP

    // $ANTLR start synpred235_JavaP
    public final void synpred235_JavaP_fragment() throws RecognitionException {   
        Java_JavaP.primitiveType_return tref = null;

        Java_JavaP.unaryExpression_return unex = null;


        // JavaP.g:1765:8: ( '(' tref= primitiveType ')' unex= unaryExpression )
        // JavaP.g:1765:8: '(' tref= primitiveType ')' unex= unaryExpression
        {
        match(input,90,FOLLOW_90_in_synpred235_JavaP8740); if (state.failed) return ;
        pushFollow(FOLLOW_primitiveType_in_synpred235_JavaP8744);
        tref=primitiveType();

        state._fsp--;
        if (state.failed) return ;
        match(input,91,FOLLOW_91_in_synpred235_JavaP8746); if (state.failed) return ;
        pushFollow(FOLLOW_unaryExpression_in_synpred235_JavaP8750);
        unex=unaryExpression();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred235_JavaP

    // $ANTLR start synpred241_JavaP
    public final void synpred241_JavaP_fragment() throws RecognitionException {   
        Java_JavaP.moreidentifierRuleSuffixRubbish_return morerubex = null;


        // JavaP.g:1793:9: (morerubex= moreidentifierRuleSuffixRubbish )
        // JavaP.g:1793:9: morerubex= moreidentifierRuleSuffixRubbish
        {
        pushFollow(FOLLOW_moreidentifierRuleSuffixRubbish_in_synpred241_JavaP8910);
        morerubex=moreidentifierRuleSuffixRubbish();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred241_JavaP

    // $ANTLR start synpred243_JavaP
    public final void synpred243_JavaP_fragment() throws RecognitionException {   
        Java_JavaP.identifierRule_return idx = null;


        // JavaP.g:1825:5: ( '.' idx= identifierRule )
        // JavaP.g:1825:5: '.' idx= identifierRule
        {
        match(input,51,FOLLOW_51_in_synpred243_JavaP9034); if (state.failed) return ;
        pushFollow(FOLLOW_identifierRule_in_synpred243_JavaP9038);
        idx=identifierRule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred243_JavaP

    // $ANTLR start synpred245_JavaP
    public final void synpred245_JavaP_fragment() throws RecognitionException {   
        Token czkw=null;

        // JavaP.g:1836:9: ( ( '[' ']' )+ '.' czkw= 'class' )
        // JavaP.g:1836:9: ( '[' ']' )+ '.' czkw= 'class'
        {
        // JavaP.g:1836:9: ( '[' ']' )+
        int cnt205=0;
        loop205:
        do {
            int alt205=2;
            int LA205_0 = input.LA(1);

            if ( (LA205_0==70) ) {
                alt205=1;
            }


            switch (alt205) {
        	case 1 :
        	    // JavaP.g:1836:10: '[' ']'
        	    {
        	    match(input,70,FOLLOW_70_in_synpred245_JavaP9068); if (state.failed) return ;
        	    match(input,71,FOLLOW_71_in_synpred245_JavaP9070); if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt205 >= 1 ) break loop205;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(205, input);
                    throw eee;
            }
            cnt205++;
        } while (true);

        match(input,51,FOLLOW_51_in_synpred245_JavaP9077); if (state.failed) return ;
        czkw=(Token)match(input,59,FOLLOW_59_in_synpred245_JavaP9081); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred245_JavaP

    // $ANTLR start synpred246_JavaP
    public final void synpred246_JavaP_fragment() throws RecognitionException {   
        Java_JavaP.arrayAccessSuffixRubbish_return arr = null;


        // JavaP.g:1842:9: (arr= arrayAccessSuffixRubbish )
        // JavaP.g:1842:9: arr= arrayAccessSuffixRubbish
        {
        pushFollow(FOLLOW_arrayAccessSuffixRubbish_in_synpred246_JavaP9101);
        arr=arrayAccessSuffixRubbish();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred246_JavaP

    // $ANTLR start synpred248_JavaP
    public final void synpred248_JavaP_fragment() throws RecognitionException {   
        Token clkw=null;

        // JavaP.g:1846:9: ( '.' clkw= 'class' )
        // JavaP.g:1846:9: '.' clkw= 'class'
        {
        match(input,51,FOLLOW_51_in_synpred248_JavaP9128); if (state.failed) return ;
        clkw=(Token)match(input,59,FOLLOW_59_in_synpred248_JavaP9132); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred248_JavaP

    // $ANTLR start synpred249_JavaP
    public final void synpred249_JavaP_fragment() throws RecognitionException {   
        Java_JavaP.explicitGenericInvocation_return gen = null;


        // JavaP.g:1851:9: ( '.' gen= explicitGenericInvocation )
        // JavaP.g:1851:9: '.' gen= explicitGenericInvocation
        {
        match(input,51,FOLLOW_51_in_synpred249_JavaP9153); if (state.failed) return ;
        pushFollow(FOLLOW_explicitGenericInvocation_in_synpred249_JavaP9157);
        gen=explicitGenericInvocation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred249_JavaP

    // $ANTLR start synpred250_JavaP
    public final void synpred250_JavaP_fragment() throws RecognitionException {   
        Token thiskw=null;

        // JavaP.g:1852:9: ( '.' thiskw= 'this' )
        // JavaP.g:1852:9: '.' thiskw= 'this'
        {
        match(input,51,FOLLOW_51_in_synpred250_JavaP9170); if (state.failed) return ;
        thiskw=(Token)match(input,93,FOLLOW_93_in_synpred250_JavaP9174); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred250_JavaP

    // $ANTLR start synpred251_JavaP
    public final void synpred251_JavaP_fragment() throws RecognitionException {   
        Token supkw=null;
        Java_JavaP.superSuffix_return supsuf = null;


        // JavaP.g:1858:9: ( '.' supkw= 'super' supsuf= superSuffix )
        // JavaP.g:1858:9: '.' supkw= 'super' supsuf= superSuffix
        {
        match(input,51,FOLLOW_51_in_synpred251_JavaP9194); if (state.failed) return ;
        supkw=(Token)match(input,89,FOLLOW_89_in_synpred251_JavaP9198); if (state.failed) return ;
        pushFollow(FOLLOW_superSuffix_in_synpred251_JavaP9214);
        supsuf=superSuffix();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred251_JavaP

    // $ANTLR start synpred252_JavaP
    public final void synpred252_JavaP_fragment() throws RecognitionException {   
        Token newkw=null;
        Java_JavaP.innerCreator_return in = null;


        // JavaP.g:1867:9: ( '.' newkw= 'new' in= innerCreator )
        // JavaP.g:1867:9: '.' newkw= 'new' in= innerCreator
        {
        match(input,51,FOLLOW_51_in_synpred252_JavaP9226); if (state.failed) return ;
        newkw=(Token)match(input,135,FOLLOW_135_in_synpred252_JavaP9230); if (state.failed) return ;
        pushFollow(FOLLOW_innerCreator_in_synpred252_JavaP9234);
        in=innerCreator();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred252_JavaP

    // $ANTLR start synpred253_JavaP
    public final void synpred253_JavaP_fragment() throws RecognitionException {   
        Java_JavaP.identifierRule_return id = null;


        // JavaP.g:1872:55: ( '.' id= identifierRule )
        // JavaP.g:1872:55: '.' id= identifierRule
        {
        match(input,51,FOLLOW_51_in_synpred253_JavaP9262); if (state.failed) return ;
        pushFollow(FOLLOW_identifierRule_in_synpred253_JavaP9266);
        id=identifierRule();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred253_JavaP

    // $ANTLR start synpred254_JavaP
    public final void synpred254_JavaP_fragment() throws RecognitionException {   
        Java_JavaP.arrayAccessSuffixRubbish_return arr = null;


        // JavaP.g:1879:9: (arr= arrayAccessSuffixRubbish )
        // JavaP.g:1879:9: arr= arrayAccessSuffixRubbish
        {
        pushFollow(FOLLOW_arrayAccessSuffixRubbish_in_synpred254_JavaP9290);
        arr=arrayAccessSuffixRubbish();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred254_JavaP

    // $ANTLR start synpred256_JavaP
    public final void synpred256_JavaP_fragment() throws RecognitionException {   
        // JavaP.g:1881:9: ( '.' 'class' )
        // JavaP.g:1881:9: '.' 'class'
        {
        match(input,51,FOLLOW_51_in_synpred256_JavaP9316); if (state.failed) return ;
        match(input,59,FOLLOW_59_in_synpred256_JavaP9318); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred256_JavaP

    // $ANTLR start synpred257_JavaP
    public final void synpred257_JavaP_fragment() throws RecognitionException {   
        Java_JavaP.explicitGenericInvocation_return gen = null;


        // JavaP.g:1882:9: ( '.' gen= explicitGenericInvocation )
        // JavaP.g:1882:9: '.' gen= explicitGenericInvocation
        {
        match(input,51,FOLLOW_51_in_synpred257_JavaP9330); if (state.failed) return ;
        pushFollow(FOLLOW_explicitGenericInvocation_in_synpred257_JavaP9334);
        gen=explicitGenericInvocation();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred257_JavaP

    // $ANTLR start synpred258_JavaP
    public final void synpred258_JavaP_fragment() throws RecognitionException {   
        Token supkw=null;
        Java_JavaP.superSuffix_return supsuf = null;


        // JavaP.g:1883:9: ( '.' supkw= 'super' supsuf= superSuffix )
        // JavaP.g:1883:9: '.' supkw= 'super' supsuf= superSuffix
        {
        match(input,51,FOLLOW_51_in_synpred258_JavaP9346); if (state.failed) return ;
        supkw=(Token)match(input,89,FOLLOW_89_in_synpred258_JavaP9350); if (state.failed) return ;
        pushFollow(FOLLOW_superSuffix_in_synpred258_JavaP9354);
        supsuf=superSuffix();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred258_JavaP

    // $ANTLR start synpred259_JavaP
    public final void synpred259_JavaP_fragment() throws RecognitionException {   
        Token newkw=null;
        Java_JavaP.innerCreator_return in = null;


        // JavaP.g:1890:9: ( '.' newkw= 'new' in= innerCreator )
        // JavaP.g:1890:9: '.' newkw= 'new' in= innerCreator
        {
        match(input,51,FOLLOW_51_in_synpred259_JavaP9366); if (state.failed) return ;
        newkw=(Token)match(input,135,FOLLOW_135_in_synpred259_JavaP9370); if (state.failed) return ;
        pushFollow(FOLLOW_innerCreator_in_synpred259_JavaP9374);
        in=innerCreator();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred259_JavaP

    // $ANTLR start synpred260_JavaP
    public final void synpred260_JavaP_fragment() throws RecognitionException {   
        Token open=null;
        Token close=null;
        Java_JavaP.expression_return arrex = null;


        // JavaP.g:1921:11: (open= '[' arrex= expression close= ']' )
        // JavaP.g:1921:11: open= '[' arrex= expression close= ']'
        {
        open=(Token)match(input,70,FOLLOW_70_in_synpred260_JavaP9447); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred260_JavaP9451);
        arrex=expression();

        state._fsp--;
        if (state.failed) return ;
        close=(Token)match(input,71,FOLLOW_71_in_synpred260_JavaP9455); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred260_JavaP

    // $ANTLR start synpred264_JavaP
    public final void synpred264_JavaP_fragment() throws RecognitionException {   
        Java_JavaP.createdName_return tt = null;

        Java_JavaP.arrayInitializer_return init = null;


        // JavaP.g:1941:10: (tt= createdName ( '[' ']' )+ init= arrayInitializer )
        // JavaP.g:1941:10: tt= createdName ( '[' ']' )+ init= arrayInitializer
        {
        pushFollow(FOLLOW_createdName_in_synpred264_JavaP9550);
        tt=createdName();

        state._fsp--;
        if (state.failed) return ;
        // JavaP.g:1942:14: ( '[' ']' )+
        int cnt207=0;
        loop207:
        do {
            int alt207=2;
            int LA207_0 = input.LA(1);

            if ( (LA207_0==70) ) {
                alt207=1;
            }


            switch (alt207) {
        	case 1 :
        	    // JavaP.g:1942:15: '[' ']'
        	    {
        	    match(input,70,FOLLOW_70_in_synpred264_JavaP9568); if (state.failed) return ;
        	    match(input,71,FOLLOW_71_in_synpred264_JavaP9570); if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt207 >= 1 ) break loop207;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(207, input);
                    throw eee;
            }
            cnt207++;
        } while (true);

        pushFollow(FOLLOW_arrayInitializer_in_synpred264_JavaP9578);
        init=arrayInitializer();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred264_JavaP

    // $ANTLR start synpred265_JavaP
    public final void synpred265_JavaP_fragment() throws RecognitionException {   
        Java_JavaP.expression_return exx = null;


        // JavaP.g:1945:12: ( '[' exx= expression ']' )
        // JavaP.g:1945:12: '[' exx= expression ']'
        {
        match(input,70,FOLLOW_70_in_synpred265_JavaP9617); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred265_JavaP9621);
        exx=expression();

        state._fsp--;
        if (state.failed) return ;
        match(input,71,FOLLOW_71_in_synpred265_JavaP9623); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred265_JavaP

    // $ANTLR start synpred267_JavaP
    public final void synpred267_JavaP_fragment() throws RecognitionException {   
        Java_JavaP.createdName_return ttt = null;

        Java_JavaP.expression_return exx = null;


        // JavaP.g:1944:10: (ttt= createdName ( '[' exx= expression ']' )+ ( '[' ']' )* )
        // JavaP.g:1944:10: ttt= createdName ( '[' exx= expression ']' )+ ( '[' ']' )*
        {
        pushFollow(FOLLOW_createdName_in_synpred267_JavaP9601);
        ttt=createdName();

        state._fsp--;
        if (state.failed) return ;
        // JavaP.g:1945:11: ( '[' exx= expression ']' )+
        int cnt208=0;
        loop208:
        do {
            int alt208=2;
            int LA208_0 = input.LA(1);

            if ( (LA208_0==70) ) {
                int LA208_1 = input.LA(2);

                if ( (LA208_1==IntegerLiteral||LA208_1==FloatingPointLiteral||(LA208_1>=CharacterLiteral && LA208_1<=StringLiteral)||LA208_1==Identifier||LA208_1==69||(LA208_1>=80 && LA208_1<=87)||(LA208_1>=89 && LA208_1<=90)||(LA208_1>=93 && LA208_1<=96)||(LA208_1>=127 && LA208_1<=128)||(LA208_1>=131 && LA208_1<=135)) ) {
                    alt208=1;
                }


            }


            switch (alt208) {
        	case 1 :
        	    // JavaP.g:1945:12: '[' exx= expression ']'
        	    {
        	    match(input,70,FOLLOW_70_in_synpred267_JavaP9617); if (state.failed) return ;
        	    pushFollow(FOLLOW_expression_in_synpred267_JavaP9621);
        	    exx=expression();

        	    state._fsp--;
        	    if (state.failed) return ;
        	    match(input,71,FOLLOW_71_in_synpred267_JavaP9623); if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    if ( cnt208 >= 1 ) break loop208;
        	    if (state.backtracking>0) {state.failed=true; return ;}
                    EarlyExitException eee =
                        new EarlyExitException(208, input);
                    throw eee;
            }
            cnt208++;
        } while (true);

        // JavaP.g:1946:13: ( '[' ']' )*
        loop209:
        do {
            int alt209=2;
            int LA209_0 = input.LA(1);

            if ( (LA209_0==70) ) {
                alt209=1;
            }


            switch (alt209) {
        	case 1 :
        	    // JavaP.g:1946:14: '[' ']'
        	    {
        	    match(input,70,FOLLOW_70_in_synpred267_JavaP9642); if (state.failed) return ;
        	    match(input,71,FOLLOW_71_in_synpred267_JavaP9644); if (state.failed) return ;

        	    }
        	    break;

        	default :
        	    break loop209;
            }
        } while (true);


        }
    }
    // $ANTLR end synpred267_JavaP

    // Delegated rules

    public final boolean synpred243_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred243_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred183_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred183_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred145_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred145_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred158_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred158_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred213_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred213_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred248_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred248_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred60_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred60_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred258_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred258_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred178_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred178_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred253_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred253_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred246_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred246_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred108_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred108_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred256_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred256_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred109_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred109_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred151_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred151_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred251_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred251_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred209_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred209_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred226_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred226_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred146_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred146_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred196_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred196_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred241_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred241_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred214_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred214_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred249_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred249_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred259_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred259_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred179_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred179_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred197_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred197_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred252_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred252_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred254_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred254_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred264_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred264_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred257_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred257_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred267_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred267_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred185_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred185_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred112_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred112_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred208_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred208_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred265_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred265_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred157_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred157_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred212_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred212_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred260_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred260_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred195_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred195_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred250_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred250_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred177_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred177_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred235_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred235_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred245_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred245_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred52_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred52_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred122_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred122_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred92_JavaP() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred92_JavaP_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA8 dfa8 = new DFA8(this);
    protected DFA41 dfa41 = new DFA41(this);
    protected DFA46 dfa46 = new DFA46(this);
    protected DFA84 dfa84 = new DFA84(this);
    protected DFA85 dfa85 = new DFA85(this);
    protected DFA90 dfa90 = new DFA90(this);
    protected DFA112 dfa112 = new DFA112(this);
    protected DFA121 dfa121 = new DFA121(this);
    protected DFA117 dfa117 = new DFA117(this);
    protected DFA131 dfa131 = new DFA131(this);
    protected DFA132 dfa132 = new DFA132(this);
    protected DFA134 dfa134 = new DFA134(this);
    protected DFA135 dfa135 = new DFA135(this);
    protected DFA148 dfa148 = new DFA148(this);
    protected DFA156 dfa156 = new DFA156(this);
    protected DFA160 dfa160 = new DFA160(this);
    protected DFA163 dfa163 = new DFA163(this);
    protected DFA165 dfa165 = new DFA165(this);
    protected DFA166 dfa166 = new DFA166(this);
    protected DFA172 dfa172 = new DFA172(this);
    protected DFA169 dfa169 = new DFA169(this);
    static final String DFA8_eotS =
        "\21\uffff";
    static final String DFA8_eofS =
        "\1\2\20\uffff";
    static final String DFA8_minS =
        "\1\47\1\0\17\uffff";
    static final String DFA8_maxS =
        "\1\141\1\0\17\uffff";
    static final String DFA8_acceptS =
        "\2\uffff\1\2\15\uffff\1\1";
    static final String DFA8_specialS =
        "\1\uffff\1\0\17\uffff}>";
    static final String[] DFA8_transitionS = {
            "\1\2\7\uffff\4\2\2\uffff\7\2\10\uffff\1\2\34\uffff\1\1",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA8_eot = DFA.unpackEncodedString(DFA8_eotS);
    static final short[] DFA8_eof = DFA.unpackEncodedString(DFA8_eofS);
    static final char[] DFA8_min = DFA.unpackEncodedStringToUnsignedChars(DFA8_minS);
    static final char[] DFA8_max = DFA.unpackEncodedStringToUnsignedChars(DFA8_maxS);
    static final short[] DFA8_accept = DFA.unpackEncodedString(DFA8_acceptS);
    static final short[] DFA8_special = DFA.unpackEncodedString(DFA8_specialS);
    static final short[][] DFA8_transition;

    static {
        int numStates = DFA8_transitionS.length;
        DFA8_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA8_transition[i] = DFA.unpackEncodedString(DFA8_transitionS[i]);
        }
    }

    class DFA8 extends DFA {

        public DFA8(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 8;
            this.eot = DFA8_eot;
            this.eof = DFA8_eof;
            this.min = DFA8_min;
            this.max = DFA8_max;
            this.accept = DFA8_accept;
            this.special = DFA8_special;
            this.transition = DFA8_transition;
        }
        public String getDescription() {
            return "376:1: compilationUnit returns [Document element] : ( annotations (np= packageDeclaration (imp= importDeclaration )* (typech= typeDeclaration )* | cd= classOrInterfaceDeclaration (typech= typeDeclaration )* ) | (np= packageDeclaration )? (imp= importDeclaration )* (typech= typeDeclaration )* );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA8_1 = input.LA(1);

                         
                        int index8_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_JavaP()) ) {s = 16;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index8_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 8, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA41_eotS =
        "\14\uffff";
    static final String DFA41_eofS =
        "\14\uffff";
    static final String DFA41_minS =
        "\1\53\11\0\2\uffff";
    static final String DFA41_maxS =
        "\1\127\11\0\2\uffff";
    static final String DFA41_acceptS =
        "\12\uffff\1\1\1\2";
    static final String DFA41_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\uffff}>";
    static final String[] DFA41_transitionS = {
            "\1\1\44\uffff\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA41_eot = DFA.unpackEncodedString(DFA41_eotS);
    static final short[] DFA41_eof = DFA.unpackEncodedString(DFA41_eofS);
    static final char[] DFA41_min = DFA.unpackEncodedStringToUnsignedChars(DFA41_minS);
    static final char[] DFA41_max = DFA.unpackEncodedStringToUnsignedChars(DFA41_maxS);
    static final short[] DFA41_accept = DFA.unpackEncodedString(DFA41_acceptS);
    static final short[] DFA41_special = DFA.unpackEncodedString(DFA41_specialS);
    static final short[][] DFA41_transition;

    static {
        int numStates = DFA41_transitionS.length;
        DFA41_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA41_transition[i] = DFA.unpackEncodedString(DFA41_transitionS[i]);
        }
    }

    class DFA41 extends DFA {

        public DFA41(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 41;
            this.eot = DFA41_eot;
            this.eof = DFA41_eof;
            this.min = DFA41_min;
            this.max = DFA41_max;
            this.accept = DFA41_accept;
            this.special = DFA41_special;
            this.transition = DFA41_transition;
        }
        public String getDescription() {
            return "710:1: memberDeclaration returns [TypeElement element] : (method= methodDeclaration | field= fieldDeclaration );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA41_1 = input.LA(1);

                         
                        int index41_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_JavaP()) ) {s = 10;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index41_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA41_2 = input.LA(1);

                         
                        int index41_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_JavaP()) ) {s = 10;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index41_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA41_3 = input.LA(1);

                         
                        int index41_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_JavaP()) ) {s = 10;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index41_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA41_4 = input.LA(1);

                         
                        int index41_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_JavaP()) ) {s = 10;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index41_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA41_5 = input.LA(1);

                         
                        int index41_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_JavaP()) ) {s = 10;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index41_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA41_6 = input.LA(1);

                         
                        int index41_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_JavaP()) ) {s = 10;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index41_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA41_7 = input.LA(1);

                         
                        int index41_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_JavaP()) ) {s = 10;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index41_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA41_8 = input.LA(1);

                         
                        int index41_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_JavaP()) ) {s = 10;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index41_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA41_9 = input.LA(1);

                         
                        int index41_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred52_JavaP()) ) {s = 10;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index41_9);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 41, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA46_eotS =
        "\14\uffff";
    static final String DFA46_eofS =
        "\14\uffff";
    static final String DFA46_minS =
        "\1\53\11\0\2\uffff";
    static final String DFA46_maxS =
        "\1\127\11\0\2\uffff";
    static final String DFA46_acceptS =
        "\12\uffff\1\1\1\2";
    static final String DFA46_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\uffff}>";
    static final String[] DFA46_transitionS = {
            "\1\1\44\uffff\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA46_eot = DFA.unpackEncodedString(DFA46_eotS);
    static final short[] DFA46_eof = DFA.unpackEncodedString(DFA46_eofS);
    static final char[] DFA46_min = DFA.unpackEncodedStringToUnsignedChars(DFA46_minS);
    static final char[] DFA46_max = DFA.unpackEncodedStringToUnsignedChars(DFA46_maxS);
    static final short[] DFA46_accept = DFA.unpackEncodedString(DFA46_acceptS);
    static final short[] DFA46_special = DFA.unpackEncodedString(DFA46_specialS);
    static final short[][] DFA46_transition;

    static {
        int numStates = DFA46_transitionS.length;
        DFA46_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA46_transition[i] = DFA.unpackEncodedString(DFA46_transitionS[i]);
        }
    }

    class DFA46 extends DFA {

        public DFA46(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 46;
            this.eot = DFA46_eot;
            this.eof = DFA46_eof;
            this.min = DFA46_min;
            this.max = DFA46_max;
            this.accept = DFA46_accept;
            this.special = DFA46_special;
            this.transition = DFA46_transition;
        }
        public String getDescription() {
            return "770:1: interfaceMethodOrFieldDecl returns [TypeElement element] : (cst= interfaceConstant | m= interfaceMethod );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA46_1 = input.LA(1);

                         
                        int index46_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_JavaP()) ) {s = 10;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index46_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA46_2 = input.LA(1);

                         
                        int index46_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_JavaP()) ) {s = 10;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index46_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA46_3 = input.LA(1);

                         
                        int index46_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_JavaP()) ) {s = 10;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index46_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA46_4 = input.LA(1);

                         
                        int index46_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_JavaP()) ) {s = 10;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index46_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA46_5 = input.LA(1);

                         
                        int index46_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_JavaP()) ) {s = 10;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index46_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA46_6 = input.LA(1);

                         
                        int index46_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_JavaP()) ) {s = 10;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index46_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA46_7 = input.LA(1);

                         
                        int index46_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_JavaP()) ) {s = 10;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index46_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA46_8 = input.LA(1);

                         
                        int index46_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_JavaP()) ) {s = 10;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index46_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA46_9 = input.LA(1);

                         
                        int index46_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_JavaP()) ) {s = 10;}

                        else if ( (true) ) {s = 11;}

                         
                        input.seek(index46_9);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 46, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA84_eotS =
        "\16\uffff";
    static final String DFA84_eofS =
        "\16\uffff";
    static final String DFA84_minS =
        "\1\53\13\0\2\uffff";
    static final String DFA84_maxS =
        "\1\141\13\0\2\uffff";
    static final String DFA84_acceptS =
        "\14\uffff\1\1\1\2";
    static final String DFA84_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\2\uffff}>";
    static final String[] DFA84_transitionS = {
            "\1\3\15\uffff\1\1\26\uffff\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1"+
            "\13\11\uffff\1\2",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA84_eot = DFA.unpackEncodedString(DFA84_eotS);
    static final short[] DFA84_eof = DFA.unpackEncodedString(DFA84_eofS);
    static final char[] DFA84_min = DFA.unpackEncodedStringToUnsignedChars(DFA84_minS);
    static final char[] DFA84_max = DFA.unpackEncodedStringToUnsignedChars(DFA84_maxS);
    static final short[] DFA84_accept = DFA.unpackEncodedString(DFA84_acceptS);
    static final short[] DFA84_special = DFA.unpackEncodedString(DFA84_specialS);
    static final short[][] DFA84_transition;

    static {
        int numStates = DFA84_transitionS.length;
        DFA84_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA84_transition[i] = DFA.unpackEncodedString(DFA84_transitionS[i]);
        }
    }

    class DFA84 extends DFA {

        public DFA84(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 84;
            this.eot = DFA84_eot;
            this.eof = DFA84_eof;
            this.min = DFA84_min;
            this.max = DFA84_max;
            this.accept = DFA84_accept;
            this.special = DFA84_special;
            this.transition = DFA84_transition;
        }
        public String getDescription() {
            return "1073:1: formalParameterDecls returns [List<FormalParameter> element] : (mods= variableModifiers t= type id= variableDeclaratorId ( ',' decls= formalParameterDecls )? | modss= variableModifiers tt= type '...' idd= variableDeclaratorId );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA84_1 = input.LA(1);

                         
                        int index84_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_JavaP()) ) {s = 12;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index84_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA84_2 = input.LA(1);

                         
                        int index84_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_JavaP()) ) {s = 12;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index84_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA84_3 = input.LA(1);

                         
                        int index84_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_JavaP()) ) {s = 12;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index84_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA84_4 = input.LA(1);

                         
                        int index84_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_JavaP()) ) {s = 12;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index84_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA84_5 = input.LA(1);

                         
                        int index84_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_JavaP()) ) {s = 12;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index84_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA84_6 = input.LA(1);

                         
                        int index84_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_JavaP()) ) {s = 12;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index84_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA84_7 = input.LA(1);

                         
                        int index84_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_JavaP()) ) {s = 12;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index84_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA84_8 = input.LA(1);

                         
                        int index84_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_JavaP()) ) {s = 12;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index84_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA84_9 = input.LA(1);

                         
                        int index84_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_JavaP()) ) {s = 12;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index84_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA84_10 = input.LA(1);

                         
                        int index84_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_JavaP()) ) {s = 12;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index84_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA84_11 = input.LA(1);

                         
                        int index84_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred108_JavaP()) ) {s = 12;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index84_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 84, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA85_eotS =
        "\67\uffff";
    static final String DFA85_eofS =
        "\67\uffff";
    static final String DFA85_minS =
        "\1\10\1\uffff\25\0\40\uffff";
    static final String DFA85_maxS =
        "\1\u0087\1\uffff\25\0\40\uffff";
    static final String DFA85_acceptS =
        "\1\uffff\1\1\25\uffff\1\2\37\uffff";
    static final String DFA85_specialS =
        "\2\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\40\uffff}>";
    static final String[] DFA85_transitionS = {
            "\1\5\20\uffff\1\6\11\uffff\1\7\1\10\2\uffff\2\27\2\uffff\1\15"+
            "\4\uffff\1\27\1\uffff\1\27\2\uffff\7\27\2\uffff\1\1\3\uffff"+
            "\3\27\1\16\5\uffff\1\27\4\uffff\1\17\1\20\1\21\1\22\1\23\1\24"+
            "\1\25\1\26\1\uffff\1\4\1\3\2\uffff\1\2\1\13\1\11\1\12\1\27\1"+
            "\uffff\1\27\1\uffff\4\27\1\uffff\5\27\20\uffff\2\27\2\uffff"+
            "\4\27\1\14",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA85_eot = DFA.unpackEncodedString(DFA85_eotS);
    static final short[] DFA85_eof = DFA.unpackEncodedString(DFA85_eofS);
    static final char[] DFA85_min = DFA.unpackEncodedStringToUnsignedChars(DFA85_minS);
    static final char[] DFA85_max = DFA.unpackEncodedStringToUnsignedChars(DFA85_maxS);
    static final short[] DFA85_accept = DFA.unpackEncodedString(DFA85_acceptS);
    static final short[] DFA85_special = DFA.unpackEncodedString(DFA85_specialS);
    static final short[][] DFA85_transition;

    static {
        int numStates = DFA85_transitionS.length;
        DFA85_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA85_transition[i] = DFA.unpackEncodedString(DFA85_transitionS[i]);
        }
    }

    class DFA85 extends DFA {

        public DFA85(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 85;
            this.eot = DFA85_eot;
            this.eof = DFA85_eof;
            this.min = DFA85_min;
            this.max = DFA85_max;
            this.accept = DFA85_accept;
            this.special = DFA85_special;
            this.transition = DFA85_transition;
        }
        public String getDescription() {
            return "1099:10: (inv= explicitConstructorInvocation )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA85_2 = input.LA(1);

                         
                        int index85_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred109_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index85_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA85_3 = input.LA(1);

                         
                        int index85_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred109_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index85_3);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA85_4 = input.LA(1);

                         
                        int index85_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred109_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index85_4);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA85_5 = input.LA(1);

                         
                        int index85_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred109_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index85_5);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA85_6 = input.LA(1);

                         
                        int index85_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred109_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index85_6);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA85_7 = input.LA(1);

                         
                        int index85_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred109_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index85_7);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA85_8 = input.LA(1);

                         
                        int index85_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred109_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index85_8);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA85_9 = input.LA(1);

                         
                        int index85_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred109_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index85_9);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA85_10 = input.LA(1);

                         
                        int index85_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred109_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index85_10);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA85_11 = input.LA(1);

                         
                        int index85_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred109_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index85_11);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA85_12 = input.LA(1);

                         
                        int index85_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred109_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index85_12);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA85_13 = input.LA(1);

                         
                        int index85_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred109_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index85_13);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA85_14 = input.LA(1);

                         
                        int index85_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred109_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index85_14);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA85_15 = input.LA(1);

                         
                        int index85_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred109_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index85_15);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA85_16 = input.LA(1);

                         
                        int index85_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred109_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index85_16);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA85_17 = input.LA(1);

                         
                        int index85_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred109_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index85_17);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA85_18 = input.LA(1);

                         
                        int index85_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred109_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index85_18);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA85_19 = input.LA(1);

                         
                        int index85_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred109_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index85_19);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA85_20 = input.LA(1);

                         
                        int index85_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred109_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index85_20);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA85_21 = input.LA(1);

                         
                        int index85_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred109_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index85_21);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA85_22 = input.LA(1);

                         
                        int index85_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred109_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 23;}

                         
                        input.seek(index85_22);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 85, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA90_eotS =
        "\30\uffff";
    static final String DFA90_eofS =
        "\30\uffff";
    static final String DFA90_minS =
        "\1\10\2\0\25\uffff";
    static final String DFA90_maxS =
        "\1\u0087\2\0\25\uffff";
    static final String DFA90_acceptS =
        "\3\uffff\1\2\23\uffff\1\1";
    static final String DFA90_specialS =
        "\1\uffff\1\0\1\1\25\uffff}>";
    static final String[] DFA90_transitionS = {
            "\1\3\20\uffff\1\3\11\uffff\2\3\6\uffff\1\3\22\uffff\1\1\6\uffff"+
            "\1\3\12\uffff\10\3\1\uffff\2\3\2\uffff\1\2\3\3\46\uffff\1\3",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA90_eot = DFA.unpackEncodedString(DFA90_eotS);
    static final short[] DFA90_eof = DFA.unpackEncodedString(DFA90_eofS);
    static final char[] DFA90_min = DFA.unpackEncodedStringToUnsignedChars(DFA90_minS);
    static final char[] DFA90_max = DFA.unpackEncodedStringToUnsignedChars(DFA90_maxS);
    static final short[] DFA90_accept = DFA.unpackEncodedString(DFA90_acceptS);
    static final short[] DFA90_special = DFA.unpackEncodedString(DFA90_specialS);
    static final short[][] DFA90_transition;

    static {
        int numStates = DFA90_transitionS.length;
        DFA90_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA90_transition[i] = DFA.unpackEncodedString(DFA90_transitionS[i]);
        }
    }

    class DFA90 extends DFA {

        public DFA90(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 90;
            this.eot = DFA90_eot;
            this.eof = DFA90_eof;
            this.min = DFA90_min;
            this.max = DFA90_max;
            this.accept = DFA90_accept;
            this.special = DFA90_special;
            this.transition = DFA90_transition;
        }
        public String getDescription() {
            return "1103:1: explicitConstructorInvocation returns [MethodInvocation element] : ( ( nonWildcardTypeArguments )? 'this' args= arguments ';' | (prim= primary '.' )? ( nonWildcardTypeArguments )? 'super' argsx= arguments ';' );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA90_1 = input.LA(1);

                         
                        int index90_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_JavaP()) ) {s = 23;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index90_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA90_2 = input.LA(1);

                         
                        int index90_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_JavaP()) ) {s = 23;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index90_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 90, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA112_eotS =
        "\66\uffff";
    static final String DFA112_eofS =
        "\66\uffff";
    static final String DFA112_minS =
        "\1\10\13\0\52\uffff";
    static final String DFA112_maxS =
        "\1\u0087\13\0\52\uffff";
    static final String DFA112_acceptS =
        "\14\uffff\1\2\10\uffff\1\3\37\uffff\1\1";
    static final String DFA112_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\52\uffff}>";
    static final String[] DFA112_transitionS = {
            "\1\25\20\uffff\1\25\11\uffff\2\25\2\uffff\1\14\1\25\2\uffff"+
            "\1\3\4\uffff\1\25\1\uffff\1\14\2\uffff\4\14\1\1\2\14\6\uffff"+
            "\1\25\1\uffff\1\14\1\25\5\uffff\1\25\4\uffff\1\4\1\5\1\6\1\7"+
            "\1\10\1\11\1\12\1\13\1\uffff\2\25\2\uffff\4\25\1\2\1\uffff\1"+
            "\25\1\uffff\4\25\1\uffff\5\25\20\uffff\2\25\2\uffff\5\25",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA112_eot = DFA.unpackEncodedString(DFA112_eotS);
    static final short[] DFA112_eof = DFA.unpackEncodedString(DFA112_eofS);
    static final char[] DFA112_min = DFA.unpackEncodedStringToUnsignedChars(DFA112_minS);
    static final char[] DFA112_max = DFA.unpackEncodedStringToUnsignedChars(DFA112_maxS);
    static final short[] DFA112_accept = DFA.unpackEncodedString(DFA112_acceptS);
    static final short[] DFA112_special = DFA.unpackEncodedString(DFA112_specialS);
    static final short[][] DFA112_transition;

    static {
        int numStates = DFA112_transitionS.length;
        DFA112_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA112_transition[i] = DFA.unpackEncodedString(DFA112_transitionS[i]);
        }
    }

    class DFA112 extends DFA {

        public DFA112(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 112;
            this.eot = DFA112_eot;
            this.eof = DFA112_eof;
            this.min = DFA112_min;
            this.max = DFA112_max;
            this.accept = DFA112_accept;
            this.special = DFA112_special;
            this.transition = DFA112_transition;
        }
        public String getDescription() {
            return "1261:1: blockStatement returns [Statement element] : (local= localVariableDeclarationStatement | cd= classOrInterfaceDeclaration | stat= statement );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA112_1 = input.LA(1);

                         
                        int index112_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_JavaP()) ) {s = 53;}

                        else if ( (synpred146_JavaP()) ) {s = 12;}

                         
                        input.seek(index112_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA112_2 = input.LA(1);

                         
                        int index112_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_JavaP()) ) {s = 53;}

                        else if ( (synpred146_JavaP()) ) {s = 12;}

                         
                        input.seek(index112_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA112_3 = input.LA(1);

                         
                        int index112_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_JavaP()) ) {s = 53;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index112_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA112_4 = input.LA(1);

                         
                        int index112_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_JavaP()) ) {s = 53;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index112_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA112_5 = input.LA(1);

                         
                        int index112_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_JavaP()) ) {s = 53;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index112_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA112_6 = input.LA(1);

                         
                        int index112_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_JavaP()) ) {s = 53;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index112_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA112_7 = input.LA(1);

                         
                        int index112_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_JavaP()) ) {s = 53;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index112_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA112_8 = input.LA(1);

                         
                        int index112_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_JavaP()) ) {s = 53;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index112_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA112_9 = input.LA(1);

                         
                        int index112_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_JavaP()) ) {s = 53;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index112_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA112_10 = input.LA(1);

                         
                        int index112_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_JavaP()) ) {s = 53;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index112_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA112_11 = input.LA(1);

                         
                        int index112_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred145_JavaP()) ) {s = 53;}

                        else if ( (true) ) {s = 21;}

                         
                        input.seek(index112_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 112, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA121_eotS =
        "\22\uffff";
    static final String DFA121_eofS =
        "\22\uffff";
    static final String DFA121_minS =
        "\1\10\17\uffff\1\60\1\uffff";
    static final String DFA121_maxS =
        "\1\u0087\17\uffff\1\u0084\1\uffff";
    static final String DFA121_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1"+
        "\15\1\16\1\17\1\uffff\1\20";
    static final String DFA121_specialS =
        "\22\uffff}>";
    static final String[] DFA121_transitionS = {
            "\1\17\20\uffff\1\17\11\uffff\2\17\3\uffff\1\2\2\uffff\1\20\4"+
            "\uffff\1\16\21\uffff\1\1\2\uffff\1\17\5\uffff\1\11\4\uffff\10"+
            "\17\1\uffff\2\17\2\uffff\4\17\2\uffff\1\3\1\uffff\1\4\1\5\1"+
            "\6\1\7\1\uffff\1\10\1\12\1\13\1\14\1\15\20\uffff\2\17\2\uffff"+
            "\5\17",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\17\2\uffff\2\17\11\uffff\1\17\1\uffff\2\17\4\uffff\1\17"+
            "\2\uffff\1\17\5\uffff\1\17\10\uffff\1\17\1\uffff\1\17\7\uffff"+
            "\1\21\16\uffff\24\17",
            ""
    };

    static final short[] DFA121_eot = DFA.unpackEncodedString(DFA121_eotS);
    static final short[] DFA121_eof = DFA.unpackEncodedString(DFA121_eofS);
    static final char[] DFA121_min = DFA.unpackEncodedStringToUnsignedChars(DFA121_minS);
    static final char[] DFA121_max = DFA.unpackEncodedStringToUnsignedChars(DFA121_maxS);
    static final short[] DFA121_accept = DFA.unpackEncodedString(DFA121_acceptS);
    static final short[] DFA121_special = DFA.unpackEncodedString(DFA121_specialS);
    static final short[][] DFA121_transition;

    static {
        int numStates = DFA121_transitionS.length;
        DFA121_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA121_transition[i] = DFA.unpackEncodedString(DFA121_transitionS[i]);
        }
    }

    class DFA121 extends DFA {

        public DFA121(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 121;
            this.eot = DFA121_eot;
            this.eof = DFA121_eof;
            this.min = DFA121_min;
            this.max = DFA121_max;
            this.accept = DFA121_accept;
            this.special = DFA121_special;
            this.transition = DFA121_transition;
        }
        public String getDescription() {
            return "1282:1: statement returns [Statement element] : (bl= block | ASSERT asexpr= expression ( ':' asexprx= expression )? ';' | ifkey= 'if' ifexpr= parExpression ifif= statement ( options {k=1; } : elsekey= 'else' ifelse= statement )? | forkey= 'for' '(' forc= forControl ')' forstat= statement | whilkey= 'while' wexs= parExpression wstat= statement | dokey= 'do' dostat= statement whilekey= 'while' doex= parExpression ';' | trykey= 'try' (ress= resources )? traaibl= block (cts= catches finkey= 'finally' trybl= block | ctss= catches | finnkey= 'finally' trybll= block )? | switchkey= 'switch' swexpr= parExpression '{' cases= switchBlockStatementGroups '}' | synkey= 'synchronized' synexpr= parExpression synstat= block | retkey= 'return' (retex= expression )? ';' | throwkey= 'throw' threx= expression ';' | breakkey= 'break' (name= identifierRule )? ';' | continuekey= 'continue' (name= identifierRule )? ';' | ';' | stattex= statementExpression ';' | name= identifierRule ':' labstat= statement );";
        }
    }
    static final String DFA117_eotS =
        "\76\uffff";
    static final String DFA117_eofS =
        "\1\3\75\uffff";
    static final String DFA117_minS =
        "\1\10\1\0\74\uffff";
    static final String DFA117_maxS =
        "\1\u0087\1\0\74\uffff";
    static final String DFA117_acceptS =
        "\2\uffff\1\3\1\4\70\uffff\1\1\1\2";
    static final String DFA117_specialS =
        "\1\uffff\1\0\74\uffff}>";
    static final String[] DFA117_transitionS = {
            "\1\3\20\uffff\1\3\11\uffff\2\3\2\uffff\2\3\2\uffff\1\3\4\uffff"+
            "\1\3\1\uffff\1\3\2\uffff\7\3\6\uffff\4\3\5\uffff\1\3\2\uffff"+
            "\1\3\1\uffff\10\3\1\uffff\2\3\2\uffff\5\3\1\uffff\6\3\1\2\5"+
            "\3\1\1\1\3\16\uffff\2\3\2\uffff\5\3",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA117_eot = DFA.unpackEncodedString(DFA117_eotS);
    static final short[] DFA117_eof = DFA.unpackEncodedString(DFA117_eofS);
    static final char[] DFA117_min = DFA.unpackEncodedStringToUnsignedChars(DFA117_minS);
    static final char[] DFA117_max = DFA.unpackEncodedStringToUnsignedChars(DFA117_maxS);
    static final short[] DFA117_accept = DFA.unpackEncodedString(DFA117_acceptS);
    static final short[] DFA117_special = DFA.unpackEncodedString(DFA117_specialS);
    static final short[][] DFA117_transition;

    static {
        int numStates = DFA117_transitionS.length;
        DFA117_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA117_transition[i] = DFA.unpackEncodedString(DFA117_transitionS[i]);
        }
    }

    class DFA117 extends DFA {

        public DFA117(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 117;
            this.eot = DFA117_eot;
            this.eof = DFA117_eof;
            this.min = DFA117_min;
            this.max = DFA117_max;
            this.accept = DFA117_accept;
            this.special = DFA117_special;
            this.transition = DFA117_transition;
        }
        public String getDescription() {
            return "1310:9: (cts= catches finkey= 'finally' trybl= block | ctss= catches | finnkey= 'finally' trybll= block )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA117_1 = input.LA(1);

                         
                        int index117_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred157_JavaP()) ) {s = 60;}

                        else if ( (synpred158_JavaP()) ) {s = 61;}

                         
                        input.seek(index117_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 117, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA131_eotS =
        "\u0122\uffff";
    static final String DFA131_eofS =
        "\u0122\uffff";
    static final String DFA131_minS =
        "\1\10\13\53\23\uffff\14\53\1\10\1\53\2\10\1\60\34\uffff\1\107\1"+
        "\60\1\uffff\1\107\1\60\1\uffff\1\107\1\60\1\uffff\1\107\1\60\1\uffff"+
        "\1\107\1\60\1\uffff\1\107\1\60\1\uffff\1\107\1\60\1\uffff\1\107"+
        "\1\60\1\uffff\56\0\2\uffff\12\0\26\uffff\1\0\1\uffff\1\0\32\uffff"+
        "\1\0\33\uffff\3\0\2\uffff\4\0\2\uffff\4\0\2\uffff\4\0\2\uffff\4"+
        "\0\2\uffff\4\0\2\uffff\4\0\2\uffff\4\0\2\uffff\4\0\2\uffff";
    static final String DFA131_maxS =
        "\1\u0087\1\141\1\53\1\u0084\10\106\23\uffff\11\106\1\141\1\53\1"+
        "\141\4\u0087\1\142\34\uffff\1\107\1\142\1\uffff\1\107\1\142\1\uffff"+
        "\1\107\1\142\1\uffff\1\107\1\142\1\uffff\1\107\1\142\1\uffff\1\107"+
        "\1\142\1\uffff\1\107\1\142\1\uffff\1\107\1\142\1\uffff\56\0\2\uffff"+
        "\12\0\26\uffff\1\0\1\uffff\1\0\32\uffff\1\0\33\uffff\3\0\2\uffff"+
        "\4\0\2\uffff\4\0\2\uffff\4\0\2\uffff\4\0\2\uffff\4\0\2\uffff\4\0"+
        "\2\uffff\4\0\2\uffff\4\0\2\uffff";
    static final String DFA131_acceptS =
        "\14\uffff\1\2\u00e3\uffff\1\1\61\uffff";
    static final String DFA131_specialS =
        "\144\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
        "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
        "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\2\uffff\1\56\1\57\1\60"+
        "\1\61\1\62\1\63\1\64\1\65\1\66\1\67\26\uffff\1\70\1\uffff\1\71\32"+
        "\uffff\1\72\33\uffff\1\73\1\74\1\75\2\uffff\1\76\1\77\1\100\1\101"+
        "\2\uffff\1\102\1\103\1\104\1\105\2\uffff\1\106\1\107\1\110\1\111"+
        "\2\uffff\1\112\1\113\1\114\1\115\2\uffff\1\116\1\117\1\120\1\121"+
        "\2\uffff\1\122\1\123\1\124\1\125\2\uffff\1\126\1\127\1\130\1\131"+
        "\2\uffff\1\132\1\133\1\134\1\135\2\uffff}>";
    static final String[] DFA131_transitionS = {
            "\1\14\20\uffff\1\14\11\uffff\2\14\6\uffff\1\3\4\uffff\1\14\10"+
            "\uffff\1\1\13\uffff\1\14\12\uffff\1\4\1\5\1\6\1\7\1\10\1\11"+
            "\1\12\1\13\1\uffff\2\14\2\uffff\4\14\1\2\35\uffff\2\14\2\uffff"+
            "\5\14",
            "\1\37\15\uffff\1\50\26\uffff\1\40\1\41\1\42\1\43\1\44\1\45"+
            "\1\46\1\47\11\uffff\1\51",
            "\1\52",
            "\1\57\4\uffff\1\14\2\uffff\1\54\1\14\11\uffff\1\53\2\14\1\55"+
            "\4\uffff\1\56\2\uffff\1\14\5\uffff\1\14\10\uffff\1\14\1\uffff"+
            "\1\14\26\uffff\24\14",
            "\1\115\7\uffff\1\14\22\uffff\1\114",
            "\1\120\7\uffff\1\14\22\uffff\1\117",
            "\1\123\7\uffff\1\14\22\uffff\1\122",
            "\1\126\7\uffff\1\14\22\uffff\1\125",
            "\1\131\7\uffff\1\14\22\uffff\1\130",
            "\1\134\7\uffff\1\14\22\uffff\1\133",
            "\1\137\7\uffff\1\14\22\uffff\1\136",
            "\1\142\7\uffff\1\14\22\uffff\1\141",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\150\7\uffff\1\145\12\uffff\1\144\2\uffff\1\146\4\uffff\1"+
            "\147",
            "\1\152\32\uffff\1\151",
            "\1\154\32\uffff\1\153",
            "\1\156\32\uffff\1\155",
            "\1\160\32\uffff\1\157",
            "\1\162\32\uffff\1\161",
            "\1\164\32\uffff\1\163",
            "\1\166\32\uffff\1\165",
            "\1\170\32\uffff\1\167",
            "\1\171\15\uffff\1\u0082\26\uffff\1\172\1\173\1\174\1\175\1"+
            "\176\1\177\1\u0080\1\u0081\11\uffff\1\u0083",
            "\1\u0084",
            "\1\u0087\7\uffff\1\u0085\5\uffff\1\u0090\26\uffff\1\u0088\1"+
            "\u0089\1\u008a\1\u008b\1\u008c\1\u008d\1\u008e\1\u008f\2\uffff"+
            "\1\u0086\6\uffff\1\u0091",
            "\1\14\20\uffff\1\14\11\uffff\2\14\6\uffff\1\u0094\22\uffff"+
            "\1\14\6\uffff\1\14\3\uffff\1\14\6\uffff\1\u0095\1\u0096\1\u0097"+
            "\1\u0098\1\u0099\1\u009a\1\u009b\1\u009c\1\u009d\2\14\2\uffff"+
            "\4\14\36\uffff\2\14\2\uffff\5\14",
            "\1\u00b4\17\uffff\1\14\2\uffff\1\14\32\uffff\1\14\3\uffff\1"+
            "\14\51\uffff\1\14",
            "\1\14\20\uffff\1\14\11\uffff\2\14\6\uffff\1\u00b6\31\uffff"+
            "\1\14\12\uffff\10\14\1\uffff\2\14\2\uffff\4\14\36\uffff\2\14"+
            "\2\uffff\5\14",
            "\1\14\20\uffff\1\14\11\uffff\2\14\6\uffff\1\14\31\uffff\1\14"+
            "\1\uffff\1\u00d1\10\uffff\10\14\1\uffff\2\14\2\uffff\4\14\36"+
            "\uffff\2\14\2\uffff\5\14",
            "\1\14\16\uffff\1\u00ef\6\uffff\1\u00ed\2\uffff\1\u00ee\30\uffff"+
            "\1\u00f0",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u00f2",
            "\1\14\16\uffff\1\u00f5\6\uffff\1\u00f3\2\uffff\1\u00f4\30\uffff"+
            "\1\u00f0",
            "",
            "\1\u00f8",
            "\1\14\16\uffff\1\u00fb\6\uffff\1\u00f9\2\uffff\1\u00fa\30\uffff"+
            "\1\u00f0",
            "",
            "\1\u00fe",
            "\1\14\16\uffff\1\u0101\6\uffff\1\u00ff\2\uffff\1\u0100\30\uffff"+
            "\1\u00f0",
            "",
            "\1\u0104",
            "\1\14\16\uffff\1\u0107\6\uffff\1\u0105\2\uffff\1\u0106\30\uffff"+
            "\1\u00f0",
            "",
            "\1\u010a",
            "\1\14\16\uffff\1\u010d\6\uffff\1\u010b\2\uffff\1\u010c\30\uffff"+
            "\1\u00f0",
            "",
            "\1\u0110",
            "\1\14\16\uffff\1\u0113\6\uffff\1\u0111\2\uffff\1\u0112\30\uffff"+
            "\1\u00f0",
            "",
            "\1\u0116",
            "\1\14\16\uffff\1\u0119\6\uffff\1\u0117\2\uffff\1\u0118\30\uffff"+
            "\1\u00f0",
            "",
            "\1\u011c",
            "\1\14\16\uffff\1\u011f\6\uffff\1\u011d\2\uffff\1\u011e\30\uffff"+
            "\1\u00f0",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA131_eot = DFA.unpackEncodedString(DFA131_eotS);
    static final short[] DFA131_eof = DFA.unpackEncodedString(DFA131_eofS);
    static final char[] DFA131_min = DFA.unpackEncodedStringToUnsignedChars(DFA131_minS);
    static final char[] DFA131_max = DFA.unpackEncodedStringToUnsignedChars(DFA131_maxS);
    static final short[] DFA131_accept = DFA.unpackEncodedString(DFA131_acceptS);
    static final short[] DFA131_special = DFA.unpackEncodedString(DFA131_specialS);
    static final short[][] DFA131_transition;

    static {
        int numStates = DFA131_transitionS.length;
        DFA131_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA131_transition[i] = DFA.unpackEncodedString(DFA131_transitionS[i]);
        }
    }

    class DFA131 extends DFA {

        public DFA131(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 131;
            this.eot = DFA131_eot;
            this.eof = DFA131_eof;
            this.min = DFA131_min;
            this.max = DFA131_max;
            this.accept = DFA131_accept;
            this.special = DFA131_special;
            this.transition = DFA131_transition;
        }
        public String getDescription() {
            return "1409:1: forControl returns [ForControl element] options {k=3; } : (enh= enhancedForControl | (in= forInit )? ';' (e= expression )? ';' (u= forUpdate )? );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA131_100 = input.LA(1);

                         
                        int index131_100 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_100);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA131_101 = input.LA(1);

                         
                        int index131_101 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_101);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA131_102 = input.LA(1);

                         
                        int index131_102 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_102);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA131_103 = input.LA(1);

                         
                        int index131_103 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_103);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA131_104 = input.LA(1);

                         
                        int index131_104 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_104);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA131_105 = input.LA(1);

                         
                        int index131_105 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_105);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA131_106 = input.LA(1);

                         
                        int index131_106 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_106);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA131_107 = input.LA(1);

                         
                        int index131_107 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_107);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA131_108 = input.LA(1);

                         
                        int index131_108 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_108);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA131_109 = input.LA(1);

                         
                        int index131_109 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_109);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA131_110 = input.LA(1);

                         
                        int index131_110 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_110);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA131_111 = input.LA(1);

                         
                        int index131_111 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_111);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA131_112 = input.LA(1);

                         
                        int index131_112 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_112);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA131_113 = input.LA(1);

                         
                        int index131_113 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_113);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA131_114 = input.LA(1);

                         
                        int index131_114 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_114);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA131_115 = input.LA(1);

                         
                        int index131_115 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_115);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA131_116 = input.LA(1);

                         
                        int index131_116 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_116);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA131_117 = input.LA(1);

                         
                        int index131_117 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_117);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA131_118 = input.LA(1);

                         
                        int index131_118 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_118);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA131_119 = input.LA(1);

                         
                        int index131_119 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_119);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA131_120 = input.LA(1);

                         
                        int index131_120 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_120);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA131_121 = input.LA(1);

                         
                        int index131_121 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_121);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA131_122 = input.LA(1);

                         
                        int index131_122 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_122);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA131_123 = input.LA(1);

                         
                        int index131_123 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_123);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA131_124 = input.LA(1);

                         
                        int index131_124 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_124);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA131_125 = input.LA(1);

                         
                        int index131_125 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_125);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA131_126 = input.LA(1);

                         
                        int index131_126 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_126);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA131_127 = input.LA(1);

                         
                        int index131_127 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_127);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA131_128 = input.LA(1);

                         
                        int index131_128 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_128);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA131_129 = input.LA(1);

                         
                        int index131_129 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_129);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA131_130 = input.LA(1);

                         
                        int index131_130 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_130);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA131_131 = input.LA(1);

                         
                        int index131_131 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_131);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA131_132 = input.LA(1);

                         
                        int index131_132 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_132);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA131_133 = input.LA(1);

                         
                        int index131_133 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_133);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA131_134 = input.LA(1);

                         
                        int index131_134 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_134);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA131_135 = input.LA(1);

                         
                        int index131_135 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_135);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA131_136 = input.LA(1);

                         
                        int index131_136 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_136);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA131_137 = input.LA(1);

                         
                        int index131_137 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_137);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA131_138 = input.LA(1);

                         
                        int index131_138 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_138);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA131_139 = input.LA(1);

                         
                        int index131_139 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_139);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA131_140 = input.LA(1);

                         
                        int index131_140 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_140);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA131_141 = input.LA(1);

                         
                        int index131_141 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_141);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA131_142 = input.LA(1);

                         
                        int index131_142 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_142);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA131_143 = input.LA(1);

                         
                        int index131_143 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_143);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA131_144 = input.LA(1);

                         
                        int index131_144 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_144);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA131_145 = input.LA(1);

                         
                        int index131_145 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_145);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA131_148 = input.LA(1);

                         
                        int index131_148 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_148);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA131_149 = input.LA(1);

                         
                        int index131_149 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_149);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA131_150 = input.LA(1);

                         
                        int index131_150 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_150);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA131_151 = input.LA(1);

                         
                        int index131_151 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_151);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA131_152 = input.LA(1);

                         
                        int index131_152 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_152);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA131_153 = input.LA(1);

                         
                        int index131_153 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_153);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA131_154 = input.LA(1);

                         
                        int index131_154 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_154);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA131_155 = input.LA(1);

                         
                        int index131_155 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_155);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA131_156 = input.LA(1);

                         
                        int index131_156 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_156);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA131_157 = input.LA(1);

                         
                        int index131_157 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_157);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA131_180 = input.LA(1);

                         
                        int index131_180 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_180);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA131_182 = input.LA(1);

                         
                        int index131_182 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_182);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA131_209 = input.LA(1);

                         
                        int index131_209 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_209);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA131_237 = input.LA(1);

                         
                        int index131_237 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_237);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA131_238 = input.LA(1);

                         
                        int index131_238 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_238);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA131_239 = input.LA(1);

                         
                        int index131_239 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_239);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA131_242 = input.LA(1);

                         
                        int index131_242 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_242);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA131_243 = input.LA(1);

                         
                        int index131_243 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_243);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA131_244 = input.LA(1);

                         
                        int index131_244 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_244);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA131_245 = input.LA(1);

                         
                        int index131_245 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_245);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA131_248 = input.LA(1);

                         
                        int index131_248 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_248);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA131_249 = input.LA(1);

                         
                        int index131_249 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_249);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA131_250 = input.LA(1);

                         
                        int index131_250 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_250);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA131_251 = input.LA(1);

                         
                        int index131_251 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_251);
                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA131_254 = input.LA(1);

                         
                        int index131_254 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_254);
                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA131_255 = input.LA(1);

                         
                        int index131_255 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_255);
                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA131_256 = input.LA(1);

                         
                        int index131_256 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_256);
                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA131_257 = input.LA(1);

                         
                        int index131_257 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_257);
                        if ( s>=0 ) return s;
                        break;
                    case 74 : 
                        int LA131_260 = input.LA(1);

                         
                        int index131_260 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_260);
                        if ( s>=0 ) return s;
                        break;
                    case 75 : 
                        int LA131_261 = input.LA(1);

                         
                        int index131_261 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_261);
                        if ( s>=0 ) return s;
                        break;
                    case 76 : 
                        int LA131_262 = input.LA(1);

                         
                        int index131_262 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_262);
                        if ( s>=0 ) return s;
                        break;
                    case 77 : 
                        int LA131_263 = input.LA(1);

                         
                        int index131_263 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_263);
                        if ( s>=0 ) return s;
                        break;
                    case 78 : 
                        int LA131_266 = input.LA(1);

                         
                        int index131_266 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_266);
                        if ( s>=0 ) return s;
                        break;
                    case 79 : 
                        int LA131_267 = input.LA(1);

                         
                        int index131_267 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_267);
                        if ( s>=0 ) return s;
                        break;
                    case 80 : 
                        int LA131_268 = input.LA(1);

                         
                        int index131_268 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_268);
                        if ( s>=0 ) return s;
                        break;
                    case 81 : 
                        int LA131_269 = input.LA(1);

                         
                        int index131_269 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_269);
                        if ( s>=0 ) return s;
                        break;
                    case 82 : 
                        int LA131_272 = input.LA(1);

                         
                        int index131_272 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_272);
                        if ( s>=0 ) return s;
                        break;
                    case 83 : 
                        int LA131_273 = input.LA(1);

                         
                        int index131_273 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_273);
                        if ( s>=0 ) return s;
                        break;
                    case 84 : 
                        int LA131_274 = input.LA(1);

                         
                        int index131_274 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_274);
                        if ( s>=0 ) return s;
                        break;
                    case 85 : 
                        int LA131_275 = input.LA(1);

                         
                        int index131_275 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_275);
                        if ( s>=0 ) return s;
                        break;
                    case 86 : 
                        int LA131_278 = input.LA(1);

                         
                        int index131_278 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_278);
                        if ( s>=0 ) return s;
                        break;
                    case 87 : 
                        int LA131_279 = input.LA(1);

                         
                        int index131_279 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_279);
                        if ( s>=0 ) return s;
                        break;
                    case 88 : 
                        int LA131_280 = input.LA(1);

                         
                        int index131_280 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_280);
                        if ( s>=0 ) return s;
                        break;
                    case 89 : 
                        int LA131_281 = input.LA(1);

                         
                        int index131_281 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_281);
                        if ( s>=0 ) return s;
                        break;
                    case 90 : 
                        int LA131_284 = input.LA(1);

                         
                        int index131_284 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_284);
                        if ( s>=0 ) return s;
                        break;
                    case 91 : 
                        int LA131_285 = input.LA(1);

                         
                        int index131_285 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_285);
                        if ( s>=0 ) return s;
                        break;
                    case 92 : 
                        int LA131_286 = input.LA(1);

                         
                        int index131_286 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_286);
                        if ( s>=0 ) return s;
                        break;
                    case 93 : 
                        int LA131_287 = input.LA(1);

                         
                        int index131_287 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred179_JavaP()) ) {s = 240;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index131_287);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 131, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA132_eotS =
        "\36\uffff";
    static final String DFA132_eofS =
        "\36\uffff";
    static final String DFA132_minS =
        "\1\10\2\uffff\11\0\22\uffff";
    static final String DFA132_maxS =
        "\1\u0087\2\uffff\11\0\22\uffff";
    static final String DFA132_acceptS =
        "\1\uffff\1\1\12\uffff\1\2\21\uffff";
    static final String DFA132_specialS =
        "\3\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\22\uffff}>";
    static final String[] DFA132_transitionS = {
            "\1\14\20\uffff\1\14\11\uffff\2\14\6\uffff\1\3\15\uffff\1\1\13"+
            "\uffff\1\14\12\uffff\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\uffff"+
            "\2\14\2\uffff\4\14\1\1\35\uffff\2\14\2\uffff\5\14",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA132_eot = DFA.unpackEncodedString(DFA132_eotS);
    static final short[] DFA132_eof = DFA.unpackEncodedString(DFA132_eofS);
    static final char[] DFA132_min = DFA.unpackEncodedStringToUnsignedChars(DFA132_minS);
    static final char[] DFA132_max = DFA.unpackEncodedStringToUnsignedChars(DFA132_maxS);
    static final short[] DFA132_accept = DFA.unpackEncodedString(DFA132_acceptS);
    static final short[] DFA132_special = DFA.unpackEncodedString(DFA132_specialS);
    static final short[][] DFA132_transition;

    static {
        int numStates = DFA132_transitionS.length;
        DFA132_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA132_transition[i] = DFA.unpackEncodedString(DFA132_transitionS[i]);
        }
    }

    class DFA132 extends DFA {

        public DFA132(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 132;
            this.eot = DFA132_eot;
            this.eof = DFA132_eof;
            this.min = DFA132_min;
            this.max = DFA132_max;
            this.accept = DFA132_accept;
            this.special = DFA132_special;
            this.transition = DFA132_transition;
        }
        public String getDescription() {
            return "1416:1: forInit returns [ForInit element] : (local= localVariableDeclaration | el= expressionList );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA132_3 = input.LA(1);

                         
                        int index132_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index132_3);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA132_4 = input.LA(1);

                         
                        int index132_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index132_4);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA132_5 = input.LA(1);

                         
                        int index132_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index132_5);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA132_6 = input.LA(1);

                         
                        int index132_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index132_6);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA132_7 = input.LA(1);

                         
                        int index132_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index132_7);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA132_8 = input.LA(1);

                         
                        int index132_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index132_8);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA132_9 = input.LA(1);

                         
                        int index132_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index132_9);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA132_10 = input.LA(1);

                         
                        int index132_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index132_10);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA132_11 = input.LA(1);

                         
                        int index132_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred183_JavaP()) ) {s = 1;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index132_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 132, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA134_eotS =
        "\16\uffff";
    static final String DFA134_eofS =
        "\1\14\15\uffff";
    static final String DFA134_minS =
        "\1\60\13\0\2\uffff";
    static final String DFA134_maxS =
        "\1\170\13\0\2\uffff";
    static final String DFA134_acceptS =
        "\14\uffff\1\2\1\1";
    static final String DFA134_specialS =
        "\1\uffff\1\2\1\0\1\11\1\6\1\3\1\1\1\12\1\7\1\4\1\10\1\5\2\uffff}>";
    static final String[] DFA134_transitionS = {
            "\1\14\15\uffff\1\12\1\14\1\13\2\uffff\1\14\3\uffff\1\14\1\uffff"+
            "\1\1\21\uffff\1\14\6\uffff\1\14\16\uffff\1\2\1\3\1\4\1\5\1\6"+
            "\1\7\1\10\1\11",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA134_eot = DFA.unpackEncodedString(DFA134_eotS);
    static final short[] DFA134_eof = DFA.unpackEncodedString(DFA134_eofS);
    static final char[] DFA134_min = DFA.unpackEncodedStringToUnsignedChars(DFA134_minS);
    static final char[] DFA134_max = DFA.unpackEncodedStringToUnsignedChars(DFA134_maxS);
    static final short[] DFA134_accept = DFA.unpackEncodedString(DFA134_acceptS);
    static final short[] DFA134_special = DFA.unpackEncodedString(DFA134_specialS);
    static final short[][] DFA134_transition;

    static {
        int numStates = DFA134_transitionS.length;
        DFA134_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA134_transition[i] = DFA.unpackEncodedString(DFA134_transitionS[i]);
        }
    }

    class DFA134 extends DFA {

        public DFA134(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 134;
            this.eot = DFA134_eot;
            this.eof = DFA134_eof;
            this.min = DFA134_min;
            this.max = DFA134_max;
            this.accept = DFA134_accept;
            this.special = DFA134_special;
            this.transition = DFA134_transition;
        }
        public String getDescription() {
            return "1465:63: (op= assignmentOperator exx= expression )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA134_2 = input.LA(1);

                         
                        int index134_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred185_JavaP()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index134_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA134_6 = input.LA(1);

                         
                        int index134_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred185_JavaP()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index134_6);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA134_1 = input.LA(1);

                         
                        int index134_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred185_JavaP()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index134_1);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA134_5 = input.LA(1);

                         
                        int index134_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred185_JavaP()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index134_5);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA134_9 = input.LA(1);

                         
                        int index134_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred185_JavaP()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index134_9);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA134_11 = input.LA(1);

                         
                        int index134_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred185_JavaP()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index134_11);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA134_4 = input.LA(1);

                         
                        int index134_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred185_JavaP()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index134_4);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA134_8 = input.LA(1);

                         
                        int index134_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred185_JavaP()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index134_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA134_10 = input.LA(1);

                         
                        int index134_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred185_JavaP()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index134_10);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA134_3 = input.LA(1);

                         
                        int index134_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred185_JavaP()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index134_3);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA134_7 = input.LA(1);

                         
                        int index134_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred185_JavaP()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index134_7);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 134, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA135_eotS =
        "\17\uffff";
    static final String DFA135_eofS =
        "\17\uffff";
    static final String DFA135_minS =
        "\1\76\12\uffff\2\100\2\uffff";
    static final String DFA135_maxS =
        "\1\170\12\uffff\1\100\1\111\2\uffff";
    static final String DFA135_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\2\uffff\1\13"+
        "\1\14";
    static final String DFA135_specialS =
        "\1\0\13\uffff\1\1\2\uffff}>";
    static final String[] DFA135_transitionS = {
            "\1\12\1\uffff\1\13\10\uffff\1\1\47\uffff\1\2\1\3\1\4\1\5\1\6"+
            "\1\7\1\10\1\11",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\14",
            "\1\15\10\uffff\1\16",
            "",
            ""
    };

    static final short[] DFA135_eot = DFA.unpackEncodedString(DFA135_eotS);
    static final short[] DFA135_eof = DFA.unpackEncodedString(DFA135_eofS);
    static final char[] DFA135_min = DFA.unpackEncodedStringToUnsignedChars(DFA135_minS);
    static final char[] DFA135_max = DFA.unpackEncodedStringToUnsignedChars(DFA135_maxS);
    static final short[] DFA135_accept = DFA.unpackEncodedString(DFA135_acceptS);
    static final short[] DFA135_special = DFA.unpackEncodedString(DFA135_specialS);
    static final short[][] DFA135_transition;

    static {
        int numStates = DFA135_transitionS.length;
        DFA135_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA135_transition[i] = DFA.unpackEncodedString(DFA135_transitionS[i]);
        }
    }

    class DFA135 extends DFA {

        public DFA135(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 135;
            this.eot = DFA135_eot;
            this.eof = DFA135_eof;
            this.min = DFA135_min;
            this.max = DFA135_max;
            this.accept = DFA135_accept;
            this.special = DFA135_special;
            this.transition = DFA135_transition;
        }
        public String getDescription() {
            return "1479:1: assignmentOperator : ( '=' | '+=' | '-=' | '*=' | '/=' | '&=' | '|=' | '^=' | '%=' | ( '<' '<' '=' )=>t1= '<' t2= '<' t3= '=' {...}? | ( '>' '>' '>' '=' )=>t1= '>' t2= '>' t3= '>' t4= '=' {...}? | ( '>' '>' '=' )=>t1= '>' t2= '>' t3= '=' {...}?);";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA135_0 = input.LA(1);

                         
                        int index135_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA135_0==73) ) {s = 1;}

                        else if ( (LA135_0==113) ) {s = 2;}

                        else if ( (LA135_0==114) ) {s = 3;}

                        else if ( (LA135_0==115) ) {s = 4;}

                        else if ( (LA135_0==116) ) {s = 5;}

                        else if ( (LA135_0==117) ) {s = 6;}

                        else if ( (LA135_0==118) ) {s = 7;}

                        else if ( (LA135_0==119) ) {s = 8;}

                        else if ( (LA135_0==120) ) {s = 9;}

                        else if ( (LA135_0==62) && (synpred195_JavaP())) {s = 10;}

                        else if ( (LA135_0==64) ) {s = 11;}

                         
                        input.seek(index135_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA135_12 = input.LA(1);

                         
                        int index135_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA135_12==64) && (synpred196_JavaP())) {s = 13;}

                        else if ( (LA135_12==73) && (synpred197_JavaP())) {s = 14;}

                         
                        input.seek(index135_12);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 135, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA148_eotS =
        "\40\uffff";
    static final String DFA148_eofS =
        "\40\uffff";
    static final String DFA148_minS =
        "\1\76\1\uffff\1\100\1\10\34\uffff";
    static final String DFA148_maxS =
        "\1\100\1\uffff\1\100\1\u0087\34\uffff";
    static final String DFA148_acceptS =
        "\1\uffff\1\1\2\uffff\1\2\33\3";
    static final String DFA148_specialS =
        "\1\0\2\uffff\1\1\34\uffff}>";
    static final String[] DFA148_transitionS = {
            "\1\1\1\uffff\1\2",
            "",
            "\1\3",
            "\1\16\20\uffff\1\17\11\uffff\1\20\1\21\6\uffff\1\26\24\uffff"+
            "\1\4\4\uffff\1\27\12\uffff\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
            "\1\37\1\uffff\1\15\1\13\2\uffff\1\14\1\24\1\22\1\23\36\uffff"+
            "\1\5\1\6\2\uffff\1\7\1\10\1\11\1\12\1\25",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA148_eot = DFA.unpackEncodedString(DFA148_eotS);
    static final short[] DFA148_eof = DFA.unpackEncodedString(DFA148_eofS);
    static final char[] DFA148_min = DFA.unpackEncodedStringToUnsignedChars(DFA148_minS);
    static final char[] DFA148_max = DFA.unpackEncodedStringToUnsignedChars(DFA148_maxS);
    static final short[] DFA148_accept = DFA.unpackEncodedString(DFA148_acceptS);
    static final short[] DFA148_special = DFA.unpackEncodedString(DFA148_specialS);
    static final short[][] DFA148_transition;

    static {
        int numStates = DFA148_transitionS.length;
        DFA148_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA148_transition[i] = DFA.unpackEncodedString(DFA148_transitionS[i]);
        }
    }

    class DFA148 extends DFA {

        public DFA148(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 148;
            this.eot = DFA148_eot;
            this.eof = DFA148_eof;
            this.min = DFA148_min;
            this.max = DFA148_max;
            this.accept = DFA148_accept;
            this.special = DFA148_special;
            this.transition = DFA148_transition;
        }
        public String getDescription() {
            return "1629:1: shiftOp : ( ( '<' '<' )=>t1= '<' t2= '<' {...}? | ( '>' '>' '>' )=>t1= '>' t2= '>' t3= '>' {...}? | ( '>' '>' )=>t1= '>' t2= '>' {...}?);";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA148_0 = input.LA(1);

                         
                        int index148_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA148_0==62) && (synpred212_JavaP())) {s = 1;}

                        else if ( (LA148_0==64) ) {s = 2;}

                         
                        input.seek(index148_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA148_3 = input.LA(1);

                         
                        int index148_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA148_3==64) && (synpred213_JavaP())) {s = 4;}

                        else if ( (LA148_3==127) && (synpred214_JavaP())) {s = 5;}

                        else if ( (LA148_3==128) && (synpred214_JavaP())) {s = 6;}

                        else if ( (LA148_3==131) && (synpred214_JavaP())) {s = 7;}

                        else if ( (LA148_3==132) && (synpred214_JavaP())) {s = 8;}

                        else if ( (LA148_3==133) && (synpred214_JavaP())) {s = 9;}

                        else if ( (LA148_3==134) && (synpred214_JavaP())) {s = 10;}

                        else if ( (LA148_3==90) && (synpred214_JavaP())) {s = 11;}

                        else if ( (LA148_3==93) && (synpred214_JavaP())) {s = 12;}

                        else if ( (LA148_3==89) && (synpred214_JavaP())) {s = 13;}

                        else if ( (LA148_3==IntegerLiteral) && (synpred214_JavaP())) {s = 14;}

                        else if ( (LA148_3==FloatingPointLiteral) && (synpred214_JavaP())) {s = 15;}

                        else if ( (LA148_3==CharacterLiteral) && (synpred214_JavaP())) {s = 16;}

                        else if ( (LA148_3==StringLiteral) && (synpred214_JavaP())) {s = 17;}

                        else if ( (LA148_3==95) && (synpred214_JavaP())) {s = 18;}

                        else if ( (LA148_3==96) && (synpred214_JavaP())) {s = 19;}

                        else if ( (LA148_3==94) && (synpred214_JavaP())) {s = 20;}

                        else if ( (LA148_3==135) && (synpred214_JavaP())) {s = 21;}

                        else if ( (LA148_3==Identifier) && (synpred214_JavaP())) {s = 22;}

                        else if ( (LA148_3==69) && (synpred214_JavaP())) {s = 23;}

                        else if ( (LA148_3==80) && (synpred214_JavaP())) {s = 24;}

                        else if ( (LA148_3==81) && (synpred214_JavaP())) {s = 25;}

                        else if ( (LA148_3==82) && (synpred214_JavaP())) {s = 26;}

                        else if ( (LA148_3==83) && (synpred214_JavaP())) {s = 27;}

                        else if ( (LA148_3==84) && (synpred214_JavaP())) {s = 28;}

                        else if ( (LA148_3==85) && (synpred214_JavaP())) {s = 29;}

                        else if ( (LA148_3==86) && (synpred214_JavaP())) {s = 30;}

                        else if ( (LA148_3==87) && (synpred214_JavaP())) {s = 31;}

                         
                        input.seek(index148_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 148, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA156_eotS =
        "\31\uffff";
    static final String DFA156_eofS =
        "\31\uffff";
    static final String DFA156_minS =
        "\1\10\2\uffff\1\0\25\uffff";
    static final String DFA156_maxS =
        "\1\u0087\2\uffff\1\0\25\uffff";
    static final String DFA156_acceptS =
        "\1\uffff\1\1\1\2\1\uffff\1\4\23\uffff\1\3";
    static final String DFA156_specialS =
        "\3\uffff\1\0\25\uffff}>";
    static final String[] DFA156_transitionS = {
            "\1\4\20\uffff\1\4\11\uffff\2\4\6\uffff\1\4\31\uffff\1\4\12\uffff"+
            "\10\4\1\uffff\1\4\1\3\2\uffff\4\4\44\uffff\1\1\1\2\1\4",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA156_eot = DFA.unpackEncodedString(DFA156_eotS);
    static final short[] DFA156_eof = DFA.unpackEncodedString(DFA156_eofS);
    static final char[] DFA156_min = DFA.unpackEncodedStringToUnsignedChars(DFA156_minS);
    static final char[] DFA156_max = DFA.unpackEncodedStringToUnsignedChars(DFA156_maxS);
    static final short[] DFA156_accept = DFA.unpackEncodedString(DFA156_acceptS);
    static final short[] DFA156_special = DFA.unpackEncodedString(DFA156_specialS);
    static final short[][] DFA156_transition;

    static {
        int numStates = DFA156_transitionS.length;
        DFA156_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA156_transition[i] = DFA.unpackEncodedString(DFA156_transitionS[i]);
        }
    }

    class DFA156 extends DFA {

        public DFA156(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 156;
            this.eot = DFA156_eot;
            this.eof = DFA156_eof;
            this.min = DFA156_min;
            this.max = DFA156_max;
            this.accept = DFA156_accept;
            this.special = DFA156_special;
            this.transition = DFA156_transition;
        }
        public String getDescription() {
            return "1680:1: unaryExpressionNotPlusMinus returns [Expression element] : (a= '~' ex= unaryExpression | b= '!' exx= unaryExpression | castex= castExpression | prim= primary (sel= selector )* (c= '++' | d= '--' )? );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA156_3 = input.LA(1);

                         
                        int index156_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred226_JavaP()) ) {s = 24;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index156_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 156, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA160_eotS =
        "\27\uffff";
    static final String DFA160_eofS =
        "\27\uffff";
    static final String DFA160_minS =
        "\1\10\13\uffff\1\0\12\uffff";
    static final String DFA160_maxS =
        "\1\u0087\13\uffff\1\0\12\uffff";
    static final String DFA160_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\6\uffff\1\5\1\uffff\1\7\1\10\7\uffff\1"+
        "\6";
    static final String DFA160_specialS =
        "\14\uffff\1\0\12\uffff}>";
    static final String[] DFA160_transitionS = {
            "\1\4\20\uffff\1\4\11\uffff\2\4\6\uffff\1\14\31\uffff\1\15\12"+
            "\uffff\10\16\1\uffff\1\3\1\1\2\uffff\1\2\3\4\46\uffff\1\13",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA160_eot = DFA.unpackEncodedString(DFA160_eotS);
    static final short[] DFA160_eof = DFA.unpackEncodedString(DFA160_eofS);
    static final char[] DFA160_min = DFA.unpackEncodedStringToUnsignedChars(DFA160_minS);
    static final char[] DFA160_max = DFA.unpackEncodedStringToUnsignedChars(DFA160_maxS);
    static final short[] DFA160_accept = DFA.unpackEncodedString(DFA160_acceptS);
    static final short[] DFA160_special = DFA.unpackEncodedString(DFA160_specialS);
    static final short[][] DFA160_transition;

    static {
        int numStates = DFA160_transitionS.length;
        DFA160_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA160_transition[i] = DFA.unpackEncodedString(DFA160_transitionS[i]);
        }
    }

    class DFA160 extends DFA {

        public DFA160(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 160;
            this.eot = DFA160_eot;
            this.eof = DFA160_eof;
            this.min = DFA160_min;
            this.max = DFA160_max;
            this.accept = DFA160_accept;
            this.special = DFA160_special;
            this.transition = DFA160_transition;
        }
        public String getDescription() {
            return "1769:1: primary returns [Expression element] : (parex= parExpression | rubex= identifierSuffixRubbush | skw= 'super' supsuf= superSuffix | nt= nonTargetPrimary | nkw= 'new' cr= creator | morerubex= moreidentifierRuleSuffixRubbish | vt= voidType '.' clkw= 'class' | tref= type '.' clkww= 'class' );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA160_12 = input.LA(1);

                         
                        int index160_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred241_JavaP()) ) {s = 22;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index160_12);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 160, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA163_eotS =
        "\55\uffff";
    static final String DFA163_eofS =
        "\1\4\54\uffff";
    static final String DFA163_minS =
        "\1\60\1\0\1\uffff\1\0\51\uffff";
    static final String DFA163_maxS =
        "\1\u0084\1\0\1\uffff\1\0\51\uffff";
    static final String DFA163_acceptS =
        "\2\uffff\1\3\1\uffff\1\11\41\uffff\1\1\1\2\1\4\1\5\1\6\1\7\1\10";
    static final String DFA163_specialS =
        "\1\uffff\1\0\1\uffff\1\1\51\uffff}>";
    static final String[] DFA163_transitionS = {
            "\1\4\2\uffff\1\3\1\4\11\uffff\4\4\1\uffff\1\4\2\uffff\1\1\1"+
            "\4\1\uffff\1\4\5\uffff\1\4\10\uffff\1\4\1\uffff\1\2\1\4\6\uffff"+
            "\1\4\16\uffff\24\4",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA163_eot = DFA.unpackEncodedString(DFA163_eotS);
    static final short[] DFA163_eof = DFA.unpackEncodedString(DFA163_eofS);
    static final char[] DFA163_min = DFA.unpackEncodedStringToUnsignedChars(DFA163_minS);
    static final char[] DFA163_max = DFA.unpackEncodedStringToUnsignedChars(DFA163_maxS);
    static final short[] DFA163_accept = DFA.unpackEncodedString(DFA163_acceptS);
    static final short[] DFA163_special = DFA.unpackEncodedString(DFA163_specialS);
    static final short[][] DFA163_transition;

    static {
        int numStates = DFA163_transitionS.length;
        DFA163_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA163_transition[i] = DFA.unpackEncodedString(DFA163_transitionS[i]);
        }
    }

    class DFA163 extends DFA {

        public DFA163(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 163;
            this.eot = DFA163_eot;
            this.eof = DFA163_eof;
            this.min = DFA163_min;
            this.max = DFA163_max;
            this.accept = DFA163_accept;
            this.special = DFA163_special;
            this.transition = DFA163_transition;
        }
        public String getDescription() {
            return "1836:1: ( ( '[' ']' )+ '.' czkw= 'class' | arr= arrayAccessSuffixRubbish | arg= argumentsSuffixRubbish | '.' clkw= 'class' | '.' gen= explicitGenericInvocation | '.' thiskw= 'this' | '.' supkw= 'super' supsuf= superSuffix | '.' newkw= 'new' in= innerCreator )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA163_1 = input.LA(1);

                         
                        int index163_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_JavaP()) ) {s = 38;}

                        else if ( (synpred246_JavaP()) ) {s = 39;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index163_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA163_3 = input.LA(1);

                         
                        int index163_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred248_JavaP()) ) {s = 40;}

                        else if ( (synpred249_JavaP()) ) {s = 41;}

                        else if ( (synpred250_JavaP()) ) {s = 42;}

                        else if ( (synpred251_JavaP()) ) {s = 43;}

                        else if ( (synpred252_JavaP()) ) {s = 44;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index163_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 163, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA165_eotS =
        "\53\uffff";
    static final String DFA165_eofS =
        "\1\4\52\uffff";
    static final String DFA165_minS =
        "\1\60\1\0\1\uffff\1\0\47\uffff";
    static final String DFA165_maxS =
        "\1\u0084\1\0\1\uffff\1\0\47\uffff";
    static final String DFA165_acceptS =
        "\2\uffff\1\2\1\uffff\1\7\41\uffff\1\1\1\3\1\4\1\5\1\6";
    static final String DFA165_specialS =
        "\1\uffff\1\0\1\uffff\1\1\47\uffff}>";
    static final String[] DFA165_transitionS = {
            "\1\4\2\uffff\1\3\1\4\11\uffff\4\4\1\uffff\1\4\2\uffff\1\1\1"+
            "\4\1\uffff\1\4\5\uffff\1\4\10\uffff\1\4\1\uffff\1\2\1\4\6\uffff"+
            "\1\4\16\uffff\24\4",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA165_eot = DFA.unpackEncodedString(DFA165_eotS);
    static final short[] DFA165_eof = DFA.unpackEncodedString(DFA165_eofS);
    static final char[] DFA165_min = DFA.unpackEncodedStringToUnsignedChars(DFA165_minS);
    static final char[] DFA165_max = DFA.unpackEncodedStringToUnsignedChars(DFA165_maxS);
    static final short[] DFA165_accept = DFA.unpackEncodedString(DFA165_acceptS);
    static final short[] DFA165_special = DFA.unpackEncodedString(DFA165_specialS);
    static final short[][] DFA165_transition;

    static {
        int numStates = DFA165_transitionS.length;
        DFA165_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA165_transition[i] = DFA.unpackEncodedString(DFA165_transitionS[i]);
        }
    }

    class DFA165 extends DFA {

        public DFA165(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 165;
            this.eot = DFA165_eot;
            this.eof = DFA165_eof;
            this.min = DFA165_min;
            this.max = DFA165_max;
            this.accept = DFA165_accept;
            this.special = DFA165_special;
            this.transition = DFA165_transition;
        }
        public String getDescription() {
            return "1878:4: (arr= arrayAccessSuffixRubbish | arg= argumentsSuffixRubbish | '.' 'class' | '.' gen= explicitGenericInvocation | '.' supkw= 'super' supsuf= superSuffix | '.' newkw= 'new' in= innerCreator )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA165_1 = input.LA(1);

                         
                        int index165_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred254_JavaP()) ) {s = 38;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index165_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA165_3 = input.LA(1);

                         
                        int index165_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred256_JavaP()) ) {s = 39;}

                        else if ( (synpred257_JavaP()) ) {s = 40;}

                        else if ( (synpred258_JavaP()) ) {s = 41;}

                        else if ( (synpred259_JavaP()) ) {s = 42;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index165_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 165, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA166_eotS =
        "\46\uffff";
    static final String DFA166_eofS =
        "\1\1\45\uffff";
    static final String DFA166_minS =
        "\1\60\1\uffff\1\0\43\uffff";
    static final String DFA166_maxS =
        "\1\u0084\1\uffff\1\0\43\uffff";
    static final String DFA166_acceptS =
        "\1\uffff\1\2\43\uffff\1\1";
    static final String DFA166_specialS =
        "\2\uffff\1\0\43\uffff}>";
    static final String[] DFA166_transitionS = {
            "\1\1\2\uffff\2\1\11\uffff\4\1\1\uffff\1\1\2\uffff\1\2\1\1\1"+
            "\uffff\1\1\5\uffff\1\1\10\uffff\1\1\2\uffff\1\1\6\uffff\1\1"+
            "\16\uffff\24\1",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA166_eot = DFA.unpackEncodedString(DFA166_eotS);
    static final short[] DFA166_eof = DFA.unpackEncodedString(DFA166_eofS);
    static final char[] DFA166_min = DFA.unpackEncodedStringToUnsignedChars(DFA166_minS);
    static final char[] DFA166_max = DFA.unpackEncodedStringToUnsignedChars(DFA166_maxS);
    static final short[] DFA166_accept = DFA.unpackEncodedString(DFA166_acceptS);
    static final short[] DFA166_special = DFA.unpackEncodedString(DFA166_specialS);
    static final short[][] DFA166_transition;

    static {
        int numStates = DFA166_transitionS.length;
        DFA166_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA166_transition[i] = DFA.unpackEncodedString(DFA166_transitionS[i]);
        }
    }

    class DFA166 extends DFA {

        public DFA166(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 166;
            this.eot = DFA166_eot;
            this.eof = DFA166_eof;
            this.min = DFA166_min;
            this.max = DFA166_max;
            this.accept = DFA166_accept;
            this.special = DFA166_special;
            this.transition = DFA166_transition;
        }
        public String getDescription() {
            return "()+ loopback of 1921:10: (open= '[' arrex= expression close= ']' )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA166_2 = input.LA(1);

                         
                        int index166_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred260_JavaP()) ) {s = 37;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index166_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 166, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA172_eotS =
        "\16\uffff";
    static final String DFA172_eofS =
        "\16\uffff";
    static final String DFA172_minS =
        "\1\53\1\uffff\11\0\3\uffff";
    static final String DFA172_maxS =
        "\1\127\1\uffff\11\0\3\uffff";
    static final String DFA172_acceptS =
        "\1\uffff\1\1\11\uffff\1\2\1\3\1\4";
    static final String DFA172_specialS =
        "\2\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\3\uffff}>";
    static final String[] DFA172_transitionS = {
            "\1\2\22\uffff\1\1\21\uffff\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };

    static final short[] DFA172_eot = DFA.unpackEncodedString(DFA172_eotS);
    static final short[] DFA172_eof = DFA.unpackEncodedString(DFA172_eofS);
    static final char[] DFA172_min = DFA.unpackEncodedStringToUnsignedChars(DFA172_minS);
    static final char[] DFA172_max = DFA.unpackEncodedStringToUnsignedChars(DFA172_maxS);
    static final short[] DFA172_accept = DFA.unpackEncodedString(DFA172_acceptS);
    static final short[] DFA172_special = DFA.unpackEncodedString(DFA172_specialS);
    static final short[][] DFA172_transition;

    static {
        int numStates = DFA172_transitionS.length;
        DFA172_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA172_transition[i] = DFA.unpackEncodedString(DFA172_transitionS[i]);
        }
    }

    class DFA172 extends DFA {

        public DFA172(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 172;
            this.eot = DFA172_eot;
            this.eof = DFA172_eof;
            this.min = DFA172_min;
            this.max = DFA172_max;
            this.accept = DFA172_accept;
            this.special = DFA172_special;
            this.transition = DFA172_transition;
        }
        public String getDescription() {
            return "1931:1: creator returns [Expression element] : (targs= nonWildcardTypeArguments tx= createdName (dia= '<' '>' )? restx= classCreatorRest | tt= createdName ( '[' ']' )+ init= arrayInitializer | ttt= createdName ( '[' exx= expression ']' )+ ( '[' ']' )* | t= createdName (diam= '<' '>' )? rest= classCreatorRest );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA172_2 = input.LA(1);

                         
                        int index172_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_JavaP()) ) {s = 11;}

                        else if ( (synpred267_JavaP()) ) {s = 12;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index172_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA172_3 = input.LA(1);

                         
                        int index172_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_JavaP()) ) {s = 11;}

                        else if ( (synpred267_JavaP()) ) {s = 12;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index172_3);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA172_4 = input.LA(1);

                         
                        int index172_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_JavaP()) ) {s = 11;}

                        else if ( (synpred267_JavaP()) ) {s = 12;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index172_4);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA172_5 = input.LA(1);

                         
                        int index172_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_JavaP()) ) {s = 11;}

                        else if ( (synpred267_JavaP()) ) {s = 12;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index172_5);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA172_6 = input.LA(1);

                         
                        int index172_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_JavaP()) ) {s = 11;}

                        else if ( (synpred267_JavaP()) ) {s = 12;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index172_6);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA172_7 = input.LA(1);

                         
                        int index172_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_JavaP()) ) {s = 11;}

                        else if ( (synpred267_JavaP()) ) {s = 12;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index172_7);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA172_8 = input.LA(1);

                         
                        int index172_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_JavaP()) ) {s = 11;}

                        else if ( (synpred267_JavaP()) ) {s = 12;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index172_8);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA172_9 = input.LA(1);

                         
                        int index172_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_JavaP()) ) {s = 11;}

                        else if ( (synpred267_JavaP()) ) {s = 12;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index172_9);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA172_10 = input.LA(1);

                         
                        int index172_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_JavaP()) ) {s = 11;}

                        else if ( (synpred267_JavaP()) ) {s = 12;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index172_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 172, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA169_eotS =
        "\46\uffff";
    static final String DFA169_eofS =
        "\1\2\45\uffff";
    static final String DFA169_minS =
        "\1\60\1\0\44\uffff";
    static final String DFA169_maxS =
        "\1\u0084\1\0\44\uffff";
    static final String DFA169_acceptS =
        "\2\uffff\1\2\42\uffff\1\1";
    static final String DFA169_specialS =
        "\1\uffff\1\0\44\uffff}>";
    static final String[] DFA169_transitionS = {
            "\1\2\2\uffff\2\2\11\uffff\4\2\1\uffff\1\2\2\uffff\1\1\1\2\1"+
            "\uffff\1\2\5\uffff\1\2\10\uffff\1\2\2\uffff\1\2\6\uffff\1\2"+
            "\16\uffff\24\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA169_eot = DFA.unpackEncodedString(DFA169_eotS);
    static final short[] DFA169_eof = DFA.unpackEncodedString(DFA169_eofS);
    static final char[] DFA169_min = DFA.unpackEncodedStringToUnsignedChars(DFA169_minS);
    static final char[] DFA169_max = DFA.unpackEncodedStringToUnsignedChars(DFA169_maxS);
    static final short[] DFA169_accept = DFA.unpackEncodedString(DFA169_acceptS);
    static final short[] DFA169_special = DFA.unpackEncodedString(DFA169_specialS);
    static final short[][] DFA169_transition;

    static {
        int numStates = DFA169_transitionS.length;
        DFA169_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA169_transition[i] = DFA.unpackEncodedString(DFA169_transitionS[i]);
        }
    }

    class DFA169 extends DFA {

        public DFA169(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 169;
            this.eot = DFA169_eot;
            this.eof = DFA169_eof;
            this.min = DFA169_min;
            this.max = DFA169_max;
            this.accept = DFA169_accept;
            this.special = DFA169_special;
            this.transition = DFA169_transition;
        }
        public String getDescription() {
            return "()+ loopback of 1945:11: ( '[' exx= expression ']' )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA169_1 = input.LA(1);

                         
                        int index169_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_JavaP()) ) {s = 37;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index169_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 169, _s, input);
            error(nvae);
            throw nvae;
        }
    }
 

    public static final BitSet FOLLOW_Identifier_in_identifierRule96 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotations_in_compilationUnit126 = new BitSet(new long[]{0x0FE4808000000000L,0x0000000200000010L});
    public static final BitSet FOLLOW_packageDeclaration_in_compilationUnit142 = new BitSet(new long[]{0x0FE7808000000002L,0x0000000200000010L});
    public static final BitSet FOLLOW_importDeclaration_in_compilationUnit177 = new BitSet(new long[]{0x0FE7808000000002L,0x0000000200000010L});
    public static final BitSet FOLLOW_typeDeclaration_in_compilationUnit197 = new BitSet(new long[]{0x0FE5808000000002L,0x0000000200000010L});
    public static final BitSet FOLLOW_classOrInterfaceDeclaration_in_compilationUnit246 = new BitSet(new long[]{0x0FE5808000000002L,0x0000000200000010L});
    public static final BitSet FOLLOW_typeDeclaration_in_compilationUnit280 = new BitSet(new long[]{0x0FE5808000000002L,0x0000000200000010L});
    public static final BitSet FOLLOW_packageDeclaration_in_compilationUnit335 = new BitSet(new long[]{0x0FE7808000000002L,0x0000000200000010L});
    public static final BitSet FOLLOW_importDeclaration_in_compilationUnit384 = new BitSet(new long[]{0x0FE7808000000002L,0x0000000200000010L});
    public static final BitSet FOLLOW_typeDeclaration_in_compilationUnit402 = new BitSet(new long[]{0x0FE5808000000002L,0x0000000200000010L});
    public static final BitSet FOLLOW_47_in_packageDeclaration432 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_qualifiedName_in_packageDeclaration436 = new BitSet(new long[]{0x0001000000000000L});
    public static final BitSet FOLLOW_48_in_packageDeclaration438 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_49_in_importDeclaration474 = new BitSet(new long[]{0x0004080000000000L});
    public static final BitSet FOLLOW_50_in_importDeclaration478 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_qualifiedName_in_importDeclaration483 = new BitSet(new long[]{0x0009000000000000L});
    public static final BitSet FOLLOW_51_in_importDeclaration505 = new BitSet(new long[]{0x0010000000000000L});
    public static final BitSet FOLLOW_52_in_importDeclaration507 = new BitSet(new long[]{0x0001000000000000L});
    public static final BitSet FOLLOW_48_in_importDeclaration535 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classOrInterfaceDeclaration_in_typeDeclaration561 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_48_in_typeDeclaration573 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classOrInterfaceModifiers_in_classOrInterfaceDeclaration609 = new BitSet(new long[]{0x0FE4808000000000L,0x0000000200000010L});
    public static final BitSet FOLLOW_classDeclaration_in_classOrInterfaceDeclaration641 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceDeclaration_in_classOrInterfaceDeclaration675 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classOrInterfaceModifier_in_classOrInterfaceModifiers735 = new BitSet(new long[]{0x07E4000000000002L,0x0000000200000000L});
    public static final BitSet FOLLOW_annotation_in_classOrInterfaceModifier767 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_53_in_classOrInterfaceModifier781 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_54_in_classOrInterfaceModifier797 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_55_in_classOrInterfaceModifier810 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_56_in_classOrInterfaceModifier825 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_50_in_classOrInterfaceModifier839 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_57_in_classOrInterfaceModifier855 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_58_in_classOrInterfaceModifier872 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifier_in_modifiers907 = new BitSet(new long[]{0x07E4000000000002L,0x0000000200007C00L});
    public static final BitSet FOLLOW_normalClassDeclaration_in_classDeclaration939 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumDeclaration_in_classDeclaration953 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_59_in_normalClassDeclaration980 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_nameAndParams_in_normalClassDeclaration984 = new BitSet(new long[]{0x3000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_60_in_normalClassDeclaration999 = new BitSet(new long[]{0x0000080000000000L,0x0000000000FF0000L});
    public static final BitSet FOLLOW_type_in_normalClassDeclaration1003 = new BitSet(new long[]{0x3000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_61_in_normalClassDeclaration1032 = new BitSet(new long[]{0x0000080000000000L,0x0000000000FF0000L});
    public static final BitSet FOLLOW_typeList_in_normalClassDeclaration1036 = new BitSet(new long[]{0x3000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_classBody_in_normalClassDeclaration1065 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createClassHereBecauseANTLRisAnnoying_in_nameAndParams1102 = new BitSet(new long[]{0x4000000000000002L});
    public static final BitSet FOLLOW_typeParameters_in_nameAndParams1109 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifierRule_in_createClassHereBecauseANTLRisAnnoying1133 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_62_in_typeParameters1161 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_typeParameter_in_typeParameters1165 = new BitSet(new long[]{0x8000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_63_in_typeParameters1169 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_typeParameter_in_typeParameters1173 = new BitSet(new long[]{0x8000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_64_in_typeParameters1178 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifierRule_in_typeParameter1207 = new BitSet(new long[]{0x1000000000000002L});
    public static final BitSet FOLLOW_60_in_typeParameter1213 = new BitSet(new long[]{0x0000080000000000L,0x0000000000FF0000L});
    public static final BitSet FOLLOW_typeBound_in_typeParameter1217 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_typeBound1259 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000002L});
    public static final BitSet FOLLOW_65_in_typeBound1282 = new BitSet(new long[]{0x0000080000000000L,0x0000000000FF0000L});
    public static final BitSet FOLLOW_type_in_typeBound1286 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000002L});
    public static final BitSet FOLLOW_ENUM_in_enumDeclaration1336 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_identifierRule_in_enumDeclaration1340 = new BitSet(new long[]{0x2000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_61_in_enumDeclaration1363 = new BitSet(new long[]{0x0000080000000000L,0x0000000000FF0000L});
    public static final BitSet FOLLOW_typeList_in_enumDeclaration1367 = new BitSet(new long[]{0x2000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_enumBody_in_enumDeclaration1439 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_66_in_enumBody1469 = new BitSet(new long[]{0x8001080000000000L,0x0000000200000008L});
    public static final BitSet FOLLOW_enumConstants_in_enumBody1474 = new BitSet(new long[]{0x8001000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_63_in_enumBody1492 = new BitSet(new long[]{0x0001000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_enumBodyDeclarations_in_enumBody1498 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_67_in_enumBody1504 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumConstant_in_enumConstants1529 = new BitSet(new long[]{0x8000000000000002L});
    public static final BitSet FOLLOW_63_in_enumConstants1534 = new BitSet(new long[]{0x0000080000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_enumConstant_in_enumConstants1538 = new BitSet(new long[]{0x8000000000000002L});
    public static final BitSet FOLLOW_annotations_in_enumConstant1564 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_identifierRule_in_enumConstant1569 = new BitSet(new long[]{0x3000000000000002L,0x0000000004000004L});
    public static final BitSet FOLLOW_arguments_in_enumConstant1576 = new BitSet(new long[]{0x3000000000000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_classBody_in_enumConstant1585 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_48_in_enumBodyDeclarations1612 = new BitSet(new long[]{0x07E5000000000002L,0x0000000200007C04L});
    public static final BitSet FOLLOW_classBodyDeclaration_in_enumBodyDeclarations1619 = new BitSet(new long[]{0x07E5000000000002L,0x0000000200007C04L});
    public static final BitSet FOLLOW_normalInterfaceDeclaration_in_interfaceDeclaration1652 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationTypeDeclaration_in_interfaceDeclaration1666 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_68_in_normalInterfaceDeclaration1693 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_identifierRule_in_normalInterfaceDeclaration1697 = new BitSet(new long[]{0x7000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_typeParameters_in_normalInterfaceDeclaration1713 = new BitSet(new long[]{0x3000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_60_in_normalInterfaceDeclaration1730 = new BitSet(new long[]{0x0000080000000000L,0x0000000000FF0000L});
    public static final BitSet FOLLOW_typeList_in_normalInterfaceDeclaration1734 = new BitSet(new long[]{0x3000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_classBody_in_normalInterfaceDeclaration1772 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_typeList1810 = new BitSet(new long[]{0x8000000000000002L});
    public static final BitSet FOLLOW_63_in_typeList1814 = new BitSet(new long[]{0x0000080000000000L,0x0000000000FF0000L});
    public static final BitSet FOLLOW_type_in_typeList1818 = new BitSet(new long[]{0x8000000000000002L});
    public static final BitSet FOLLOW_66_in_classBody1845 = new BitSet(new long[]{0x07E5000000000000L,0x0000000200007C0CL});
    public static final BitSet FOLLOW_classBodyDeclaration_in_classBody1852 = new BitSet(new long[]{0x07E5000000000000L,0x0000000200007C0CL});
    public static final BitSet FOLLOW_67_in_classBody1858 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_66_in_interfaceBody1881 = new BitSet(new long[]{0x07E5000000000000L,0x0000000200007C0CL});
    public static final BitSet FOLLOW_interfaceBodyDeclaration_in_interfaceBody1900 = new BitSet(new long[]{0x07E5000000000000L,0x0000000200007C0CL});
    public static final BitSet FOLLOW_67_in_interfaceBody1946 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_48_in_classBodyDeclaration1979 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_50_in_classBodyDeclaration1993 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_block_in_classBodyDeclaration1998 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifiers_in_classBodyDeclaration2012 = new BitSet(new long[]{0x4FE4888000000000L,0x0000000200FF0030L});
    public static final BitSet FOLLOW_memberDecl_in_classBodyDeclaration2016 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_genericMethodOrConstructorDecl_in_memberDecl2050 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_memberDeclaration_in_memberDecl2064 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_voidMethodDeclaration_in_memberDecl2078 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constructorDeclaration_in_memberDecl2092 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceDeclaration_in_memberDecl2106 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classDeclaration_in_memberDecl2120 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_voidType_in_voidMethodDeclaration2155 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_identifierRule_in_voidMethodDeclaration2159 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_voidMethodDeclaratorRest_in_voidMethodDeclaration2169 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_69_in_voidType2198 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifierRule_in_constructorDeclaration2234 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_constructorDeclaratorRest_in_constructorDeclaration2263 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_methodDeclaration_in_memberDeclaration2285 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fieldDeclaration_in_memberDeclaration2299 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeParameters_in_genericMethodOrConstructorDecl2326 = new BitSet(new long[]{0x0000080000000000L,0x0000000000FF0020L});
    public static final BitSet FOLLOW_genericMethodOrConstructorRest_in_genericMethodOrConstructorDecl2330 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_genericMethodOrConstructorRest2371 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_69_in_genericMethodOrConstructorRest2376 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_identifierRule_in_genericMethodOrConstructorRest2383 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_methodDeclaratorRest_in_genericMethodOrConstructorRest2395 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifierRule_in_genericMethodOrConstructorRest2407 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_constructorDeclaratorRest_in_genericMethodOrConstructorRest2419 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_methodDeclaration2449 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_identifierRule_in_methodDeclaration2453 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_methodDeclaratorRest_in_methodDeclaration2465 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_fieldDeclaration2490 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_variableDeclarators_in_fieldDeclaration2496 = new BitSet(new long[]{0x0001000000000000L});
    public static final BitSet FOLLOW_48_in_fieldDeclaration2500 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifiers_in_interfaceBodyDeclaration2525 = new BitSet(new long[]{0x4FE4888000000000L,0x0000000200FF0030L});
    public static final BitSet FOLLOW_interfaceMemberDecl_in_interfaceBodyDeclaration2529 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_48_in_interfaceBodyDeclaration2541 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceMethodOrFieldDecl_in_interfaceMemberDecl2566 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceGenericMethodDecl_in_interfaceMemberDecl2580 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_voidInterfaceMethodDeclaration_in_interfaceMemberDecl2594 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceDeclaration_in_interfaceMemberDecl2608 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classDeclaration_in_interfaceMemberDecl2622 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_voidType_in_voidInterfaceMethodDeclaration2654 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_identifierRule_in_voidInterfaceMethodDeclaration2658 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_voidInterfaceMethodDeclaratorRest_in_voidInterfaceMethodDeclaration2669 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceConstant_in_interfaceMethodOrFieldDecl2695 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceMethod_in_interfaceMethodOrFieldDecl2709 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_interfaceConstant2737 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_constantDeclarator_in_interfaceConstant2743 = new BitSet(new long[]{0x8001000000000000L});
    public static final BitSet FOLLOW_63_in_interfaceConstant2747 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_constantDeclarator_in_interfaceConstant2751 = new BitSet(new long[]{0x8001000000000000L});
    public static final BitSet FOLLOW_48_in_interfaceConstant2757 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_interfaceMethod2782 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_identifierRule_in_interfaceMethod2786 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_interfaceMethodDeclaratorRest_in_interfaceMethod2798 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameters_in_methodDeclaratorRest2821 = new BitSet(new long[]{0x0005000000000000L,0x0000000000000144L});
    public static final BitSet FOLLOW_70_in_methodDeclaratorRest2845 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_71_in_methodDeclaratorRest2847 = new BitSet(new long[]{0x0005000000000000L,0x0000000000000144L});
    public static final BitSet FOLLOW_72_in_methodDeclaratorRest2874 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_qualifiedNameList_in_methodDeclaratorRest2878 = new BitSet(new long[]{0x0005000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_methodBody_in_methodDeclaratorRest2898 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_48_in_methodDeclaratorRest2914 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameters_in_voidMethodDeclaratorRest2957 = new BitSet(new long[]{0x0005000000000000L,0x0000000000000104L});
    public static final BitSet FOLLOW_72_in_voidMethodDeclaratorRest2973 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_qualifiedNameList_in_voidMethodDeclaratorRest2977 = new BitSet(new long[]{0x0005000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_methodBody_in_voidMethodDeclaratorRest2997 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_48_in_voidMethodDeclaratorRest3013 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameters_in_interfaceMethodDeclaratorRest3060 = new BitSet(new long[]{0x0001000000000000L,0x0000000000000140L});
    public static final BitSet FOLLOW_70_in_interfaceMethodDeclaratorRest3072 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_71_in_interfaceMethodDeclaratorRest3074 = new BitSet(new long[]{0x0001000000000000L,0x0000000000000140L});
    public static final BitSet FOLLOW_72_in_interfaceMethodDeclaratorRest3100 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_qualifiedNameList_in_interfaceMethodDeclaratorRest3104 = new BitSet(new long[]{0x0001000000000000L});
    public static final BitSet FOLLOW_48_in_interfaceMethodDeclaratorRest3110 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeParameters_in_interfaceGenericMethodDecl3142 = new BitSet(new long[]{0x0000080000000000L,0x0000000000FF0020L});
    public static final BitSet FOLLOW_type_in_interfaceGenericMethodDecl3145 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_69_in_interfaceGenericMethodDecl3149 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_identifierRule_in_interfaceGenericMethodDecl3152 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_interfaceMethodDeclaratorRest_in_interfaceGenericMethodDecl3162 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameters_in_voidInterfaceMethodDeclaratorRest3183 = new BitSet(new long[]{0x0001000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_72_in_voidInterfaceMethodDeclaratorRest3193 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_qualifiedNameList_in_voidInterfaceMethodDeclaratorRest3197 = new BitSet(new long[]{0x0001000000000000L});
    public static final BitSet FOLLOW_48_in_voidInterfaceMethodDeclaratorRest3209 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameters_in_constructorDeclaratorRest3230 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000104L});
    public static final BitSet FOLLOW_72_in_constructorDeclaratorRest3239 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_qualifiedNameList_in_constructorDeclaratorRest3243 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000104L});
    public static final BitSet FOLLOW_constructorBody_in_constructorDeclaratorRest3256 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifierRule_in_constantDeclarator3291 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000240L});
    public static final BitSet FOLLOW_70_in_constantDeclarator3295 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_71_in_constantDeclarator3297 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000240L});
    public static final BitSet FOLLOW_73_in_constantDeclarator3303 = new BitSet(new long[]{0x0000081802000100L,0x80000001E6FF0024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_variableInitializer_in_constantDeclarator3307 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableDeclarator_in_variableDeclarators3342 = new BitSet(new long[]{0x8000000000000002L});
    public static final BitSet FOLLOW_63_in_variableDeclarators3346 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_variableDeclarator_in_variableDeclarators3350 = new BitSet(new long[]{0x8000000000000002L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_variableDeclarator3383 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000200L});
    public static final BitSet FOLLOW_73_in_variableDeclarator3401 = new BitSet(new long[]{0x0000081802000100L,0x80000001E6FF0024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_variableInitializer_in_variableDeclarator3405 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifierRule_in_variableDeclaratorId3440 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000040L});
    public static final BitSet FOLLOW_70_in_variableDeclaratorId3443 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_71_in_variableDeclaratorId3445 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000040L});
    public static final BitSet FOLLOW_arrayInitializer_in_variableInitializer3476 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_variableInitializer3490 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_66_in_arrayInitializer3515 = new BitSet(new long[]{0x0000081802000100L,0x80000001E6FF002CL,0x00000000000000F9L});
    public static final BitSet FOLLOW_variableInitializer_in_arrayInitializer3522 = new BitSet(new long[]{0x8000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_63_in_arrayInitializer3526 = new BitSet(new long[]{0x0000081802000100L,0x80000001E6FF0024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_variableInitializer_in_arrayInitializer3530 = new BitSet(new long[]{0x8000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_63_in_arrayInitializer3536 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_67_in_arrayInitializer3543 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classOrInterfaceModifier_in_modifier3574 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_74_in_modifier3586 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_75_in_modifier3598 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_76_in_modifier3610 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_77_in_modifier3622 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_78_in_modifier3634 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifierRule_in_enumConstantName3661 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualifiedName_in_typeName3688 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classOrInterfaceType_in_type3718 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000040L});
    public static final BitSet FOLLOW_70_in_type3721 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_71_in_type3723 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000040L});
    public static final BitSet FOLLOW_primitiveType_in_type3745 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000040L});
    public static final BitSet FOLLOW_70_in_type3748 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_71_in_type3750 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000040L});
    public static final BitSet FOLLOW_type_in_possibleUnionType3779 = new BitSet(new long[]{0x0000000000000002L,0x0000000000008000L});
    public static final BitSet FOLLOW_79_in_possibleUnionType3787 = new BitSet(new long[]{0x0000080000000000L,0x0000000000FF0000L});
    public static final BitSet FOLLOW_type_in_possibleUnionType3791 = new BitSet(new long[]{0x0000000000000002L,0x0000000000008000L});
    public static final BitSet FOLLOW_identifierRule_in_classOrInterfaceType3828 = new BitSet(new long[]{0x4008000000000002L,0x0000000000000002L});
    public static final BitSet FOLLOW_typeArguments_in_classOrInterfaceType3855 = new BitSet(new long[]{0x0008000000000002L,0x0000000000000002L});
    public static final BitSet FOLLOW_51_in_classOrInterfaceType3882 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_identifierRule_in_classOrInterfaceType3886 = new BitSet(new long[]{0x4008000000000002L,0x0000000000000002L});
    public static final BitSet FOLLOW_typeArguments_in_classOrInterfaceType3913 = new BitSet(new long[]{0x0008000000000002L,0x0000000000000002L});
    public static final BitSet FOLLOW_65_in_classOrInterfaceType3943 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_classOrInterfaceType_in_classOrInterfaceType3947 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_80_in_primitiveType3986 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_81_in_primitiveType3998 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_82_in_primitiveType4010 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_83_in_primitiveType4022 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_84_in_primitiveType4034 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_85_in_primitiveType4046 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_86_in_primitiveType4058 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_87_in_primitiveType4070 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_57_in_variableModifier4095 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_variableModifier4109 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_62_in_typeArguments4138 = new BitSet(new long[]{0x0000080000000000L,0x0000000001FF0000L});
    public static final BitSet FOLLOW_typeArgument_in_typeArguments4150 = new BitSet(new long[]{0x8000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_63_in_typeArguments4163 = new BitSet(new long[]{0x0000080000000000L,0x0000000001FF0000L});
    public static final BitSet FOLLOW_typeArgument_in_typeArguments4167 = new BitSet(new long[]{0x8000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_64_in_typeArguments4181 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_typeArgument4210 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_88_in_typeArgument4222 = new BitSet(new long[]{0x1000000000000002L,0x0000000002000000L});
    public static final BitSet FOLLOW_60_in_typeArgument4257 = new BitSet(new long[]{0x0000080000000000L,0x0000000000FF0000L});
    public static final BitSet FOLLOW_89_in_typeArgument4261 = new BitSet(new long[]{0x0000080000000000L,0x0000000000FF0000L});
    public static final BitSet FOLLOW_type_in_typeArgument4277 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualifiedName_in_qualifiedNameList4338 = new BitSet(new long[]{0x8000000000000002L});
    public static final BitSet FOLLOW_63_in_qualifiedNameList4343 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_qualifiedName_in_qualifiedNameList4347 = new BitSet(new long[]{0x8000000000000002L});
    public static final BitSet FOLLOW_90_in_formalParameters4378 = new BitSet(new long[]{0x0200080000000000L,0x0000000208FF0000L});
    public static final BitSet FOLLOW_formalParameterDecls_in_formalParameters4383 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_91_in_formalParameters4389 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifiers_in_formalParameterDecls4414 = new BitSet(new long[]{0x0000080000000000L,0x0000000000FF0000L});
    public static final BitSet FOLLOW_type_in_formalParameterDecls4418 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_formalParameterDecls4422 = new BitSet(new long[]{0x8000000000000002L});
    public static final BitSet FOLLOW_63_in_formalParameterDecls4433 = new BitSet(new long[]{0x0200080000000000L,0x0000000200FF0000L});
    public static final BitSet FOLLOW_formalParameterDecls_in_formalParameterDecls4437 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifiers_in_formalParameterDecls4463 = new BitSet(new long[]{0x0000080000000000L,0x0000000000FF0000L});
    public static final BitSet FOLLOW_type_in_formalParameterDecls4467 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_92_in_formalParameterDecls4469 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_formalParameterDecls4473 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_methodBody4509 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_66_in_constructorBody4534 = new BitSet(new long[]{0x4FE5899802000100L,0x80007DEBE6FF083CL,0x00000000000000F9L});
    public static final BitSet FOLLOW_explicitConstructorInvocation_in_constructorBody4550 = new BitSet(new long[]{0x0FE5899802000100L,0x80007DEBE6FF083CL,0x00000000000000F9L});
    public static final BitSet FOLLOW_blockStatement_in_constructorBody4568 = new BitSet(new long[]{0x0FE5899802000100L,0x80007DEBE6FF083CL,0x00000000000000F9L});
    public static final BitSet FOLLOW_67_in_constructorBody4574 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_explicitConstructorInvocation4601 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_93_in_explicitConstructorInvocation4604 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_arguments_in_explicitConstructorInvocation4608 = new BitSet(new long[]{0x0001000000000000L});
    public static final BitSet FOLLOW_48_in_explicitConstructorInvocation4610 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primary_in_explicitConstructorInvocation4630 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_51_in_explicitConstructorInvocation4632 = new BitSet(new long[]{0x4000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_explicitConstructorInvocation4638 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_89_in_explicitConstructorInvocation4641 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_arguments_in_explicitConstructorInvocation4645 = new BitSet(new long[]{0x0001000000000000L});
    public static final BitSet FOLLOW_48_in_explicitConstructorInvocation4647 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifierRule_in_qualifiedName4685 = new BitSet(new long[]{0x0008000000000002L});
    public static final BitSet FOLLOW_51_in_qualifiedName4689 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_identifierRule_in_qualifiedName4693 = new BitSet(new long[]{0x0008000000000002L});
    public static final BitSet FOLLOW_integerLiteral_in_literal4722 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FloatingPointLiteral_in_literal4736 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CharacterLiteral_in_literal4750 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_StringLiteral_in_literal4764 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_booleanLiteral_in_literal4778 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_94_in_literal4790 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IntegerLiteral_in_integerLiteral4823 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_95_in_booleanLiteral4848 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_96_in_booleanLiteral4860 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_annotations4894 = new BitSet(new long[]{0x0000000000000002L,0x0000000200000000L});
    public static final BitSet FOLLOW_97_in_annotation4921 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_annotationName_in_annotation4925 = new BitSet(new long[]{0x0000000000000002L,0x0000000004000000L});
    public static final BitSet FOLLOW_90_in_annotation4931 = new BitSet(new long[]{0x0000081802000100L,0x80000003EEFF0024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_elementValuePairs_in_annotation4935 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_elementValue_in_annotation4939 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_91_in_annotation4944 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifierRule_in_annotationName4964 = new BitSet(new long[]{0x0008000000000002L});
    public static final BitSet FOLLOW_51_in_annotationName4967 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_identifierRule_in_annotationName4969 = new BitSet(new long[]{0x0008000000000002L});
    public static final BitSet FOLLOW_elementValuePair_in_elementValuePairs4990 = new BitSet(new long[]{0x8000000000000002L});
    public static final BitSet FOLLOW_63_in_elementValuePairs4993 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_elementValuePair_in_elementValuePairs4995 = new BitSet(new long[]{0x8000000000000002L});
    public static final BitSet FOLLOW_identifierRule_in_elementValuePair5016 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_73_in_elementValuePair5018 = new BitSet(new long[]{0x0000081802000100L,0x80000003E6FF0024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_elementValue_in_elementValuePair5020 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalExpression_in_elementValue5039 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_elementValue5049 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValueArrayInitializer_in_elementValue5059 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_66_in_elementValueArrayInitializer5078 = new BitSet(new long[]{0x8000081802000100L,0x80000003E6FF002CL,0x00000000000000F9L});
    public static final BitSet FOLLOW_elementValue_in_elementValueArrayInitializer5081 = new BitSet(new long[]{0x8000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_63_in_elementValueArrayInitializer5084 = new BitSet(new long[]{0x0000081802000100L,0x80000003E6FF0024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_elementValue_in_elementValueArrayInitializer5086 = new BitSet(new long[]{0x8000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_63_in_elementValueArrayInitializer5093 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_67_in_elementValueArrayInitializer5097 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_97_in_annotationTypeDeclaration5120 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_68_in_annotationTypeDeclaration5122 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_identifierRule_in_annotationTypeDeclaration5126 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_annotationTypeBody_in_annotationTypeDeclaration5158 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_66_in_annotationTypeBody5187 = new BitSet(new long[]{0x07E5000000000000L,0x0000000200007C0CL});
    public static final BitSet FOLLOW_annotationTypeElementDeclaration_in_annotationTypeBody5190 = new BitSet(new long[]{0x07E5000000000000L,0x0000000200007C0CL});
    public static final BitSet FOLLOW_67_in_annotationTypeBody5194 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifiers_in_annotationTypeElementDeclaration5219 = new BitSet(new long[]{0x0FE4888000000000L,0x0000000200FF0010L});
    public static final BitSet FOLLOW_annotationTypeElementRest_in_annotationTypeElementDeclaration5223 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_annotationTypeElementRest5257 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_annotationMethodOrConstantRest_in_annotationTypeElementRest5261 = new BitSet(new long[]{0x0001000000000000L});
    public static final BitSet FOLLOW_48_in_annotationTypeElementRest5271 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_normalClassDeclaration_in_annotationTypeElementRest5283 = new BitSet(new long[]{0x0001000000000002L});
    public static final BitSet FOLLOW_48_in_annotationTypeElementRest5286 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_normalInterfaceDeclaration_in_annotationTypeElementRest5299 = new BitSet(new long[]{0x0001000000000002L});
    public static final BitSet FOLLOW_48_in_annotationTypeElementRest5302 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumDeclaration_in_annotationTypeElementRest5315 = new BitSet(new long[]{0x0001000000000002L});
    public static final BitSet FOLLOW_48_in_annotationTypeElementRest5319 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationTypeDeclaration_in_annotationTypeElementRest5332 = new BitSet(new long[]{0x0001000000000002L});
    public static final BitSet FOLLOW_48_in_annotationTypeElementRest5336 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationMethodRest_in_annotationMethodOrConstantRest5363 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationConstantRest_in_annotationMethodOrConstantRest5378 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifierRule_in_annotationMethodRest5407 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_90_in_annotationMethodRest5409 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_91_in_annotationMethodRest5411 = new BitSet(new long[]{0x0000000000000002L,0x0000000000004000L});
    public static final BitSet FOLLOW_defaultValue_in_annotationMethodRest5424 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableDeclarators_in_annotationConstantRest5454 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_78_in_defaultValue5483 = new BitSet(new long[]{0x0000081802000100L,0x80000003E6FF0024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_elementValue_in_defaultValue5485 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_66_in_block5510 = new BitSet(new long[]{0x0FE5899802000100L,0x80007DEBE6FF083CL,0x00000000000000F9L});
    public static final BitSet FOLLOW_blockStatement_in_block5517 = new BitSet(new long[]{0x0FE5899802000100L,0x80007DEBE6FF083CL,0x00000000000000F9L});
    public static final BitSet FOLLOW_67_in_block5523 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localVariableDeclarationStatement_in_blockStatement5552 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classOrInterfaceDeclaration_in_blockStatement5566 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statement_in_blockStatement5580 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localVariableDeclaration_in_localVariableDeclarationStatement5608 = new BitSet(new long[]{0x0001000000000000L});
    public static final BitSet FOLLOW_48_in_localVariableDeclarationStatement5612 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifiers_in_localVariableDeclaration5637 = new BitSet(new long[]{0x0000080000000000L,0x0000000000FF0000L});
    public static final BitSet FOLLOW_type_in_localVariableDeclaration5641 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_variableDeclarators_in_localVariableDeclaration5647 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifier_in_variableModifiers5689 = new BitSet(new long[]{0x0200000000000002L,0x0000000200000000L});
    public static final BitSet FOLLOW_block_in_statement5720 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASSERT_in_statement5732 = new BitSet(new long[]{0x0000081802000100L,0x80000001E6FF0024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_expression_in_statement5736 = new BitSet(new long[]{0x0001000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_98_in_statement5740 = new BitSet(new long[]{0x0000081802000100L,0x80000001E6FF0024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_expression_in_statement5744 = new BitSet(new long[]{0x0001000000000000L});
    public static final BitSet FOLLOW_48_in_statement5750 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_99_in_statement5762 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_parExpression_in_statement5766 = new BitSet(new long[]{0x0FE5899802000100L,0x80007DEBE6FF0834L,0x00000000000000F9L});
    public static final BitSet FOLLOW_statement_in_statement5770 = new BitSet(new long[]{0x0000000000000002L,0x0000001000000000L});
    public static final BitSet FOLLOW_100_in_statement5782 = new BitSet(new long[]{0x0FE5899802000100L,0x80007DEBE6FF0834L,0x00000000000000F9L});
    public static final BitSet FOLLOW_statement_in_statement5786 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_101_in_statement5811 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_90_in_statement5813 = new BitSet(new long[]{0x0201081802000100L,0x80000003E6FF0024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_forControl_in_statement5817 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_91_in_statement5819 = new BitSet(new long[]{0x0FE5899802000100L,0x80007DEBE6FF0834L,0x00000000000000F9L});
    public static final BitSet FOLLOW_statement_in_statement5823 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_102_in_statement5845 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_parExpression_in_statement5849 = new BitSet(new long[]{0x0FE5899802000100L,0x80007DEBE6FF0834L,0x00000000000000F9L});
    public static final BitSet FOLLOW_statement_in_statement5853 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_103_in_statement5875 = new BitSet(new long[]{0x0FE5899802000100L,0x80007DEBE6FF0834L,0x00000000000000F9L});
    public static final BitSet FOLLOW_statement_in_statement5879 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_102_in_statement5883 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_parExpression_in_statement5887 = new BitSet(new long[]{0x0001000000000000L});
    public static final BitSet FOLLOW_48_in_statement5889 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_104_in_statement5911 = new BitSet(new long[]{0x0004000000000000L,0x0000000004000004L});
    public static final BitSet FOLLOW_resources_in_statement5915 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_block_in_statement5920 = new BitSet(new long[]{0x0000000000000002L,0x0000820000000000L});
    public static final BitSet FOLLOW_catches_in_statement5944 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_105_in_statement5948 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_block_in_statement5952 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_catches_in_statement5979 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_105_in_statement5997 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_block_in_statement6001 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_106_in_statement6037 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_parExpression_in_statement6041 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_66_in_statement6065 = new BitSet(new long[]{0x0000000000000000L,0x0001000000004008L});
    public static final BitSet FOLLOW_switchBlockStatementGroups_in_statement6069 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_67_in_statement6072 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_75_in_statement6084 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_parExpression_in_statement6088 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_block_in_statement6092 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_107_in_statement6116 = new BitSet(new long[]{0x0001081802000100L,0x80000001E6FF0024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_expression_in_statement6145 = new BitSet(new long[]{0x0001000000000000L});
    public static final BitSet FOLLOW_48_in_statement6151 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_108_in_statement6163 = new BitSet(new long[]{0x0000081802000100L,0x80000001E6FF0024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_expression_in_statement6167 = new BitSet(new long[]{0x0001000000000000L});
    public static final BitSet FOLLOW_48_in_statement6187 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_109_in_statement6199 = new BitSet(new long[]{0x0001080000000000L});
    public static final BitSet FOLLOW_identifierRule_in_statement6222 = new BitSet(new long[]{0x0001000000000000L});
    public static final BitSet FOLLOW_48_in_statement6228 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_110_in_statement6240 = new BitSet(new long[]{0x0001080000000000L});
    public static final BitSet FOLLOW_identifierRule_in_statement6263 = new BitSet(new long[]{0x0001000000000000L});
    public static final BitSet FOLLOW_48_in_statement6269 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_48_in_statement6279 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statementExpression_in_statement6293 = new BitSet(new long[]{0x0001000000000000L});
    public static final BitSet FOLLOW_48_in_statement6297 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifierRule_in_statement6309 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_98_in_statement6311 = new BitSet(new long[]{0x0FE5899802000100L,0x80007DEBE6FF0834L,0x00000000000000F9L});
    public static final BitSet FOLLOW_statement_in_statement6315 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_90_in_resources6338 = new BitSet(new long[]{0x0200080000000000L,0x0000000200FF0000L});
    public static final BitSet FOLLOW_localVariableDeclaration_in_resources6357 = new BitSet(new long[]{0x0001000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_48_in_resources6372 = new BitSet(new long[]{0x0200080000000000L,0x0000000200FF0000L});
    public static final BitSet FOLLOW_localVariableDeclaration_in_resources6378 = new BitSet(new long[]{0x0001000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_48_in_resources6395 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_91_in_resources6405 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_catchClause_in_catches6437 = new BitSet(new long[]{0x0000000000000002L,0x0000800000000000L});
    public static final BitSet FOLLOW_111_in_catchClause6470 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_90_in_catchClause6472 = new BitSet(new long[]{0x0200080000000000L,0x0000000200FF0000L});
    public static final BitSet FOLLOW_catchParameter_in_catchClause6476 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_91_in_catchClause6478 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_block_in_catchClause6482 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifiers_in_catchParameter6523 = new BitSet(new long[]{0x0200080000000000L,0x0000000200FF0000L});
    public static final BitSet FOLLOW_possibleUnionType_in_catchParameter6527 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_catchParameter6531 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifiers_in_formalParameter6572 = new BitSet(new long[]{0x0000080000000000L,0x0000000000FF0000L});
    public static final BitSet FOLLOW_type_in_formalParameter6576 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_formalParameter6580 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switchCase_in_switchBlockStatementGroups6621 = new BitSet(new long[]{0x0000000000000002L,0x0001000000004000L});
    public static final BitSet FOLLOW_switchLabel_in_switchCase6656 = new BitSet(new long[]{0x0FE5899802000102L,0x80007DEBE6FF0834L,0x00000000000000F9L});
    public static final BitSet FOLLOW_blockStatement_in_switchCase6660 = new BitSet(new long[]{0x0FE5899802000102L,0x80007DEBE6FF0834L,0x00000000000000F9L});
    public static final BitSet FOLLOW_112_in_switchLabel6688 = new BitSet(new long[]{0x0000081802000100L,0x80000001E6FF0024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_constantExpression_in_switchLabel6692 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_98_in_switchLabel6694 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_112_in_switchLabel6706 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_enumConstantName_in_switchLabel6710 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_98_in_switchLabel6712 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_78_in_switchLabel6724 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_98_in_switchLabel6726 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enhancedForControl_in_forControl6764 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forInit_in_forControl6778 = new BitSet(new long[]{0x0001000000000000L});
    public static final BitSet FOLLOW_48_in_forControl6781 = new BitSet(new long[]{0x0001081802000100L,0x80000001E6FF0024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_expression_in_forControl6785 = new BitSet(new long[]{0x0001000000000000L});
    public static final BitSet FOLLOW_48_in_forControl6788 = new BitSet(new long[]{0x0200081802000102L,0x80000003E6FF0024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_forUpdate_in_forControl6792 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localVariableDeclaration_in_forInit6824 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionList_in_forInit6838 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localVariableDeclaration_in_enhancedForControl6869 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_98_in_enhancedForControl6871 = new BitSet(new long[]{0x0000081802000100L,0x80000001E6FF0024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_expression_in_enhancedForControl6875 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionList_in_forUpdate6902 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_90_in_parExpression6939 = new BitSet(new long[]{0x0000081802000100L,0x80000001E6FF0024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_expression_in_parExpression6943 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_91_in_parExpression6949 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_expressionList6986 = new BitSet(new long[]{0x8000000000000002L});
    public static final BitSet FOLLOW_63_in_expressionList7008 = new BitSet(new long[]{0x0000081802000100L,0x80000001E6FF0024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_expression_in_expressionList7012 = new BitSet(new long[]{0x8000000000000002L});
    public static final BitSet FOLLOW_expression_in_statementExpression7041 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_constantExpression7068 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalExpression_in_expression7099 = new BitSet(new long[]{0x4000000000000002L,0x01FE000000000201L});
    public static final BitSet FOLLOW_assignmentOperator_in_expression7106 = new BitSet(new long[]{0x0000081802000100L,0x80000001E6FF0024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_expression_in_expression7110 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_73_in_assignmentOperator7150 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_113_in_assignmentOperator7160 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_114_in_assignmentOperator7170 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_115_in_assignmentOperator7180 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_116_in_assignmentOperator7190 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_117_in_assignmentOperator7200 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_118_in_assignmentOperator7210 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_119_in_assignmentOperator7220 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_120_in_assignmentOperator7230 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_62_in_assignmentOperator7251 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_62_in_assignmentOperator7255 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_73_in_assignmentOperator7259 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_64_in_assignmentOperator7292 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_64_in_assignmentOperator7296 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_64_in_assignmentOperator7300 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_73_in_assignmentOperator7304 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_64_in_assignmentOperator7335 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_64_in_assignmentOperator7339 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_73_in_assignmentOperator7343 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalOrExpression_in_conditionalExpression7382 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L});
    public static final BitSet FOLLOW_88_in_conditionalExpression7387 = new BitSet(new long[]{0x0000081802000100L,0x80000001E6FF0024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_expression_in_conditionalExpression7391 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_98_in_conditionalExpression7393 = new BitSet(new long[]{0x0000081802000100L,0x80000001E6FF0024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_expression_in_conditionalExpression7397 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalAndExpression_in_conditionalOrExpression7443 = new BitSet(new long[]{0x0000000000000002L,0x0200000000000000L});
    public static final BitSet FOLLOW_121_in_conditionalOrExpression7449 = new BitSet(new long[]{0x0000081802000100L,0x80000001E6FF0024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_conditionalAndExpression_in_conditionalOrExpression7453 = new BitSet(new long[]{0x0000000000000002L,0x0200000000000000L});
    public static final BitSet FOLLOW_inclusiveOrExpression_in_conditionalAndExpression7494 = new BitSet(new long[]{0x0000000000000002L,0x0400000000000000L});
    public static final BitSet FOLLOW_122_in_conditionalAndExpression7500 = new BitSet(new long[]{0x0000081802000100L,0x80000001E6FF0024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_inclusiveOrExpression_in_conditionalAndExpression7504 = new BitSet(new long[]{0x0000000000000002L,0x0400000000000000L});
    public static final BitSet FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression7545 = new BitSet(new long[]{0x0000000000000002L,0x0000000000008000L});
    public static final BitSet FOLLOW_79_in_inclusiveOrExpression7551 = new BitSet(new long[]{0x0000081802000100L,0x80000001E6FF0024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression7555 = new BitSet(new long[]{0x0000000000000002L,0x0000000000008000L});
    public static final BitSet FOLLOW_andExpression_in_exclusiveOrExpression7596 = new BitSet(new long[]{0x0000000000000002L,0x0800000000000000L});
    public static final BitSet FOLLOW_123_in_exclusiveOrExpression7602 = new BitSet(new long[]{0x0000081802000100L,0x80000001E6FF0024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_andExpression_in_exclusiveOrExpression7606 = new BitSet(new long[]{0x0000000000000002L,0x0800000000000000L});
    public static final BitSet FOLLOW_equalityExpression_in_andExpression7644 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000002L});
    public static final BitSet FOLLOW_65_in_andExpression7650 = new BitSet(new long[]{0x0000081802000100L,0x80000001E6FF0024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_equalityExpression_in_andExpression7654 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000002L});
    public static final BitSet FOLLOW_instanceOfExpression_in_equalityExpression7696 = new BitSet(new long[]{0x0000000000000002L,0x3000000000000000L});
    public static final BitSet FOLLOW_124_in_equalityExpression7714 = new BitSet(new long[]{0x0000081802000100L,0x80000001E6FF0024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_125_in_equalityExpression7720 = new BitSet(new long[]{0x0000081802000100L,0x80000001E6FF0024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_instanceOfExpression_in_equalityExpression7727 = new BitSet(new long[]{0x0000000000000002L,0x3000000000000000L});
    public static final BitSet FOLLOW_relationalExpression_in_instanceOfExpression7769 = new BitSet(new long[]{0x0000000000000002L,0x4000000000000000L});
    public static final BitSet FOLLOW_126_in_instanceOfExpression7781 = new BitSet(new long[]{0x0000080000000000L,0x0000000000FF0000L});
    public static final BitSet FOLLOW_type_in_instanceOfExpression7785 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_shiftExpression_in_relationalExpression7822 = new BitSet(new long[]{0x4000000000000002L,0x0000000000000001L});
    public static final BitSet FOLLOW_relationalOp_in_relationalExpression7830 = new BitSet(new long[]{0x0000081802000100L,0x80000001E6FF0024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_shiftExpression_in_relationalExpression7834 = new BitSet(new long[]{0x4000000000000002L,0x0000000000000001L});
    public static final BitSet FOLLOW_62_in_relationalOp7879 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_73_in_relationalOp7883 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_64_in_relationalOp7912 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_73_in_relationalOp7916 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_62_in_relationalOp7936 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_64_in_relationalOp7946 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_additiveExpression_in_shiftExpression7971 = new BitSet(new long[]{0x4000000000000002L,0x0000000000000001L});
    public static final BitSet FOLLOW_shiftOp_in_shiftExpression7979 = new BitSet(new long[]{0x0000081802000100L,0x80000001E6FF0024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_additiveExpression_in_shiftExpression7983 = new BitSet(new long[]{0x4000000000000002L,0x0000000000000001L});
    public static final BitSet FOLLOW_62_in_shiftOp8024 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_62_in_shiftOp8028 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_64_in_shiftOp8059 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_64_in_shiftOp8063 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_64_in_shiftOp8067 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_64_in_shiftOp8096 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_64_in_shiftOp8100 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression8140 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_127_in_additiveExpression8147 = new BitSet(new long[]{0x0000081802000100L,0x80000001E6FF0024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_128_in_additiveExpression8153 = new BitSet(new long[]{0x0000081802000100L,0x80000001E6FF0024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression8160 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplicativeExpression8197 = new BitSet(new long[]{0x0010000000000002L,0x0000000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_52_in_multiplicativeExpression8205 = new BitSet(new long[]{0x0000081802000100L,0x80000001E6FF0024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_129_in_multiplicativeExpression8211 = new BitSet(new long[]{0x0000081802000100L,0x80000001E6FF0024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_130_in_multiplicativeExpression8217 = new BitSet(new long[]{0x0000081802000100L,0x80000001E6FF0024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplicativeExpression8224 = new BitSet(new long[]{0x0010000000000002L,0x0000000000000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_127_in_unaryExpression8255 = new BitSet(new long[]{0x0000081802000100L,0x80000001E6FF0024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression8259 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_128_in_unaryExpression8271 = new BitSet(new long[]{0x0000081802000100L,0x80000001E6FF0024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression8275 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_131_in_unaryExpression8287 = new BitSet(new long[]{0x0000081802000100L,0x80000001E6FF0024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression8291 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_132_in_unaryExpression8303 = new BitSet(new long[]{0x0000081802000100L,0x80000001E6FF0024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression8307 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unaryExpressionNotPlusMinus_in_unaryExpression8321 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_133_in_unaryExpressionNotPlusMinus8357 = new BitSet(new long[]{0x0000081802000100L,0x80000001E6FF0024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus8363 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_134_in_unaryExpressionNotPlusMinus8385 = new BitSet(new long[]{0x0000081802000100L,0x80000001E6FF0024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus8391 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_castExpression_in_unaryExpressionNotPlusMinus8413 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primary_in_unaryExpressionNotPlusMinus8427 = new BitSet(new long[]{0x0008000000000002L,0x0000000000000040L,0x0000000000000018L});
    public static final BitSet FOLLOW_selector_in_unaryExpressionNotPlusMinus8453 = new BitSet(new long[]{0x0008000000000002L,0x0000000000000040L,0x0000000000000018L});
    public static final BitSet FOLLOW_131_in_unaryExpressionNotPlusMinus8502 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_132_in_unaryExpressionNotPlusMinus8519 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_51_in_selector8558 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_identifierRule_in_selector8562 = new BitSet(new long[]{0x0000000000000002L,0x0000000004000000L});
    public static final BitSet FOLLOW_arguments_in_selector8583 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_51_in_selector8617 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_93_in_selector8621 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_51_in_selector8633 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_89_in_selector8637 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_superSuffix_in_selector8653 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_51_in_selector8677 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_selector8681 = new BitSet(new long[]{0x4000080000000000L});
    public static final BitSet FOLLOW_innerCreator_in_selector8685 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_70_in_selector8697 = new BitSet(new long[]{0x0000081802000100L,0x80000001E6FF0024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_expression_in_selector8701 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_71_in_selector8705 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_90_in_castExpression8740 = new BitSet(new long[]{0x0000080000000000L,0x0000000000FF0000L});
    public static final BitSet FOLLOW_primitiveType_in_castExpression8744 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_91_in_castExpression8746 = new BitSet(new long[]{0x0000081802000100L,0x80000001E6FF0024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_unaryExpression_in_castExpression8750 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_90_in_castExpression8761 = new BitSet(new long[]{0x0000080000000000L,0x0000000000FF0000L});
    public static final BitSet FOLLOW_type_in_castExpression8765 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_91_in_castExpression8767 = new BitSet(new long[]{0x0000081802000100L,0x80000001E6FF0024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_unaryExpressionNotPlusMinus_in_castExpression8771 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parExpression_in_primary8811 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifierSuffixRubbush_in_primary8825 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_89_in_primary8840 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_superSuffix_in_primary8854 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nonTargetPrimary_in_primary8876 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_135_in_primary8890 = new BitSet(new long[]{0x4000080000000000L,0x0000000000FF0000L});
    public static final BitSet FOLLOW_creator_in_primary8896 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_moreidentifierRuleSuffixRubbish_in_primary8910 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_voidType_in_primary8924 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_51_in_primary8926 = new BitSet(new long[]{0x0800000000000000L});
    public static final BitSet FOLLOW_59_in_primary8930 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_primary8944 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_51_in_primary8946 = new BitSet(new long[]{0x0800000000000000L});
    public static final BitSet FOLLOW_59_in_primary8950 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_in_nonTargetPrimary8979 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifierRule_in_moreidentifierRuleSuffixRubbish9014 = new BitSet(new long[]{0x0008000000000002L,0x0000000004000040L});
    public static final BitSet FOLLOW_51_in_moreidentifierRuleSuffixRubbish9034 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_identifierRule_in_moreidentifierRuleSuffixRubbish9038 = new BitSet(new long[]{0x0008000000000002L,0x0000000004000040L});
    public static final BitSet FOLLOW_70_in_moreidentifierRuleSuffixRubbish9068 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_71_in_moreidentifierRuleSuffixRubbish9070 = new BitSet(new long[]{0x0008000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_51_in_moreidentifierRuleSuffixRubbish9077 = new BitSet(new long[]{0x0800000000000000L});
    public static final BitSet FOLLOW_59_in_moreidentifierRuleSuffixRubbish9081 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayAccessSuffixRubbish_in_moreidentifierRuleSuffixRubbish9101 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_argumentsSuffixRubbish_in_moreidentifierRuleSuffixRubbish9115 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_51_in_moreidentifierRuleSuffixRubbish9128 = new BitSet(new long[]{0x0800000000000000L});
    public static final BitSet FOLLOW_59_in_moreidentifierRuleSuffixRubbish9132 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_51_in_moreidentifierRuleSuffixRubbish9153 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_explicitGenericInvocation_in_moreidentifierRuleSuffixRubbish9157 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_51_in_moreidentifierRuleSuffixRubbish9170 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_93_in_moreidentifierRuleSuffixRubbish9174 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_51_in_moreidentifierRuleSuffixRubbish9194 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_89_in_moreidentifierRuleSuffixRubbish9198 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_superSuffix_in_moreidentifierRuleSuffixRubbish9214 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_51_in_moreidentifierRuleSuffixRubbish9226 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_moreidentifierRuleSuffixRubbish9230 = new BitSet(new long[]{0x4000080000000000L});
    public static final BitSet FOLLOW_innerCreator_in_moreidentifierRuleSuffixRubbish9234 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_93_in_identifierSuffixRubbush9258 = new BitSet(new long[]{0x0008000000000002L,0x0000000004000040L});
    public static final BitSet FOLLOW_51_in_identifierSuffixRubbush9262 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_identifierRule_in_identifierSuffixRubbush9266 = new BitSet(new long[]{0x0008000000000002L,0x0000000004000040L});
    public static final BitSet FOLLOW_arrayAccessSuffixRubbish_in_identifierSuffixRubbush9290 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_argumentsSuffixRubbish_in_identifierSuffixRubbush9304 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_51_in_identifierSuffixRubbush9316 = new BitSet(new long[]{0x0800000000000000L});
    public static final BitSet FOLLOW_59_in_identifierSuffixRubbush9318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_51_in_identifierSuffixRubbush9330 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_explicitGenericInvocation_in_identifierSuffixRubbush9334 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_51_in_identifierSuffixRubbush9346 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_89_in_identifierSuffixRubbush9350 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_superSuffix_in_identifierSuffixRubbush9354 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_51_in_identifierSuffixRubbush9366 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_identifierSuffixRubbush9370 = new BitSet(new long[]{0x4000080000000000L});
    public static final BitSet FOLLOW_innerCreator_in_identifierSuffixRubbush9374 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arguments_in_argumentsSuffixRubbish9401 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_70_in_arrayAccessSuffixRubbish9447 = new BitSet(new long[]{0x0000081802000100L,0x80000001E6FF0024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_expression_in_arrayAccessSuffixRubbish9451 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_71_in_arrayAccessSuffixRubbish9455 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000040L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_creator9510 = new BitSet(new long[]{0x0000080000000000L,0x0000000000FF0000L});
    public static final BitSet FOLLOW_createdName_in_creator9514 = new BitSet(new long[]{0x4000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_62_in_creator9519 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_64_in_creator9520 = new BitSet(new long[]{0x4000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_classCreatorRest_in_creator9526 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createdName_in_creator9550 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_70_in_creator9568 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_71_in_creator9570 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000044L});
    public static final BitSet FOLLOW_arrayInitializer_in_creator9578 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createdName_in_creator9601 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_70_in_creator9617 = new BitSet(new long[]{0x0000081802000100L,0x80000001E6FF0024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_expression_in_creator9621 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_71_in_creator9623 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000040L});
    public static final BitSet FOLLOW_70_in_creator9642 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_71_in_creator9644 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000040L});
    public static final BitSet FOLLOW_createdName_in_creator9660 = new BitSet(new long[]{0x4000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_62_in_creator9665 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_64_in_creator9666 = new BitSet(new long[]{0x4000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_classCreatorRest_in_creator9672 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classOrInterfaceType_in_createdName9709 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primitiveType_in_createdName9723 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_innerCreator9753 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_identifierRule_in_innerCreator9767 = new BitSet(new long[]{0x4000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_classCreatorRest_in_innerCreator9771 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arguments_in_classCreatorRest9807 = new BitSet(new long[]{0x3000000000000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_classBody_in_classCreatorRest9813 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_explicitGenericInvocation9843 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_identifierRule_in_explicitGenericInvocation9847 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_arguments_in_explicitGenericInvocation9851 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_62_in_nonWildcardTypeArguments9886 = new BitSet(new long[]{0x0000080000000000L,0x0000000000FF0000L});
    public static final BitSet FOLLOW_typeList_in_nonWildcardTypeArguments9890 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_64_in_nonWildcardTypeArguments9893 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_51_in_superSuffix9939 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_identifierRule_in_superSuffix9943 = new BitSet(new long[]{0x0000000000000002L,0x0000000004000000L});
    public static final BitSet FOLLOW_arguments_in_superSuffix9958 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_90_in_arguments10018 = new BitSet(new long[]{0x0200081802000100L,0x80000003EEFF0024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_expressionList_in_arguments10023 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_91_in_arguments10030 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotations_in_synpred5_JavaP126 = new BitSet(new long[]{0x0FE4808000000000L,0x0000000200000010L});
    public static final BitSet FOLLOW_packageDeclaration_in_synpred5_JavaP142 = new BitSet(new long[]{0x0FE7808000000002L,0x0000000200000010L});
    public static final BitSet FOLLOW_importDeclaration_in_synpred5_JavaP177 = new BitSet(new long[]{0x0FE7808000000002L,0x0000000200000010L});
    public static final BitSet FOLLOW_typeDeclaration_in_synpred5_JavaP197 = new BitSet(new long[]{0x0FE5808000000002L,0x0000000200000010L});
    public static final BitSet FOLLOW_classOrInterfaceDeclaration_in_synpred5_JavaP246 = new BitSet(new long[]{0x0FE5808000000002L,0x0000000200000010L});
    public static final BitSet FOLLOW_typeDeclaration_in_synpred5_JavaP280 = new BitSet(new long[]{0x0FE5808000000002L,0x0000000200000010L});
    public static final BitSet FOLLOW_methodDeclaration_in_synpred52_JavaP2285 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceConstant_in_synpred60_JavaP2695 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_65_in_synpred92_JavaP3943 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_classOrInterfaceType_in_synpred92_JavaP3947 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifiers_in_synpred108_JavaP4414 = new BitSet(new long[]{0x0000080000000000L,0x0000000000FF0000L});
    public static final BitSet FOLLOW_type_in_synpred108_JavaP4418 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_synpred108_JavaP4422 = new BitSet(new long[]{0x8000000000000002L});
    public static final BitSet FOLLOW_63_in_synpred108_JavaP4433 = new BitSet(new long[]{0x0200080000000000L,0x0000000200FF0000L});
    public static final BitSet FOLLOW_formalParameterDecls_in_synpred108_JavaP4437 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_explicitConstructorInvocation_in_synpred109_JavaP4550 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_synpred112_JavaP4601 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_93_in_synpred112_JavaP4604 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_arguments_in_synpred112_JavaP4608 = new BitSet(new long[]{0x0001000000000000L});
    public static final BitSet FOLLOW_48_in_synpred112_JavaP4610 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_synpred122_JavaP4894 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localVariableDeclarationStatement_in_synpred145_JavaP5552 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classOrInterfaceDeclaration_in_synpred146_JavaP5566 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_100_in_synpred151_JavaP5782 = new BitSet(new long[]{0x0FE5899802000100L,0x80007DEBE6FF0834L,0x00000000000000F9L});
    public static final BitSet FOLLOW_statement_in_synpred151_JavaP5786 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_catches_in_synpred157_JavaP5944 = new BitSet(new long[]{0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_105_in_synpred157_JavaP5948 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_block_in_synpred157_JavaP5952 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_catches_in_synpred158_JavaP5979 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_112_in_synpred177_JavaP6688 = new BitSet(new long[]{0x0000081802000100L,0x80000001E6FF0024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_constantExpression_in_synpred177_JavaP6692 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_98_in_synpred177_JavaP6694 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_112_in_synpred178_JavaP6706 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_enumConstantName_in_synpred178_JavaP6710 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_98_in_synpred178_JavaP6712 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enhancedForControl_in_synpred179_JavaP6764 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localVariableDeclaration_in_synpred183_JavaP6824 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assignmentOperator_in_synpred185_JavaP7106 = new BitSet(new long[]{0x0000081802000100L,0x80000001E6FF0024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_expression_in_synpred185_JavaP7110 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_62_in_synpred195_JavaP7241 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_62_in_synpred195_JavaP7243 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_73_in_synpred195_JavaP7245 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_64_in_synpred196_JavaP7280 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_64_in_synpred196_JavaP7282 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_64_in_synpred196_JavaP7284 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_73_in_synpred196_JavaP7286 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_64_in_synpred197_JavaP7325 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_64_in_synpred197_JavaP7327 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_73_in_synpred197_JavaP7329 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_62_in_synpred208_JavaP7871 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_73_in_synpred208_JavaP7873 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_64_in_synpred209_JavaP7904 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_73_in_synpred209_JavaP7906 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_62_in_synpred212_JavaP8016 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_62_in_synpred212_JavaP8018 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_64_in_synpred213_JavaP8049 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_64_in_synpred213_JavaP8051 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_64_in_synpred213_JavaP8053 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_64_in_synpred214_JavaP8088 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_64_in_synpred214_JavaP8090 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_castExpression_in_synpred226_JavaP8413 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_90_in_synpred235_JavaP8740 = new BitSet(new long[]{0x0000080000000000L,0x0000000000FF0000L});
    public static final BitSet FOLLOW_primitiveType_in_synpred235_JavaP8744 = new BitSet(new long[]{0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_91_in_synpred235_JavaP8746 = new BitSet(new long[]{0x0000081802000100L,0x80000001E6FF0024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_unaryExpression_in_synpred235_JavaP8750 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_moreidentifierRuleSuffixRubbish_in_synpred241_JavaP8910 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_51_in_synpred243_JavaP9034 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_identifierRule_in_synpred243_JavaP9038 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_70_in_synpred245_JavaP9068 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_71_in_synpred245_JavaP9070 = new BitSet(new long[]{0x0008000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_51_in_synpred245_JavaP9077 = new BitSet(new long[]{0x0800000000000000L});
    public static final BitSet FOLLOW_59_in_synpred245_JavaP9081 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayAccessSuffixRubbish_in_synpred246_JavaP9101 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_51_in_synpred248_JavaP9128 = new BitSet(new long[]{0x0800000000000000L});
    public static final BitSet FOLLOW_59_in_synpred248_JavaP9132 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_51_in_synpred249_JavaP9153 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_explicitGenericInvocation_in_synpred249_JavaP9157 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_51_in_synpred250_JavaP9170 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_93_in_synpred250_JavaP9174 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_51_in_synpred251_JavaP9194 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_89_in_synpred251_JavaP9198 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_superSuffix_in_synpred251_JavaP9214 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_51_in_synpred252_JavaP9226 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_synpred252_JavaP9230 = new BitSet(new long[]{0x4000080000000000L});
    public static final BitSet FOLLOW_innerCreator_in_synpred252_JavaP9234 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_51_in_synpred253_JavaP9262 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_identifierRule_in_synpred253_JavaP9266 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayAccessSuffixRubbish_in_synpred254_JavaP9290 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_51_in_synpred256_JavaP9316 = new BitSet(new long[]{0x0800000000000000L});
    public static final BitSet FOLLOW_59_in_synpred256_JavaP9318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_51_in_synpred257_JavaP9330 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_explicitGenericInvocation_in_synpred257_JavaP9334 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_51_in_synpred258_JavaP9346 = new BitSet(new long[]{0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_89_in_synpred258_JavaP9350 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_superSuffix_in_synpred258_JavaP9354 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_51_in_synpred259_JavaP9366 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_135_in_synpred259_JavaP9370 = new BitSet(new long[]{0x4000080000000000L});
    public static final BitSet FOLLOW_innerCreator_in_synpred259_JavaP9374 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_70_in_synpred260_JavaP9447 = new BitSet(new long[]{0x0000081802000100L,0x80000001E6FF0024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_expression_in_synpred260_JavaP9451 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_71_in_synpred260_JavaP9455 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createdName_in_synpred264_JavaP9550 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_70_in_synpred264_JavaP9568 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_71_in_synpred264_JavaP9570 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000044L});
    public static final BitSet FOLLOW_arrayInitializer_in_synpred264_JavaP9578 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_70_in_synpred265_JavaP9617 = new BitSet(new long[]{0x0000081802000100L,0x80000001E6FF0024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_expression_in_synpred265_JavaP9621 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_71_in_synpred265_JavaP9623 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createdName_in_synpred267_JavaP9601 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_70_in_synpred267_JavaP9617 = new BitSet(new long[]{0x0000081802000100L,0x80000001E6FF0024L,0x00000000000000F9L});
    public static final BitSet FOLLOW_expression_in_synpred267_JavaP9621 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_71_in_synpred267_JavaP9623 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000040L});
    public static final BitSet FOLLOW_70_in_synpred267_JavaP9642 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_71_in_synpred267_JavaP9644 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000040L});

}